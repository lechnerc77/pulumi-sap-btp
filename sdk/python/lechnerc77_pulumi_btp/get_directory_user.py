# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetDirectoryUserResult',
    'AwaitableGetDirectoryUserResult',
    'get_directory_user',
    'get_directory_user_output',
]

@pulumi.output_type
class GetDirectoryUserResult:
    """
    A collection of values returned by getDirectoryUser.
    """
    def __init__(__self__, active=None, directory_id=None, email=None, family_name=None, given_name=None, id=None, origin=None, role_collections=None, user_name=None, verified=None):
        if active and not isinstance(active, bool):
            raise TypeError("Expected argument 'active' to be a bool")
        pulumi.set(__self__, "active", active)
        if directory_id and not isinstance(directory_id, str):
            raise TypeError("Expected argument 'directory_id' to be a str")
        pulumi.set(__self__, "directory_id", directory_id)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if family_name and not isinstance(family_name, str):
            raise TypeError("Expected argument 'family_name' to be a str")
        pulumi.set(__self__, "family_name", family_name)
        if given_name and not isinstance(given_name, str):
            raise TypeError("Expected argument 'given_name' to be a str")
        pulumi.set(__self__, "given_name", given_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if origin and not isinstance(origin, str):
            raise TypeError("Expected argument 'origin' to be a str")
        pulumi.set(__self__, "origin", origin)
        if role_collections and not isinstance(role_collections, list):
            raise TypeError("Expected argument 'role_collections' to be a list")
        pulumi.set(__self__, "role_collections", role_collections)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)
        if verified and not isinstance(verified, bool):
            raise TypeError("Expected argument 'verified' to be a bool")
        pulumi.set(__self__, "verified", verified)

    @property
    @pulumi.getter
    def active(self) -> bool:
        """
        Shows if the account is still in use.
        """
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="directoryId")
    def directory_id(self) -> str:
        """
        The ID of the directory.
        """
        return pulumi.get(self, "directory_id")

    @property
    @pulumi.getter
    def email(self) -> str:
        """
        The e-mail address of the user.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> str:
        """
        The last name of the user.
        """
        return pulumi.get(self, "family_name")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> str:
        """
        The given name of the user.
        """
        return pulumi.get(self, "given_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the user.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def origin(self) -> str:
        """
        The identity provider that hosts the user. The default value is 'ldap'
        """
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="roleCollections")
    def role_collections(self) -> Sequence[str]:
        """
        The set of role collections, which are assigned to the user.
        """
        return pulumi.get(self, "role_collections")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> str:
        """
        The username of the user.
        """
        return pulumi.get(self, "user_name")

    @property
    @pulumi.getter
    def verified(self) -> bool:
        """
        The verification status of the user.
        """
        return pulumi.get(self, "verified")


class AwaitableGetDirectoryUserResult(GetDirectoryUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDirectoryUserResult(
            active=self.active,
            directory_id=self.directory_id,
            email=self.email,
            family_name=self.family_name,
            given_name=self.given_name,
            id=self.id,
            origin=self.origin,
            role_collections=self.role_collections,
            user_name=self.user_name,
            verified=self.verified)


def get_directory_user(directory_id: Optional[str] = None,
                       origin: Optional[str] = None,
                       user_name: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDirectoryUserResult:
    """
    Shows registered users in a directory. Users belong to one of the identity providers (IdPs) of the global account.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    someone = btp.get_directory_user(directory_id="dd005d8b-1fee-4e6b-b6ff-cb9a197b7fe0",
        user_name="john.doe@mycompany.com")
    someone_else = btp.get_directory_user(directory_id="dd005d8b-1fee-4e6b-b6ff-cb9a197b7fe0",
        origin="my-custom-idp",
        user_name="jane.doe@mycompany.com")
    ```


    :param str directory_id: The ID of the directory.
    :param str origin: The identity provider that hosts the user. The default value is 'ldap'
    :param str user_name: The username of the user.
    """
    __args__ = dict()
    __args__['directoryId'] = directory_id
    __args__['origin'] = origin
    __args__['userName'] = user_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('btp:index/getDirectoryUser:getDirectoryUser', __args__, opts=opts, typ=GetDirectoryUserResult).value

    return AwaitableGetDirectoryUserResult(
        active=pulumi.get(__ret__, 'active'),
        directory_id=pulumi.get(__ret__, 'directory_id'),
        email=pulumi.get(__ret__, 'email'),
        family_name=pulumi.get(__ret__, 'family_name'),
        given_name=pulumi.get(__ret__, 'given_name'),
        id=pulumi.get(__ret__, 'id'),
        origin=pulumi.get(__ret__, 'origin'),
        role_collections=pulumi.get(__ret__, 'role_collections'),
        user_name=pulumi.get(__ret__, 'user_name'),
        verified=pulumi.get(__ret__, 'verified'))


@_utilities.lift_output_func(get_directory_user)
def get_directory_user_output(directory_id: Optional[pulumi.Input[str]] = None,
                              origin: Optional[pulumi.Input[Optional[str]]] = None,
                              user_name: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDirectoryUserResult]:
    """
    Shows registered users in a directory. Users belong to one of the identity providers (IdPs) of the global account.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    someone = btp.get_directory_user(directory_id="dd005d8b-1fee-4e6b-b6ff-cb9a197b7fe0",
        user_name="john.doe@mycompany.com")
    someone_else = btp.get_directory_user(directory_id="dd005d8b-1fee-4e6b-b6ff-cb9a197b7fe0",
        origin="my-custom-idp",
        user_name="jane.doe@mycompany.com")
    ```


    :param str directory_id: The ID of the directory.
    :param str origin: The identity provider that hosts the user. The default value is 'ldap'
    :param str user_name: The username of the user.
    """
    ...
