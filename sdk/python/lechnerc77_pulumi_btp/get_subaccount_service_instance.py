# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSubaccountServiceInstanceResult',
    'AwaitableGetSubaccountServiceInstanceResult',
    'get_subaccount_service_instance',
    'get_subaccount_service_instance_output',
]

@pulumi.output_type
class GetSubaccountServiceInstanceResult:
    """
    A collection of values returned by getSubaccountServiceInstance.
    """
    def __init__(__self__, context=None, created_date=None, id=None, labels=None, last_modified=None, name=None, parameters=None, platform_id=None, ready=None, referenced_instance_id=None, serviceplan_id=None, shared=None, state=None, subaccount_id=None, usable=None):
        if context and not isinstance(context, dict):
            raise TypeError("Expected argument 'context' to be a dict")
        pulumi.set(__self__, "context", context)
        if created_date and not isinstance(created_date, str):
            raise TypeError("Expected argument 'created_date' to be a str")
        pulumi.set(__self__, "created_date", created_date)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if last_modified and not isinstance(last_modified, str):
            raise TypeError("Expected argument 'last_modified' to be a str")
        pulumi.set(__self__, "last_modified", last_modified)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if parameters and not isinstance(parameters, str):
            raise TypeError("Expected argument 'parameters' to be a str")
        pulumi.set(__self__, "parameters", parameters)
        if platform_id and not isinstance(platform_id, str):
            raise TypeError("Expected argument 'platform_id' to be a str")
        pulumi.set(__self__, "platform_id", platform_id)
        if ready and not isinstance(ready, bool):
            raise TypeError("Expected argument 'ready' to be a bool")
        pulumi.set(__self__, "ready", ready)
        if referenced_instance_id and not isinstance(referenced_instance_id, str):
            raise TypeError("Expected argument 'referenced_instance_id' to be a str")
        pulumi.set(__self__, "referenced_instance_id", referenced_instance_id)
        if serviceplan_id and not isinstance(serviceplan_id, str):
            raise TypeError("Expected argument 'serviceplan_id' to be a str")
        pulumi.set(__self__, "serviceplan_id", serviceplan_id)
        if shared and not isinstance(shared, bool):
            raise TypeError("Expected argument 'shared' to be a bool")
        pulumi.set(__self__, "shared", shared)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if subaccount_id and not isinstance(subaccount_id, str):
            raise TypeError("Expected argument 'subaccount_id' to be a str")
        pulumi.set(__self__, "subaccount_id", subaccount_id)
        if usable and not isinstance(usable, bool):
            raise TypeError("Expected argument 'usable' to be a bool")
        pulumi.set(__self__, "usable", usable)

    @property
    @pulumi.getter
    def context(self) -> Mapping[str, str]:
        """
        Contextual data for the resource.
        """
        return pulumi.get(self, "context")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the service instance.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, Sequence[str]]:
        """
        The set of words or phrases assigned to the service instance.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the service instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameters(self) -> str:
        """
        The configuration parameters for the service instance.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> str:
        """
        The platform ID.
        """
        return pulumi.get(self, "platform_id")

    @property
    @pulumi.getter
    def ready(self) -> bool:
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter(name="referencedInstanceId")
    def referenced_instance_id(self) -> str:
        """
        The ID of the instance to which the service instance refers.
        """
        return pulumi.get(self, "referenced_instance_id")

    @property
    @pulumi.getter(name="serviceplanId")
    def serviceplan_id(self) -> str:
        """
        The ID of the service plan.
        """
        return pulumi.get(self, "serviceplan_id")

    @property
    @pulumi.getter
    def shared(self) -> bool:
        """
        Shows whether the service instance is shared.
        """
        return pulumi.get(self, "shared")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the service instance.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subaccountId")
    def subaccount_id(self) -> str:
        """
        The ID of the subaccount.
        """
        return pulumi.get(self, "subaccount_id")

    @property
    @pulumi.getter
    def usable(self) -> bool:
        """
        Shows whether the resource can be used.
        """
        return pulumi.get(self, "usable")


class AwaitableGetSubaccountServiceInstanceResult(GetSubaccountServiceInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubaccountServiceInstanceResult(
            context=self.context,
            created_date=self.created_date,
            id=self.id,
            labels=self.labels,
            last_modified=self.last_modified,
            name=self.name,
            parameters=self.parameters,
            platform_id=self.platform_id,
            ready=self.ready,
            referenced_instance_id=self.referenced_instance_id,
            serviceplan_id=self.serviceplan_id,
            shared=self.shared,
            state=self.state,
            subaccount_id=self.subaccount_id,
            usable=self.usable)


def get_subaccount_service_instance(id: Optional[str] = None,
                                    name: Optional[str] = None,
                                    subaccount_id: Optional[str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubaccountServiceInstanceResult:
    """
    Gets details about a specific provisioned service instance, such as its name, id,  platform to which it belongs, and the last operation performed.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    by_id = btp.get_subaccount_service_instance(id="bc8a216f-1184-49dc-b4b4-17cfe2828965",
        subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    by_name = btp.get_subaccount_service_instance(name="my-xsuaa-application",
        subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    ```


    :param str id: The ID of the service instance.
    :param str name: The name of the service instance.
    :param str subaccount_id: The ID of the subaccount.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['subaccountId'] = subaccount_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('btp:index/getSubaccountServiceInstance:getSubaccountServiceInstance', __args__, opts=opts, typ=GetSubaccountServiceInstanceResult).value

    return AwaitableGetSubaccountServiceInstanceResult(
        context=pulumi.get(__ret__, 'context'),
        created_date=pulumi.get(__ret__, 'created_date'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        last_modified=pulumi.get(__ret__, 'last_modified'),
        name=pulumi.get(__ret__, 'name'),
        parameters=pulumi.get(__ret__, 'parameters'),
        platform_id=pulumi.get(__ret__, 'platform_id'),
        ready=pulumi.get(__ret__, 'ready'),
        referenced_instance_id=pulumi.get(__ret__, 'referenced_instance_id'),
        serviceplan_id=pulumi.get(__ret__, 'serviceplan_id'),
        shared=pulumi.get(__ret__, 'shared'),
        state=pulumi.get(__ret__, 'state'),
        subaccount_id=pulumi.get(__ret__, 'subaccount_id'),
        usable=pulumi.get(__ret__, 'usable'))


@_utilities.lift_output_func(get_subaccount_service_instance)
def get_subaccount_service_instance_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                                           name: Optional[pulumi.Input[Optional[str]]] = None,
                                           subaccount_id: Optional[pulumi.Input[str]] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSubaccountServiceInstanceResult]:
    """
    Gets details about a specific provisioned service instance, such as its name, id,  platform to which it belongs, and the last operation performed.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    by_id = btp.get_subaccount_service_instance(id="bc8a216f-1184-49dc-b4b4-17cfe2828965",
        subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    by_name = btp.get_subaccount_service_instance(name="my-xsuaa-application",
        subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    ```


    :param str id: The ID of the service instance.
    :param str name: The name of the service instance.
    :param str subaccount_id: The ID of the subaccount.
    """
    ...
