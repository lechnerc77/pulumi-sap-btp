# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSubaccountResult',
    'AwaitableGetSubaccountResult',
    'get_subaccount',
    'get_subaccount_output',
]

@pulumi.output_type
class GetSubaccountResult:
    """
    A collection of values returned by getSubaccount.
    """
    def __init__(__self__, beta_enabled=None, created_by=None, created_date=None, description=None, id=None, labels=None, last_modified=None, name=None, parent_features=None, parent_id=None, region=None, state=None, subdomain=None, usage=None):
        if beta_enabled and not isinstance(beta_enabled, bool):
            raise TypeError("Expected argument 'beta_enabled' to be a bool")
        pulumi.set(__self__, "beta_enabled", beta_enabled)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if created_date and not isinstance(created_date, str):
            raise TypeError("Expected argument 'created_date' to be a str")
        pulumi.set(__self__, "created_date", created_date)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if last_modified and not isinstance(last_modified, str):
            raise TypeError("Expected argument 'last_modified' to be a str")
        pulumi.set(__self__, "last_modified", last_modified)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if parent_features and not isinstance(parent_features, list):
            raise TypeError("Expected argument 'parent_features' to be a list")
        pulumi.set(__self__, "parent_features", parent_features)
        if parent_id and not isinstance(parent_id, str):
            raise TypeError("Expected argument 'parent_id' to be a str")
        pulumi.set(__self__, "parent_id", parent_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if subdomain and not isinstance(subdomain, str):
            raise TypeError("Expected argument 'subdomain' to be a str")
        pulumi.set(__self__, "subdomain", subdomain)
        if usage and not isinstance(usage, str):
            raise TypeError("Expected argument 'usage' to be a str")
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter(name="betaEnabled")
    def beta_enabled(self) -> bool:
        """
        Shows whether the subaccount can use beta services and applications.
        """
        return pulumi.get(self, "beta_enabled")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The details of the user that created the subaccount.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the subaccount.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the subaccount.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, Sequence[str]]:
        """
        Set of words or phrases assigned to the subaccount.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A descriptive name of the subaccount for customer-facing UIs.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentFeatures")
    def parent_features(self) -> Sequence[str]:
        """
        The features of parent entity of the subaccount.
        """
        return pulumi.get(self, "parent_features")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> str:
        """
        The ID of the subaccountâ€™s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
        """
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region in which the subaccount was created.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the subaccount. Possible values are:
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def subdomain(self) -> str:
        return pulumi.get(self, "subdomain")

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")


class AwaitableGetSubaccountResult(GetSubaccountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubaccountResult(
            beta_enabled=self.beta_enabled,
            created_by=self.created_by,
            created_date=self.created_date,
            description=self.description,
            id=self.id,
            labels=self.labels,
            last_modified=self.last_modified,
            name=self.name,
            parent_features=self.parent_features,
            parent_id=self.parent_id,
            region=self.region,
            state=self.state,
            subdomain=self.subdomain,
            usage=self.usage)


def get_subaccount(id: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubaccountResult:
    """
    Gets details about a subaccount.

    __Tip:__
    You must be assigned to the admin or viewer role of the global account, directory, or subaccount.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    my_account = btp.get_subaccount(id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    ```


    :param str id: The ID of the subaccount.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('btp:index/getSubaccount:getSubaccount', __args__, opts=opts, typ=GetSubaccountResult).value

    return AwaitableGetSubaccountResult(
        beta_enabled=pulumi.get(__ret__, 'beta_enabled'),
        created_by=pulumi.get(__ret__, 'created_by'),
        created_date=pulumi.get(__ret__, 'created_date'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        last_modified=pulumi.get(__ret__, 'last_modified'),
        name=pulumi.get(__ret__, 'name'),
        parent_features=pulumi.get(__ret__, 'parent_features'),
        parent_id=pulumi.get(__ret__, 'parent_id'),
        region=pulumi.get(__ret__, 'region'),
        state=pulumi.get(__ret__, 'state'),
        subdomain=pulumi.get(__ret__, 'subdomain'),
        usage=pulumi.get(__ret__, 'usage'))


@_utilities.lift_output_func(get_subaccount)
def get_subaccount_output(id: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSubaccountResult]:
    """
    Gets details about a subaccount.

    __Tip:__
    You must be assigned to the admin or viewer role of the global account, directory, or subaccount.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    my_account = btp.get_subaccount(id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    ```


    :param str id: The ID of the subaccount.
    """
    ...
