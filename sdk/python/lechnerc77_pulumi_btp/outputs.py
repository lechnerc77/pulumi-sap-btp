# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'DirectoryRoleCollectionRole',
    'GlobalaccountRoleCollectionRole',
    'SubaccountEnvironmentInstanceTimeouts',
    'SubaccountRoleCollectionRole',
    'SubaccountServiceInstanceTimeouts',
    'GetDirectoriesValueResult',
    'GetDirectoryEntitlementsValuesResult',
    'GetDirectoryRoleCollectionRoleResult',
    'GetDirectoryRoleCollectionsValueResult',
    'GetDirectoryRoleCollectionsValueRoleResult',
    'GetDirectoryRoleScopeResult',
    'GetDirectoryRolesValueResult',
    'GetDirectoryRolesValueScopeResult',
    'GetGlobalaccountEntitlementsValuesResult',
    'GetGlobalaccountRoleCollectionRoleResult',
    'GetGlobalaccountRoleCollectionsValueResult',
    'GetGlobalaccountRoleCollectionsValueRoleResult',
    'GetGlobalaccountRoleScopeResult',
    'GetGlobalaccountRolesValueResult',
    'GetGlobalaccountRolesValueScopeResult',
    'GetGlobalaccountTrustConfigurationsValueResult',
    'GetRegionsValueResult',
    'GetSubaccountAppOauth2ConfigurationResult',
    'GetSubaccountAppsValueResult',
    'GetSubaccountAppsValueOauth2ConfigurationResult',
    'GetSubaccountEntitlementsValuesResult',
    'GetSubaccountEnvironmentInstancesValueResult',
    'GetSubaccountEnvironmentsValueResult',
    'GetSubaccountRoleCollectionRoleResult',
    'GetSubaccountRoleCollectionsValueResult',
    'GetSubaccountRoleCollectionsValueRoleResult',
    'GetSubaccountRoleScopeResult',
    'GetSubaccountRolesValueResult',
    'GetSubaccountRolesValueScopeResult',
    'GetSubaccountServiceBindingsValueResult',
    'GetSubaccountServiceInstancesValueResult',
    'GetSubaccountServiceOfferingsValueResult',
    'GetSubaccountServicePlansValueResult',
    'GetSubaccountSubscriptionsValueResult',
    'GetSubaccountTrustConfigurationsValueResult',
    'GetSubaccountsValueResult',
]

@pulumi.output_type
class DirectoryRoleCollectionRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleTemplateAppId":
            suggest = "role_template_app_id"
        elif key == "roleTemplateName":
            suggest = "role_template_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DirectoryRoleCollectionRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DirectoryRoleCollectionRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DirectoryRoleCollectionRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 role_template_app_id: str,
                 role_template_name: str):
        """
        :param str name: The name of the referenced role.
        :param str role_template_app_id: The name of the referenced template app id.
        :param str role_template_name: The name of the referenced role template.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role_template_app_id", role_template_app_id)
        pulumi.set(__self__, "role_template_name", role_template_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the referenced role.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roleTemplateAppId")
    def role_template_app_id(self) -> str:
        """
        The name of the referenced template app id.
        """
        return pulumi.get(self, "role_template_app_id")

    @property
    @pulumi.getter(name="roleTemplateName")
    def role_template_name(self) -> str:
        """
        The name of the referenced role template.
        """
        return pulumi.get(self, "role_template_name")


@pulumi.output_type
class GlobalaccountRoleCollectionRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleTemplateAppId":
            suggest = "role_template_app_id"
        elif key == "roleTemplateName":
            suggest = "role_template_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalaccountRoleCollectionRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalaccountRoleCollectionRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalaccountRoleCollectionRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 role_template_app_id: str,
                 role_template_name: str):
        """
        :param str name: The name of the referenced role.
        :param str role_template_app_id: The name of the referenced template app id.
        :param str role_template_name: The name of the referenced role template.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role_template_app_id", role_template_app_id)
        pulumi.set(__self__, "role_template_name", role_template_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the referenced role.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roleTemplateAppId")
    def role_template_app_id(self) -> str:
        """
        The name of the referenced template app id.
        """
        return pulumi.get(self, "role_template_app_id")

    @property
    @pulumi.getter(name="roleTemplateName")
    def role_template_name(self) -> str:
        """
        The name of the referenced role template.
        """
        return pulumi.get(self, "role_template_name")


@pulumi.output_type
class SubaccountEnvironmentInstanceTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 delete: Optional[str] = None,
                 update: Optional[str] = None):
        """
        :param str create: Timeout for creating the environment instance.
        :param str delete: Timeout for deleting the environment instance.
        :param str update: Timeout for updating the environment instance.
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        Timeout for creating the environment instance.
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        """
        Timeout for deleting the environment instance.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def update(self) -> Optional[str]:
        """
        Timeout for updating the environment instance.
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class SubaccountRoleCollectionRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleTemplateAppId":
            suggest = "role_template_app_id"
        elif key == "roleTemplateName":
            suggest = "role_template_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SubaccountRoleCollectionRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SubaccountRoleCollectionRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SubaccountRoleCollectionRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 role_template_app_id: str,
                 role_template_name: str):
        """
        :param str name: The name of the referenced role.
        :param str role_template_app_id: The name of the referenced template app id.
        :param str role_template_name: The name of the referenced role template.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role_template_app_id", role_template_app_id)
        pulumi.set(__self__, "role_template_name", role_template_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the referenced role.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roleTemplateAppId")
    def role_template_app_id(self) -> str:
        """
        The name of the referenced template app id.
        """
        return pulumi.get(self, "role_template_app_id")

    @property
    @pulumi.getter(name="roleTemplateName")
    def role_template_name(self) -> str:
        """
        The name of the referenced role template.
        """
        return pulumi.get(self, "role_template_name")


@pulumi.output_type
class SubaccountServiceInstanceTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[str] = None,
                 delete: Optional[str] = None,
                 update: Optional[str] = None):
        """
        :param str create: Timeout for creating the service instance.
        :param str delete: Timeout for deleting the service instance.
        :param str update: Timeout for updating the service instance.
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[str]:
        """
        Timeout for creating the service instance.
        """
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[str]:
        """
        Timeout for deleting the service instance.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def update(self) -> Optional[str]:
        """
        Timeout for updating the service instance.
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class GetDirectoriesValueResult(dict):
    def __init__(__self__, *,
                 created_by: str,
                 created_date: str,
                 description: str,
                 features: Sequence[str],
                 id: str,
                 labels: Mapping[str, Sequence[str]],
                 last_modified: str,
                 name: str,
                 parent_id: str,
                 state: str,
                 subdomain: str):
        """
        :param str created_by: The details of the user that created the directory.
        :param str created_date: The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param str description: The description of the directory.
        :param Sequence[str] features: The features that are enabled for the directory. Possible values are:
        :param str id: The ID of the directory.
        """
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_date", created_date)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "features", features)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent_id", parent_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The details of the user that created the directory.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the directory.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def features(self) -> Sequence[str]:
        """
        The features that are enabled for the directory. Possible values are:
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the directory.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> str:
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def subdomain(self) -> str:
        return pulumi.get(self, "subdomain")


@pulumi.output_type
class GetDirectoryEntitlementsValuesResult(dict):
    def __init__(__self__, *,
                 category: str,
                 plan_description: str,
                 plan_display_name: str,
                 plan_name: str,
                 quota_assigned: float,
                 quota_remaining: float,
                 service_display_name: str,
                 service_name: str):
        """
        :param str category: The current state of the entitlement. Possible values are:
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "plan_description", plan_description)
        pulumi.set(__self__, "plan_display_name", plan_display_name)
        pulumi.set(__self__, "plan_name", plan_name)
        pulumi.set(__self__, "quota_assigned", quota_assigned)
        pulumi.set(__self__, "quota_remaining", quota_remaining)
        pulumi.set(__self__, "service_display_name", service_display_name)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        The current state of the entitlement. Possible values are:
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="planDescription")
    def plan_description(self) -> str:
        return pulumi.get(self, "plan_description")

    @property
    @pulumi.getter(name="planDisplayName")
    def plan_display_name(self) -> str:
        return pulumi.get(self, "plan_display_name")

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> str:
        return pulumi.get(self, "plan_name")

    @property
    @pulumi.getter(name="quotaAssigned")
    def quota_assigned(self) -> float:
        return pulumi.get(self, "quota_assigned")

    @property
    @pulumi.getter(name="quotaRemaining")
    def quota_remaining(self) -> float:
        return pulumi.get(self, "quota_remaining")

    @property
    @pulumi.getter(name="serviceDisplayName")
    def service_display_name(self) -> str:
        return pulumi.get(self, "service_display_name")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetDirectoryRoleCollectionRoleResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 role_template_app_id: str,
                 role_template_name: str):
        """
        :param str description: The description of the referenced role
        :param str name: The name of the referenced role.
        :param str role_template_app_id: The name of the referenced template app id
        :param str role_template_name: The name of the referenced role template.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role_template_app_id", role_template_app_id)
        pulumi.set(__self__, "role_template_name", role_template_name)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the referenced role
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the referenced role.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roleTemplateAppId")
    def role_template_app_id(self) -> str:
        """
        The name of the referenced template app id
        """
        return pulumi.get(self, "role_template_app_id")

    @property
    @pulumi.getter(name="roleTemplateName")
    def role_template_name(self) -> str:
        """
        The name of the referenced role template.
        """
        return pulumi.get(self, "role_template_name")


@pulumi.output_type
class GetDirectoryRoleCollectionsValueResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 read_only: bool,
                 roles: Sequence['outputs.GetDirectoryRoleCollectionsValueRoleResult']):
        """
        :param str description: The description of the role collection.
        :param str name: The name of the role collection.
        :param bool read_only: Shows whether the role collection is read-only.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the role collection.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the role collection.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        """
        Shows whether the role collection is read-only.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def roles(self) -> Sequence['outputs.GetDirectoryRoleCollectionsValueRoleResult']:
        return pulumi.get(self, "roles")


@pulumi.output_type
class GetDirectoryRoleCollectionsValueRoleResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 role_template_app_id: str,
                 role_template_name: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role_template_app_id", role_template_app_id)
        pulumi.set(__self__, "role_template_name", role_template_name)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roleTemplateAppId")
    def role_template_app_id(self) -> str:
        return pulumi.get(self, "role_template_app_id")

    @property
    @pulumi.getter(name="roleTemplateName")
    def role_template_name(self) -> str:
        return pulumi.get(self, "role_template_name")


@pulumi.output_type
class GetDirectoryRoleScopeResult(dict):
    def __init__(__self__, *,
                 custom_grant_as_authority_to_apps: Sequence[str],
                 custom_granted_apps: Sequence[str],
                 description: str,
                 grant_as_authority_to_apps: Sequence[str],
                 granted_apps: Sequence[str],
                 name: str):
        """
        :param str description: The description of the scope.
        :param str name: The name of the scope.
        """
        pulumi.set(__self__, "custom_grant_as_authority_to_apps", custom_grant_as_authority_to_apps)
        pulumi.set(__self__, "custom_granted_apps", custom_granted_apps)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "grant_as_authority_to_apps", grant_as_authority_to_apps)
        pulumi.set(__self__, "granted_apps", granted_apps)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="customGrantAsAuthorityToApps")
    def custom_grant_as_authority_to_apps(self) -> Sequence[str]:
        return pulumi.get(self, "custom_grant_as_authority_to_apps")

    @property
    @pulumi.getter(name="customGrantedApps")
    def custom_granted_apps(self) -> Sequence[str]:
        return pulumi.get(self, "custom_granted_apps")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the scope.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="grantAsAuthorityToApps")
    def grant_as_authority_to_apps(self) -> Sequence[str]:
        return pulumi.get(self, "grant_as_authority_to_apps")

    @property
    @pulumi.getter(name="grantedApps")
    def granted_apps(self) -> Sequence[str]:
        return pulumi.get(self, "granted_apps")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the scope.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDirectoryRolesValueResult(dict):
    def __init__(__self__, *,
                 app_id: str,
                 app_name: str,
                 description: str,
                 name: str,
                 read_only: bool,
                 role_template_name: str,
                 scopes: Sequence['outputs.GetDirectoryRolesValueScopeResult']):
        """
        :param str app_id: The id of the application that provides the role template and the role.
        :param str app_name: The name of the application that provides the role template and the role.
        :param str description: The description of the role.
        :param str name: The name of the role.
        :param bool read_only: Shows whether the role can be modified or not.
        :param str role_template_name: The name of the role template.
        :param Sequence['GetDirectoryRolesValueScopeArgs'] scopes: The scopes available with this role.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "role_template_name", role_template_name)
        pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        The id of the application that provides the role template and the role.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> str:
        """
        The name of the application that provides the role template and the role.
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the role.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the role.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        """
        Shows whether the role can be modified or not.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="roleTemplateName")
    def role_template_name(self) -> str:
        """
        The name of the role template.
        """
        return pulumi.get(self, "role_template_name")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence['outputs.GetDirectoryRolesValueScopeResult']:
        """
        The scopes available with this role.
        """
        return pulumi.get(self, "scopes")


@pulumi.output_type
class GetDirectoryRolesValueScopeResult(dict):
    def __init__(__self__, *,
                 custom_grant_as_authority_to_apps: Sequence[str],
                 custom_granted_apps: Sequence[str],
                 description: str,
                 grant_as_authority_to_apps: Sequence[str],
                 granted_apps: Sequence[str],
                 name: str):
        pulumi.set(__self__, "custom_grant_as_authority_to_apps", custom_grant_as_authority_to_apps)
        pulumi.set(__self__, "custom_granted_apps", custom_granted_apps)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "grant_as_authority_to_apps", grant_as_authority_to_apps)
        pulumi.set(__self__, "granted_apps", granted_apps)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="customGrantAsAuthorityToApps")
    def custom_grant_as_authority_to_apps(self) -> Sequence[str]:
        return pulumi.get(self, "custom_grant_as_authority_to_apps")

    @property
    @pulumi.getter(name="customGrantedApps")
    def custom_granted_apps(self) -> Sequence[str]:
        return pulumi.get(self, "custom_granted_apps")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="grantAsAuthorityToApps")
    def grant_as_authority_to_apps(self) -> Sequence[str]:
        return pulumi.get(self, "grant_as_authority_to_apps")

    @property
    @pulumi.getter(name="grantedApps")
    def granted_apps(self) -> Sequence[str]:
        return pulumi.get(self, "granted_apps")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetGlobalaccountEntitlementsValuesResult(dict):
    def __init__(__self__, *,
                 category: str,
                 plan_description: str,
                 plan_display_name: str,
                 plan_name: str,
                 quota_assigned: float,
                 quota_remaining: float,
                 service_display_name: str,
                 service_name: str):
        """
        :param str category: The current state of the entitlement. Possible values are:
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "plan_description", plan_description)
        pulumi.set(__self__, "plan_display_name", plan_display_name)
        pulumi.set(__self__, "plan_name", plan_name)
        pulumi.set(__self__, "quota_assigned", quota_assigned)
        pulumi.set(__self__, "quota_remaining", quota_remaining)
        pulumi.set(__self__, "service_display_name", service_display_name)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        The current state of the entitlement. Possible values are:
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="planDescription")
    def plan_description(self) -> str:
        return pulumi.get(self, "plan_description")

    @property
    @pulumi.getter(name="planDisplayName")
    def plan_display_name(self) -> str:
        return pulumi.get(self, "plan_display_name")

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> str:
        return pulumi.get(self, "plan_name")

    @property
    @pulumi.getter(name="quotaAssigned")
    def quota_assigned(self) -> float:
        return pulumi.get(self, "quota_assigned")

    @property
    @pulumi.getter(name="quotaRemaining")
    def quota_remaining(self) -> float:
        return pulumi.get(self, "quota_remaining")

    @property
    @pulumi.getter(name="serviceDisplayName")
    def service_display_name(self) -> str:
        return pulumi.get(self, "service_display_name")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetGlobalaccountRoleCollectionRoleResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 role_template_app_id: str,
                 role_template_name: str):
        """
        :param str description: The description of the referenced role
        :param str name: The name of the referenced role.
        :param str role_template_app_id: The name of the referenced template app id
        :param str role_template_name: The name of the referenced role template.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role_template_app_id", role_template_app_id)
        pulumi.set(__self__, "role_template_name", role_template_name)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the referenced role
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the referenced role.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roleTemplateAppId")
    def role_template_app_id(self) -> str:
        """
        The name of the referenced template app id
        """
        return pulumi.get(self, "role_template_app_id")

    @property
    @pulumi.getter(name="roleTemplateName")
    def role_template_name(self) -> str:
        """
        The name of the referenced role template.
        """
        return pulumi.get(self, "role_template_name")


@pulumi.output_type
class GetGlobalaccountRoleCollectionsValueResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 read_only: bool,
                 roles: Sequence['outputs.GetGlobalaccountRoleCollectionsValueRoleResult']):
        """
        :param str description: The description of the role collection.
        :param str name: The name of the role collection.
        :param bool read_only: Shows whether the role collection is read-only.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the role collection.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the role collection.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        """
        Shows whether the role collection is read-only.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def roles(self) -> Sequence['outputs.GetGlobalaccountRoleCollectionsValueRoleResult']:
        return pulumi.get(self, "roles")


@pulumi.output_type
class GetGlobalaccountRoleCollectionsValueRoleResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 role_template_app_id: str,
                 role_template_name: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role_template_app_id", role_template_app_id)
        pulumi.set(__self__, "role_template_name", role_template_name)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roleTemplateAppId")
    def role_template_app_id(self) -> str:
        return pulumi.get(self, "role_template_app_id")

    @property
    @pulumi.getter(name="roleTemplateName")
    def role_template_name(self) -> str:
        return pulumi.get(self, "role_template_name")


@pulumi.output_type
class GetGlobalaccountRoleScopeResult(dict):
    def __init__(__self__, *,
                 custom_grant_as_authority_to_apps: Sequence[str],
                 custom_granted_apps: Sequence[str],
                 description: str,
                 grant_as_authority_to_apps: Sequence[str],
                 granted_apps: Sequence[str],
                 name: str):
        """
        :param str description: The description of the scope.
        :param str name: The name of the scope.
        """
        pulumi.set(__self__, "custom_grant_as_authority_to_apps", custom_grant_as_authority_to_apps)
        pulumi.set(__self__, "custom_granted_apps", custom_granted_apps)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "grant_as_authority_to_apps", grant_as_authority_to_apps)
        pulumi.set(__self__, "granted_apps", granted_apps)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="customGrantAsAuthorityToApps")
    def custom_grant_as_authority_to_apps(self) -> Sequence[str]:
        return pulumi.get(self, "custom_grant_as_authority_to_apps")

    @property
    @pulumi.getter(name="customGrantedApps")
    def custom_granted_apps(self) -> Sequence[str]:
        return pulumi.get(self, "custom_granted_apps")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the scope.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="grantAsAuthorityToApps")
    def grant_as_authority_to_apps(self) -> Sequence[str]:
        return pulumi.get(self, "grant_as_authority_to_apps")

    @property
    @pulumi.getter(name="grantedApps")
    def granted_apps(self) -> Sequence[str]:
        return pulumi.get(self, "granted_apps")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the scope.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetGlobalaccountRolesValueResult(dict):
    def __init__(__self__, *,
                 app_id: str,
                 app_name: str,
                 description: str,
                 name: str,
                 read_only: bool,
                 role_template_name: str,
                 scopes: Sequence['outputs.GetGlobalaccountRolesValueScopeResult']):
        """
        :param str app_id: The id of the application that provides the role template and the role.
        :param str app_name: The name of the application that provides the role template and the role.
        :param str description: The description of the role.
        :param str name: The name of the role.
        :param bool read_only: Shows whether the role can be modified or not.
        :param str role_template_name: The name of the role template.
        :param Sequence['GetGlobalaccountRolesValueScopeArgs'] scopes: The scopes available with this role.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "role_template_name", role_template_name)
        pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        The id of the application that provides the role template and the role.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> str:
        """
        The name of the application that provides the role template and the role.
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the role.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the role.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        """
        Shows whether the role can be modified or not.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="roleTemplateName")
    def role_template_name(self) -> str:
        """
        The name of the role template.
        """
        return pulumi.get(self, "role_template_name")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence['outputs.GetGlobalaccountRolesValueScopeResult']:
        """
        The scopes available with this role.
        """
        return pulumi.get(self, "scopes")


@pulumi.output_type
class GetGlobalaccountRolesValueScopeResult(dict):
    def __init__(__self__, *,
                 custom_grant_as_authority_to_apps: Sequence[str],
                 custom_granted_apps: Sequence[str],
                 description: str,
                 grant_as_authority_to_apps: Sequence[str],
                 granted_apps: Sequence[str],
                 name: str):
        pulumi.set(__self__, "custom_grant_as_authority_to_apps", custom_grant_as_authority_to_apps)
        pulumi.set(__self__, "custom_granted_apps", custom_granted_apps)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "grant_as_authority_to_apps", grant_as_authority_to_apps)
        pulumi.set(__self__, "granted_apps", granted_apps)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="customGrantAsAuthorityToApps")
    def custom_grant_as_authority_to_apps(self) -> Sequence[str]:
        return pulumi.get(self, "custom_grant_as_authority_to_apps")

    @property
    @pulumi.getter(name="customGrantedApps")
    def custom_granted_apps(self) -> Sequence[str]:
        return pulumi.get(self, "custom_granted_apps")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="grantAsAuthorityToApps")
    def grant_as_authority_to_apps(self) -> Sequence[str]:
        return pulumi.get(self, "grant_as_authority_to_apps")

    @property
    @pulumi.getter(name="grantedApps")
    def granted_apps(self) -> Sequence[str]:
        return pulumi.get(self, "granted_apps")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetGlobalaccountTrustConfigurationsValueResult(dict):
    def __init__(__self__, *,
                 description: str,
                 domain: str,
                 id: str,
                 identity_provider: str,
                 name: str,
                 origin: str,
                 protocol: str,
                 read_only: bool,
                 status: str,
                 type: str):
        """
        :param str description: The description of the trust configuration.
        :param str domain: The tenant's domain which should be used for user logon.
        :param str id: The origin of the identity provider.
        :param str identity_provider: The name of the Identity Authentication tenant the global account is connected to.
        :param str name: The display name of the trust configuration.
        :param str origin: The origin of the identity provider.
        :param str protocol: The protocol used to establish trust with the identity provider.
        :param bool read_only: Shows whether the trust configuration can be modified.
        :param str status: Shows whether the identity provider is currently 'active' or 'inactive'.
        :param str type: The trust type.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "identity_provider", identity_provider)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the trust configuration.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The tenant's domain which should be used for user logon.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The origin of the identity provider.
        """
        warnings.warn("""Use the `origin` attribute instead""", DeprecationWarning)
        pulumi.log.warn("""id is deprecated: Use the `origin` attribute instead""")

        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="identityProvider")
    def identity_provider(self) -> str:
        """
        The name of the Identity Authentication tenant the global account is connected to.
        """
        return pulumi.get(self, "identity_provider")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The display name of the trust configuration.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def origin(self) -> str:
        """
        The origin of the identity provider.
        """
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol used to establish trust with the identity provider.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        """
        Shows whether the trust configuration can be modified.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Shows whether the identity provider is currently 'active' or 'inactive'.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trust type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetRegionsValueResult(dict):
    def __init__(__self__, *,
                 domain: str,
                 environment: str,
                 iaas_provider: str,
                 id: str,
                 name: str,
                 provisioning_service_url: str,
                 region: str,
                 saas_registry_service_url: str,
                 supports_trial: bool):
        """
        :param str domain: The domain of the data center
        :param str environment: The environment that the data center supports. For example: Kubernetes, Cloud Foundry.
        :param str iaas_provider: The infrastructure provider for the data center. Possible values are:
        :param str id: The ID of the global account.
        """
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "iaas_provider", iaas_provider)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "provisioning_service_url", provisioning_service_url)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "saas_registry_service_url", saas_registry_service_url)
        pulumi.set(__self__, "supports_trial", supports_trial)

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The domain of the data center
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def environment(self) -> str:
        """
        The environment that the data center supports. For example: Kubernetes, Cloud Foundry.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="iaasProvider")
    def iaas_provider(self) -> str:
        """
        The infrastructure provider for the data center. Possible values are:
        """
        return pulumi.get(self, "iaas_provider")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the global account.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="provisioningServiceUrl")
    def provisioning_service_url(self) -> str:
        return pulumi.get(self, "provisioning_service_url")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="saasRegistryServiceUrl")
    def saas_registry_service_url(self) -> str:
        return pulumi.get(self, "saas_registry_service_url")

    @property
    @pulumi.getter(name="supportsTrial")
    def supports_trial(self) -> bool:
        return pulumi.get(self, "supports_trial")


@pulumi.output_type
class GetSubaccountAppOauth2ConfigurationResult(dict):
    def __init__(__self__, *,
                 allowedproviders: Sequence[str],
                 autoapprove: bool,
                 grant_types: Sequence[str],
                 redirect_uris: Sequence[str],
                 refresh_token_validity: int,
                 system_attributes: Sequence[str],
                 token_validity: int):
        pulumi.set(__self__, "allowedproviders", allowedproviders)
        pulumi.set(__self__, "autoapprove", autoapprove)
        pulumi.set(__self__, "grant_types", grant_types)
        pulumi.set(__self__, "redirect_uris", redirect_uris)
        pulumi.set(__self__, "refresh_token_validity", refresh_token_validity)
        pulumi.set(__self__, "system_attributes", system_attributes)
        pulumi.set(__self__, "token_validity", token_validity)

    @property
    @pulumi.getter
    def allowedproviders(self) -> Sequence[str]:
        return pulumi.get(self, "allowedproviders")

    @property
    @pulumi.getter
    def autoapprove(self) -> bool:
        return pulumi.get(self, "autoapprove")

    @property
    @pulumi.getter(name="grantTypes")
    def grant_types(self) -> Sequence[str]:
        return pulumi.get(self, "grant_types")

    @property
    @pulumi.getter(name="redirectUris")
    def redirect_uris(self) -> Sequence[str]:
        return pulumi.get(self, "redirect_uris")

    @property
    @pulumi.getter(name="refreshTokenValidity")
    def refresh_token_validity(self) -> int:
        return pulumi.get(self, "refresh_token_validity")

    @property
    @pulumi.getter(name="systemAttributes")
    def system_attributes(self) -> Sequence[str]:
        return pulumi.get(self, "system_attributes")

    @property
    @pulumi.getter(name="tokenValidity")
    def token_validity(self) -> int:
        return pulumi.get(self, "token_validity")


@pulumi.output_type
class GetSubaccountAppsValueResult(dict):
    def __init__(__self__, *,
                 authorities: Sequence[str],
                 description: str,
                 foreign_scope_references: Sequence[str],
                 id: str,
                 master_app_id: str,
                 oauth2_configuration: 'outputs.GetSubaccountAppsValueOauth2ConfigurationResult',
                 org_id: str,
                 plan_id: str,
                 plan_name: str,
                 serviceinstance_id: str,
                 space_id: str,
                 tenant_mode: str,
                 username: str,
                 xsappname: str):
        """
        :param str description: The description of the app.
        :param str id: The application ID is the xsappname plus the identifier, which consists of an exclamation mark (!), an identifier for the plan under which the application is deployed, and an index number.
        """
        pulumi.set(__self__, "authorities", authorities)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "foreign_scope_references", foreign_scope_references)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "master_app_id", master_app_id)
        pulumi.set(__self__, "oauth2_configuration", oauth2_configuration)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "plan_id", plan_id)
        pulumi.set(__self__, "plan_name", plan_name)
        pulumi.set(__self__, "serviceinstance_id", serviceinstance_id)
        pulumi.set(__self__, "space_id", space_id)
        pulumi.set(__self__, "tenant_mode", tenant_mode)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "xsappname", xsappname)

    @property
    @pulumi.getter
    def authorities(self) -> Sequence[str]:
        return pulumi.get(self, "authorities")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the app.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="foreignScopeReferences")
    def foreign_scope_references(self) -> Sequence[str]:
        return pulumi.get(self, "foreign_scope_references")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The application ID is the xsappname plus the identifier, which consists of an exclamation mark (!), an identifier for the plan under which the application is deployed, and an index number.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="masterAppId")
    def master_app_id(self) -> str:
        return pulumi.get(self, "master_app_id")

    @property
    @pulumi.getter(name="oauth2Configuration")
    def oauth2_configuration(self) -> 'outputs.GetSubaccountAppsValueOauth2ConfigurationResult':
        return pulumi.get(self, "oauth2_configuration")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> str:
        return pulumi.get(self, "plan_id")

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> str:
        return pulumi.get(self, "plan_name")

    @property
    @pulumi.getter(name="serviceinstanceId")
    def serviceinstance_id(self) -> str:
        return pulumi.get(self, "serviceinstance_id")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="tenantMode")
    def tenant_mode(self) -> str:
        return pulumi.get(self, "tenant_mode")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def xsappname(self) -> str:
        return pulumi.get(self, "xsappname")


@pulumi.output_type
class GetSubaccountAppsValueOauth2ConfigurationResult(dict):
    def __init__(__self__, *,
                 allowedproviders: Sequence[str],
                 autoapprove: bool,
                 grant_types: Sequence[str],
                 redirect_uris: Sequence[str],
                 refresh_token_validity: int,
                 system_attributes: Sequence[str],
                 token_validity: int):
        pulumi.set(__self__, "allowedproviders", allowedproviders)
        pulumi.set(__self__, "autoapprove", autoapprove)
        pulumi.set(__self__, "grant_types", grant_types)
        pulumi.set(__self__, "redirect_uris", redirect_uris)
        pulumi.set(__self__, "refresh_token_validity", refresh_token_validity)
        pulumi.set(__self__, "system_attributes", system_attributes)
        pulumi.set(__self__, "token_validity", token_validity)

    @property
    @pulumi.getter
    def allowedproviders(self) -> Sequence[str]:
        return pulumi.get(self, "allowedproviders")

    @property
    @pulumi.getter
    def autoapprove(self) -> bool:
        return pulumi.get(self, "autoapprove")

    @property
    @pulumi.getter(name="grantTypes")
    def grant_types(self) -> Sequence[str]:
        return pulumi.get(self, "grant_types")

    @property
    @pulumi.getter(name="redirectUris")
    def redirect_uris(self) -> Sequence[str]:
        return pulumi.get(self, "redirect_uris")

    @property
    @pulumi.getter(name="refreshTokenValidity")
    def refresh_token_validity(self) -> int:
        return pulumi.get(self, "refresh_token_validity")

    @property
    @pulumi.getter(name="systemAttributes")
    def system_attributes(self) -> Sequence[str]:
        return pulumi.get(self, "system_attributes")

    @property
    @pulumi.getter(name="tokenValidity")
    def token_validity(self) -> int:
        return pulumi.get(self, "token_validity")


@pulumi.output_type
class GetSubaccountEntitlementsValuesResult(dict):
    def __init__(__self__, *,
                 category: str,
                 plan_description: str,
                 plan_display_name: str,
                 plan_name: str,
                 quota_assigned: float,
                 quota_remaining: float,
                 service_display_name: str,
                 service_name: str):
        """
        :param str category: The current state of the entitlement. Possible values are:
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "plan_description", plan_description)
        pulumi.set(__self__, "plan_display_name", plan_display_name)
        pulumi.set(__self__, "plan_name", plan_name)
        pulumi.set(__self__, "quota_assigned", quota_assigned)
        pulumi.set(__self__, "quota_remaining", quota_remaining)
        pulumi.set(__self__, "service_display_name", service_display_name)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        The current state of the entitlement. Possible values are:
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="planDescription")
    def plan_description(self) -> str:
        return pulumi.get(self, "plan_description")

    @property
    @pulumi.getter(name="planDisplayName")
    def plan_display_name(self) -> str:
        return pulumi.get(self, "plan_display_name")

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> str:
        return pulumi.get(self, "plan_name")

    @property
    @pulumi.getter(name="quotaAssigned")
    def quota_assigned(self) -> float:
        return pulumi.get(self, "quota_assigned")

    @property
    @pulumi.getter(name="quotaRemaining")
    def quota_remaining(self) -> float:
        return pulumi.get(self, "quota_remaining")

    @property
    @pulumi.getter(name="serviceDisplayName")
    def service_display_name(self) -> str:
        return pulumi.get(self, "service_display_name")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetSubaccountEnvironmentInstancesValueResult(dict):
    def __init__(__self__, *,
                 broker_id: str,
                 created_date: str,
                 custom_labels: Mapping[str, Sequence[str]],
                 dashboard_url: str,
                 description: str,
                 environment_type: str,
                 id: str,
                 labels: str,
                 landscape_label: str,
                 last_modified: str,
                 name: str,
                 operation: str,
                 parameters: str,
                 plan_id: str,
                 plan_name: str,
                 platform_id: str,
                 service_id: str,
                 service_name: str,
                 state: str,
                 tenant_id: str,
                 type: str):
        """
        :param str broker_id: The ID of the associated environment broker.
        :param str created_date: The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param str dashboard_url: The URL of the service dashboard, which is a web-based management user interface for the service instances.
        :param str description: The description of the environment instance.
        :param str environment_type: The type of the environment instance that is used.
        :param str id: The ID of the environment instance.
        :param str labels: The Broker-specified key-value pairs that specify attributes of an environment instance.
        :param str landscape_label: The name of the landscape within the logged-in region on which the environment instance is created.
        :param str last_modified: The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param str name: The name of the environment instance.
        :param str operation: An identifier that represents the last operation. This ID is returned by the environment brokers.
        :param str parameters: The configuration parameters for the environment instance.
        :param str plan_id: The ID of the service plan for the environment instance in the corresponding service broker's catalog.
        :param str plan_name: The name of the service plan for the environment instance in the corresponding service broker's catalog.
        :param str platform_id: The ID of the platform for the environment instance in the corresponding service broker's catalog.
        :param str service_id: The ID of the service for the environment instance in the corresponding service broker's catalog.
        :param str service_name: The name of the service for the environment instance in the corresponding service broker's catalog.
        :param str state: The current state of the environment instance. Possible values are:
        """
        pulumi.set(__self__, "broker_id", broker_id)
        pulumi.set(__self__, "created_date", created_date)
        pulumi.set(__self__, "custom_labels", custom_labels)
        pulumi.set(__self__, "dashboard_url", dashboard_url)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "environment_type", environment_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "landscape_label", landscape_label)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "plan_id", plan_id)
        pulumi.set(__self__, "plan_name", plan_name)
        pulumi.set(__self__, "platform_id", platform_id)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="brokerId")
    def broker_id(self) -> str:
        """
        The ID of the associated environment broker.
        """
        return pulumi.get(self, "broker_id")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter(name="customLabels")
    def custom_labels(self) -> Mapping[str, Sequence[str]]:
        return pulumi.get(self, "custom_labels")

    @property
    @pulumi.getter(name="dashboardUrl")
    def dashboard_url(self) -> str:
        """
        The URL of the service dashboard, which is a web-based management user interface for the service instances.
        """
        return pulumi.get(self, "dashboard_url")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the environment instance.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> str:
        """
        The type of the environment instance that is used.
        """
        return pulumi.get(self, "environment_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the environment instance.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> str:
        """
        The Broker-specified key-value pairs that specify attributes of an environment instance.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="landscapeLabel")
    def landscape_label(self) -> str:
        """
        The name of the landscape within the logged-in region on which the environment instance is created.
        """
        return pulumi.get(self, "landscape_label")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the environment instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operation(self) -> str:
        """
        An identifier that represents the last operation. This ID is returned by the environment brokers.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def parameters(self) -> str:
        """
        The configuration parameters for the environment instance.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> str:
        """
        The ID of the service plan for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "plan_id")

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> str:
        """
        The name of the service plan for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "plan_name")

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> str:
        """
        The ID of the platform for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "platform_id")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        """
        The ID of the service for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The name of the service for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the environment instance. Possible values are:
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSubaccountEnvironmentsValueResult(dict):
    def __init__(__self__, *,
                 availability_level: str,
                 description: str,
                 environment_type: str,
                 landscape_label: str,
                 plan_name: str,
                 plan_updateable: bool,
                 schema_create: str,
                 schema_update: str,
                 service_description: str,
                 service_display_name: str,
                 service_name: str,
                 technical_key: str):
        """
        :param str availability_level: The availability level of the environment broker.
        :param str description: The description of the environment.
        :param str environment_type: The type of environment that is available (for example: cloudfoundry).
        :param str landscape_label: The landscape label of the environment broker.
        :param str plan_name: The name of the service plan for the available environment.
        :param bool plan_updateable: Specifies if the consumer can change the plan of an existing instance of the environment.
        :param str schema_create: The create schema of the environment broker.
        :param str schema_update: The update schema of the environment broker.
        :param str service_description: The short description of the service.
        :param str service_display_name: The display name of the service.
        :param str service_name: The name of the service offered in the catalog of the corresponding environment broker (for example: cloudfoundry).
        :param str technical_key: The technical key of the corresponding environment broker.
        """
        pulumi.set(__self__, "availability_level", availability_level)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "environment_type", environment_type)
        pulumi.set(__self__, "landscape_label", landscape_label)
        pulumi.set(__self__, "plan_name", plan_name)
        pulumi.set(__self__, "plan_updateable", plan_updateable)
        pulumi.set(__self__, "schema_create", schema_create)
        pulumi.set(__self__, "schema_update", schema_update)
        pulumi.set(__self__, "service_description", service_description)
        pulumi.set(__self__, "service_display_name", service_display_name)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "technical_key", technical_key)

    @property
    @pulumi.getter(name="availabilityLevel")
    def availability_level(self) -> str:
        """
        The availability level of the environment broker.
        """
        return pulumi.get(self, "availability_level")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the environment.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> str:
        """
        The type of environment that is available (for example: cloudfoundry).
        """
        return pulumi.get(self, "environment_type")

    @property
    @pulumi.getter(name="landscapeLabel")
    def landscape_label(self) -> str:
        """
        The landscape label of the environment broker.
        """
        return pulumi.get(self, "landscape_label")

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> str:
        """
        The name of the service plan for the available environment.
        """
        return pulumi.get(self, "plan_name")

    @property
    @pulumi.getter(name="planUpdateable")
    def plan_updateable(self) -> bool:
        """
        Specifies if the consumer can change the plan of an existing instance of the environment.
        """
        return pulumi.get(self, "plan_updateable")

    @property
    @pulumi.getter(name="schemaCreate")
    def schema_create(self) -> str:
        """
        The create schema of the environment broker.
        """
        return pulumi.get(self, "schema_create")

    @property
    @pulumi.getter(name="schemaUpdate")
    def schema_update(self) -> str:
        """
        The update schema of the environment broker.
        """
        return pulumi.get(self, "schema_update")

    @property
    @pulumi.getter(name="serviceDescription")
    def service_description(self) -> str:
        """
        The short description of the service.
        """
        return pulumi.get(self, "service_description")

    @property
    @pulumi.getter(name="serviceDisplayName")
    def service_display_name(self) -> str:
        """
        The display name of the service.
        """
        return pulumi.get(self, "service_display_name")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The name of the service offered in the catalog of the corresponding environment broker (for example: cloudfoundry).
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="technicalKey")
    def technical_key(self) -> str:
        """
        The technical key of the corresponding environment broker.
        """
        return pulumi.get(self, "technical_key")


@pulumi.output_type
class GetSubaccountRoleCollectionRoleResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 role_template_app_id: str,
                 role_template_name: str):
        """
        :param str description: The description of the referenced role
        :param str name: The name of the referenced role.
        :param str role_template_app_id: The name of the referenced template app id
        :param str role_template_name: The name of the referenced role template.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role_template_app_id", role_template_app_id)
        pulumi.set(__self__, "role_template_name", role_template_name)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the referenced role
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the referenced role.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roleTemplateAppId")
    def role_template_app_id(self) -> str:
        """
        The name of the referenced template app id
        """
        return pulumi.get(self, "role_template_app_id")

    @property
    @pulumi.getter(name="roleTemplateName")
    def role_template_name(self) -> str:
        """
        The name of the referenced role template.
        """
        return pulumi.get(self, "role_template_name")


@pulumi.output_type
class GetSubaccountRoleCollectionsValueResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 read_only: bool,
                 roles: Sequence['outputs.GetSubaccountRoleCollectionsValueRoleResult']):
        """
        :param str description: The description of the role collection.
        :param str name: The name of the role collection.
        :param bool read_only: Shows whether the role collection is read-only.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the role collection.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the role collection.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        """
        Shows whether the role collection is read-only.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def roles(self) -> Sequence['outputs.GetSubaccountRoleCollectionsValueRoleResult']:
        return pulumi.get(self, "roles")


@pulumi.output_type
class GetSubaccountRoleCollectionsValueRoleResult(dict):
    def __init__(__self__, *,
                 description: str,
                 name: str,
                 role_template_app_id: str,
                 role_template_name: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role_template_app_id", role_template_app_id)
        pulumi.set(__self__, "role_template_name", role_template_name)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="roleTemplateAppId")
    def role_template_app_id(self) -> str:
        return pulumi.get(self, "role_template_app_id")

    @property
    @pulumi.getter(name="roleTemplateName")
    def role_template_name(self) -> str:
        return pulumi.get(self, "role_template_name")


@pulumi.output_type
class GetSubaccountRoleScopeResult(dict):
    def __init__(__self__, *,
                 custom_grant_as_authority_to_apps: Sequence[str],
                 custom_granted_apps: Sequence[str],
                 description: str,
                 grant_as_authority_to_apps: Sequence[str],
                 granted_apps: Sequence[str],
                 name: str):
        """
        :param str description: The description of the scope.
        :param str name: The name of the scope.
        """
        pulumi.set(__self__, "custom_grant_as_authority_to_apps", custom_grant_as_authority_to_apps)
        pulumi.set(__self__, "custom_granted_apps", custom_granted_apps)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "grant_as_authority_to_apps", grant_as_authority_to_apps)
        pulumi.set(__self__, "granted_apps", granted_apps)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="customGrantAsAuthorityToApps")
    def custom_grant_as_authority_to_apps(self) -> Sequence[str]:
        return pulumi.get(self, "custom_grant_as_authority_to_apps")

    @property
    @pulumi.getter(name="customGrantedApps")
    def custom_granted_apps(self) -> Sequence[str]:
        return pulumi.get(self, "custom_granted_apps")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the scope.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="grantAsAuthorityToApps")
    def grant_as_authority_to_apps(self) -> Sequence[str]:
        return pulumi.get(self, "grant_as_authority_to_apps")

    @property
    @pulumi.getter(name="grantedApps")
    def granted_apps(self) -> Sequence[str]:
        return pulumi.get(self, "granted_apps")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the scope.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSubaccountRolesValueResult(dict):
    def __init__(__self__, *,
                 app_id: str,
                 app_name: str,
                 description: str,
                 name: str,
                 read_only: bool,
                 role_template_name: str,
                 scopes: Sequence['outputs.GetSubaccountRolesValueScopeResult']):
        """
        :param str app_id: The id of the application that provides the role template and the role.
        :param str app_name: The name of the application that provides the role template and the role.
        :param str description: The description of the role.
        :param str name: The name of the role.
        :param bool read_only: Shows whether the role can be modified or not.
        :param str role_template_name: The name of the role template.
        :param Sequence['GetSubaccountRolesValueScopeArgs'] scopes: The scopes available with this role.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "role_template_name", role_template_name)
        pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        The id of the application that provides the role template and the role.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> str:
        """
        The name of the application that provides the role template and the role.
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the role.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the role.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        """
        Shows whether the role can be modified or not.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="roleTemplateName")
    def role_template_name(self) -> str:
        """
        The name of the role template.
        """
        return pulumi.get(self, "role_template_name")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence['outputs.GetSubaccountRolesValueScopeResult']:
        """
        The scopes available with this role.
        """
        return pulumi.get(self, "scopes")


@pulumi.output_type
class GetSubaccountRolesValueScopeResult(dict):
    def __init__(__self__, *,
                 custom_grant_as_authority_to_apps: Sequence[str],
                 custom_granted_apps: Sequence[str],
                 description: str,
                 grant_as_authority_to_apps: Sequence[str],
                 granted_apps: Sequence[str],
                 name: str):
        pulumi.set(__self__, "custom_grant_as_authority_to_apps", custom_grant_as_authority_to_apps)
        pulumi.set(__self__, "custom_granted_apps", custom_granted_apps)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "grant_as_authority_to_apps", grant_as_authority_to_apps)
        pulumi.set(__self__, "granted_apps", granted_apps)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="customGrantAsAuthorityToApps")
    def custom_grant_as_authority_to_apps(self) -> Sequence[str]:
        return pulumi.get(self, "custom_grant_as_authority_to_apps")

    @property
    @pulumi.getter(name="customGrantedApps")
    def custom_granted_apps(self) -> Sequence[str]:
        return pulumi.get(self, "custom_granted_apps")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="grantAsAuthorityToApps")
    def grant_as_authority_to_apps(self) -> Sequence[str]:
        return pulumi.get(self, "grant_as_authority_to_apps")

    @property
    @pulumi.getter(name="grantedApps")
    def granted_apps(self) -> Sequence[str]:
        return pulumi.get(self, "granted_apps")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSubaccountServiceBindingsValueResult(dict):
    def __init__(__self__, *,
                 bind_resource: Mapping[str, str],
                 context: str,
                 created_date: str,
                 credentials: str,
                 id: str,
                 labels: Mapping[str, Sequence[str]],
                 last_modified: str,
                 name: str,
                 ready: bool,
                 service_instance_id: str):
        """
        :param Mapping[str, str] bind_resource: Contains the resources associated with the binding.
        :param str context: Contextual data for the resource.
        :param str created_date: The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param str credentials: The credentials to access the binding.
        :param str id: The ID of the service binding.
        :param Mapping[str, Sequence[str]] labels: The set of words or phrases assigned to the binding.
        :param str last_modified: The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param str name: The name of the service binding.
        :param bool ready: Shows whether the service binding is ready.
        :param str service_instance_id: The ID of the service instance associated with the binding.
        """
        pulumi.set(__self__, "bind_resource", bind_resource)
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "created_date", created_date)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ready", ready)
        pulumi.set(__self__, "service_instance_id", service_instance_id)

    @property
    @pulumi.getter(name="bindResource")
    def bind_resource(self) -> Mapping[str, str]:
        """
        Contains the resources associated with the binding.
        """
        return pulumi.get(self, "bind_resource")

    @property
    @pulumi.getter
    def context(self) -> str:
        """
        Contextual data for the resource.
        """
        return pulumi.get(self, "context")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def credentials(self) -> str:
        """
        The credentials to access the binding.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the service binding.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, Sequence[str]]:
        """
        The set of words or phrases assigned to the binding.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the service binding.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ready(self) -> bool:
        """
        Shows whether the service binding is ready.
        """
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter(name="serviceInstanceId")
    def service_instance_id(self) -> str:
        """
        The ID of the service instance associated with the binding.
        """
        return pulumi.get(self, "service_instance_id")


@pulumi.output_type
class GetSubaccountServiceInstancesValueResult(dict):
    def __init__(__self__, *,
                 context: str,
                 created_date: str,
                 id: str,
                 labels: Mapping[str, Sequence[str]],
                 last_modified: str,
                 name: str,
                 platform_id: str,
                 ready: bool,
                 serviceplan_id: str,
                 usable: bool):
        """
        :param str context: Contextual data for the resource.
        :param str created_date: The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param str id: The ID of the service instance.
        :param Mapping[str, Sequence[str]] labels: The set of words or phrases assigned to the service instance.
        :param str last_modified: The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param str name: The name of the service instance.
        :param str platform_id: The platform ID.
        :param str serviceplan_id: The ID of the service plan.
        :param bool usable: Shows whether the resource can be used.
        """
        pulumi.set(__self__, "context", context)
        pulumi.set(__self__, "created_date", created_date)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "platform_id", platform_id)
        pulumi.set(__self__, "ready", ready)
        pulumi.set(__self__, "serviceplan_id", serviceplan_id)
        pulumi.set(__self__, "usable", usable)

    @property
    @pulumi.getter
    def context(self) -> str:
        """
        Contextual data for the resource.
        """
        return pulumi.get(self, "context")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the service instance.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, Sequence[str]]:
        """
        The set of words or phrases assigned to the service instance.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the service instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> str:
        """
        The platform ID.
        """
        return pulumi.get(self, "platform_id")

    @property
    @pulumi.getter
    def ready(self) -> bool:
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter(name="serviceplanId")
    def serviceplan_id(self) -> str:
        """
        The ID of the service plan.
        """
        return pulumi.get(self, "serviceplan_id")

    @property
    @pulumi.getter
    def usable(self) -> bool:
        """
        Shows whether the resource can be used.
        """
        return pulumi.get(self, "usable")


@pulumi.output_type
class GetSubaccountServiceOfferingsValueResult(dict):
    def __init__(__self__, *,
                 allow_context_updates: bool,
                 bindable: bool,
                 bindings_retrievable: bool,
                 broker_id: str,
                 catalog_id: str,
                 catalog_name: str,
                 created_date: str,
                 description: str,
                 id: str,
                 instances_retrievable: bool,
                 last_modified: str,
                 name: str,
                 plan_updateable: bool,
                 ready: bool,
                 tags: Sequence[str]):
        """
        :param bool allow_context_updates: Shows whether the context for the service offering can be updated.
        :param bool bindable: Shows whether the service offering is bindable.
        :param bool bindings_retrievable: Shows whether the bindings associated with the service offering can be retrieved.
        :param str broker_id: The ID of the broker that provides the service plan.
        :param str catalog_id: The ID of the service offering as provided by the catalog.
        :param str catalog_name: The catalog name of the service offering.
        :param str created_date: The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param str description: The description of the service offering.
        :param str id: The ID of the service offering.
        :param bool instances_retrievable: Shows whether the service instances associated with the service offering can be retrieved.
        :param str last_modified: The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param str name: The name of the service offering.
        :param bool plan_updateable: Shows whether the offered plan can be updated.
        :param bool ready: Shows whether the service offering is ready to be advertised.
        :param Sequence[str] tags: The list of tags for the service offering.
        """
        pulumi.set(__self__, "allow_context_updates", allow_context_updates)
        pulumi.set(__self__, "bindable", bindable)
        pulumi.set(__self__, "bindings_retrievable", bindings_retrievable)
        pulumi.set(__self__, "broker_id", broker_id)
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "catalog_name", catalog_name)
        pulumi.set(__self__, "created_date", created_date)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "instances_retrievable", instances_retrievable)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "plan_updateable", plan_updateable)
        pulumi.set(__self__, "ready", ready)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="allowContextUpdates")
    def allow_context_updates(self) -> bool:
        """
        Shows whether the context for the service offering can be updated.
        """
        return pulumi.get(self, "allow_context_updates")

    @property
    @pulumi.getter
    def bindable(self) -> bool:
        """
        Shows whether the service offering is bindable.
        """
        return pulumi.get(self, "bindable")

    @property
    @pulumi.getter(name="bindingsRetrievable")
    def bindings_retrievable(self) -> bool:
        """
        Shows whether the bindings associated with the service offering can be retrieved.
        """
        return pulumi.get(self, "bindings_retrievable")

    @property
    @pulumi.getter(name="brokerId")
    def broker_id(self) -> str:
        """
        The ID of the broker that provides the service plan.
        """
        return pulumi.get(self, "broker_id")

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> str:
        """
        The ID of the service offering as provided by the catalog.
        """
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> str:
        """
        The catalog name of the service offering.
        """
        return pulumi.get(self, "catalog_name")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the service offering.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the service offering.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instancesRetrievable")
    def instances_retrievable(self) -> bool:
        """
        Shows whether the service instances associated with the service offering can be retrieved.
        """
        return pulumi.get(self, "instances_retrievable")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the service offering.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="planUpdateable")
    def plan_updateable(self) -> bool:
        """
        Shows whether the offered plan can be updated.
        """
        return pulumi.get(self, "plan_updateable")

    @property
    @pulumi.getter
    def ready(self) -> bool:
        """
        Shows whether the service offering is ready to be advertised.
        """
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        The list of tags for the service offering.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetSubaccountServicePlansValueResult(dict):
    def __init__(__self__, *,
                 bindable: bool,
                 catalog_id: str,
                 catalog_name: str,
                 created_date: str,
                 description: str,
                 free: bool,
                 id: str,
                 last_modified: str,
                 name: str,
                 ready: bool,
                 serviceoffering_id: str):
        """
        :param bool bindable: Shows whether the service plan is bindable.
        :param str catalog_id: The ID of the service plan in the service broker catalog.
        :param str catalog_name: The name of the associated service broker catalog.
        :param str created_date: The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param str description: The description of the service plan.
        :param bool free: Shows whether the service plan is free.
        :param str id: The ID of the service plan.
        :param str last_modified: The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param str name: The name of the service plan.
        :param bool ready: Shows whether the service plan is ready.
        :param str serviceoffering_id: The ID of the service offering.
        """
        pulumi.set(__self__, "bindable", bindable)
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "catalog_name", catalog_name)
        pulumi.set(__self__, "created_date", created_date)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "free", free)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ready", ready)
        pulumi.set(__self__, "serviceoffering_id", serviceoffering_id)

    @property
    @pulumi.getter
    def bindable(self) -> bool:
        """
        Shows whether the service plan is bindable.
        """
        return pulumi.get(self, "bindable")

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> str:
        """
        The ID of the service plan in the service broker catalog.
        """
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> str:
        """
        The name of the associated service broker catalog.
        """
        return pulumi.get(self, "catalog_name")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the service plan.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def free(self) -> bool:
        """
        Shows whether the service plan is free.
        """
        return pulumi.get(self, "free")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the service plan.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the service plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ready(self) -> bool:
        """
        Shows whether the service plan is ready.
        """
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter(name="serviceofferingId")
    def serviceoffering_id(self) -> str:
        """
        The ID of the service offering.
        """
        return pulumi.get(self, "serviceoffering_id")


@pulumi.output_type
class GetSubaccountSubscriptionsValueResult(dict):
    def __init__(__self__, *,
                 additional_plan_features: Sequence[str],
                 app_id: str,
                 app_name: str,
                 authentication_provider: str,
                 automation_state: str,
                 automation_state_message: str,
                 category: str,
                 category_display_name: str,
                 commercial_app_name: str,
                 created_date: str,
                 customer_developed: bool,
                 description: str,
                 display_name: str,
                 formation_solution_name: str,
                 globalaccount_id: str,
                 id: str,
                 incident_tracking_component: str,
                 labels: Mapping[str, Sequence[str]],
                 last_modified: str,
                 plan_description: str,
                 plan_name: str,
                 platform_entity_id: str,
                 quota: int,
                 short_description: str,
                 state: str,
                 subscribed_subaccount_id: str,
                 subscribed_tenant_id: str,
                 subscription_url: str,
                 supports_parameters_updates: bool,
                 supports_plan_updates: bool,
                 tenant_id: str):
        """
        :param Sequence[str] additional_plan_features: The list of features specific to this plan.
        :param str app_id: The ID returned by XSUAA after the app provider has performed a bind of the multitenant application to a XSUAA service instance.
        :param str app_name: The unique registration name of the deployed multitenant application as defined by the app developer.
        :param str authentication_provider: The authentication provider of the multitenant application. * XSUAA is the SAP Authorization and Trust Management service that defines scopes and permissions for users as tenants at the global account level. * IAS is Identity Authentication Service that defines scopes and permissions for users in zones (common data isolation systems across systems, SaaS tenants, and services).
        :param str automation_state: The state of the automation solution.
        :param str automation_state_message: The message that describes the automation solution state.
        :param str category: The technical name of the category defined by the app developer to which the multitenant application is grouped in customer-facing UIs.
        :param str category_display_name: The display name of the category for customer-facing UIs.
        :param str commercial_app_name: The commercial name of the deployed multitenant application as defined by the app developer.
        :param str created_date: The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param bool customer_developed: Shows whether the application was developed by a customer. If not, then the application is developed by the cloud operator, such as SAP.
        :param str description: The description of the multitenant application.
        :param str display_name: The display name of the application for customer-facing UIs.
        :param str formation_solution_name: The name of the formations solution associated with the multitenant application.
        :param str globalaccount_id: The ID of the associated global account.
        :param str id: The technical ID generated by XSUAA for a multitenant application when a consumer subscribes to the application.
        :param str incident_tracking_component: The application's incident-tracking component provided in metadata for customer-facing UIs.
        :param Mapping[str, Sequence[str]] labels: The set of words or phrases assigned to the multitenant application subscription.
        :param str last_modified: The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param str plan_description: The description of the plan for customer-facing UIs.
        :param str plan_name: The plan name of the application to which the consumer has subscribed.
        :param str platform_entity_id: The ID of the landscape-specific environment.
        :param int quota: The total amount the subscribed subaccount is entitled to consume.
        :param str short_description: The short description of the multitenant application for customer-facing UIs.
        :param str state: The subscription state of the subaccount regarding the multitenant application.
        :param str subscribed_subaccount_id: The ID of the subaccount which is subscribed to the multitenant application.
        :param str subscribed_tenant_id: The ID of the tenant which is subscribed to a multitenant application.
        :param str subscription_url: The URL for app users to launch the subscribed application.
        :param bool supports_parameters_updates: Specifies whether a consumer, whose subaccount is subscribed to the application, can change its subscriptions parameters.
        :param bool supports_plan_updates: Specifies whether a consumer, whose subaccount is subscribed to the application, can change the subscription to a different plan that is available for this application and subaccount.
        :param str tenant_id: The tenant ID of the application provider.
        """
        pulumi.set(__self__, "additional_plan_features", additional_plan_features)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "authentication_provider", authentication_provider)
        pulumi.set(__self__, "automation_state", automation_state)
        pulumi.set(__self__, "automation_state_message", automation_state_message)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "category_display_name", category_display_name)
        pulumi.set(__self__, "commercial_app_name", commercial_app_name)
        pulumi.set(__self__, "created_date", created_date)
        pulumi.set(__self__, "customer_developed", customer_developed)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "formation_solution_name", formation_solution_name)
        pulumi.set(__self__, "globalaccount_id", globalaccount_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "incident_tracking_component", incident_tracking_component)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "plan_description", plan_description)
        pulumi.set(__self__, "plan_name", plan_name)
        pulumi.set(__self__, "platform_entity_id", platform_entity_id)
        pulumi.set(__self__, "quota", quota)
        pulumi.set(__self__, "short_description", short_description)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subscribed_subaccount_id", subscribed_subaccount_id)
        pulumi.set(__self__, "subscribed_tenant_id", subscribed_tenant_id)
        pulumi.set(__self__, "subscription_url", subscription_url)
        pulumi.set(__self__, "supports_parameters_updates", supports_parameters_updates)
        pulumi.set(__self__, "supports_plan_updates", supports_plan_updates)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="additionalPlanFeatures")
    def additional_plan_features(self) -> Sequence[str]:
        """
        The list of features specific to this plan.
        """
        return pulumi.get(self, "additional_plan_features")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        The ID returned by XSUAA after the app provider has performed a bind of the multitenant application to a XSUAA service instance.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> str:
        """
        The unique registration name of the deployed multitenant application as defined by the app developer.
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter(name="authenticationProvider")
    def authentication_provider(self) -> str:
        """
        The authentication provider of the multitenant application. * XSUAA is the SAP Authorization and Trust Management service that defines scopes and permissions for users as tenants at the global account level. * IAS is Identity Authentication Service that defines scopes and permissions for users in zones (common data isolation systems across systems, SaaS tenants, and services).
        """
        return pulumi.get(self, "authentication_provider")

    @property
    @pulumi.getter(name="automationState")
    def automation_state(self) -> str:
        """
        The state of the automation solution.
        """
        return pulumi.get(self, "automation_state")

    @property
    @pulumi.getter(name="automationStateMessage")
    def automation_state_message(self) -> str:
        """
        The message that describes the automation solution state.
        """
        return pulumi.get(self, "automation_state_message")

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        The technical name of the category defined by the app developer to which the multitenant application is grouped in customer-facing UIs.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="categoryDisplayName")
    def category_display_name(self) -> str:
        """
        The display name of the category for customer-facing UIs.
        """
        return pulumi.get(self, "category_display_name")

    @property
    @pulumi.getter(name="commercialAppName")
    def commercial_app_name(self) -> str:
        """
        The commercial name of the deployed multitenant application as defined by the app developer.
        """
        return pulumi.get(self, "commercial_app_name")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter(name="customerDeveloped")
    def customer_developed(self) -> bool:
        """
        Shows whether the application was developed by a customer. If not, then the application is developed by the cloud operator, such as SAP.
        """
        return pulumi.get(self, "customer_developed")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the multitenant application.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of the application for customer-facing UIs.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="formationSolutionName")
    def formation_solution_name(self) -> str:
        """
        The name of the formations solution associated with the multitenant application.
        """
        return pulumi.get(self, "formation_solution_name")

    @property
    @pulumi.getter(name="globalaccountId")
    def globalaccount_id(self) -> str:
        """
        The ID of the associated global account.
        """
        return pulumi.get(self, "globalaccount_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The technical ID generated by XSUAA for a multitenant application when a consumer subscribes to the application.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="incidentTrackingComponent")
    def incident_tracking_component(self) -> str:
        """
        The application's incident-tracking component provided in metadata for customer-facing UIs.
        """
        return pulumi.get(self, "incident_tracking_component")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, Sequence[str]]:
        """
        The set of words or phrases assigned to the multitenant application subscription.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter(name="planDescription")
    def plan_description(self) -> str:
        """
        The description of the plan for customer-facing UIs.
        """
        return pulumi.get(self, "plan_description")

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> str:
        """
        The plan name of the application to which the consumer has subscribed.
        """
        return pulumi.get(self, "plan_name")

    @property
    @pulumi.getter(name="platformEntityId")
    def platform_entity_id(self) -> str:
        """
        The ID of the landscape-specific environment.
        """
        return pulumi.get(self, "platform_entity_id")

    @property
    @pulumi.getter
    def quota(self) -> int:
        """
        The total amount the subscribed subaccount is entitled to consume.
        """
        return pulumi.get(self, "quota")

    @property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> str:
        """
        The short description of the multitenant application for customer-facing UIs.
        """
        return pulumi.get(self, "short_description")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The subscription state of the subaccount regarding the multitenant application.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subscribedSubaccountId")
    def subscribed_subaccount_id(self) -> str:
        """
        The ID of the subaccount which is subscribed to the multitenant application.
        """
        return pulumi.get(self, "subscribed_subaccount_id")

    @property
    @pulumi.getter(name="subscribedTenantId")
    def subscribed_tenant_id(self) -> str:
        """
        The ID of the tenant which is subscribed to a multitenant application.
        """
        return pulumi.get(self, "subscribed_tenant_id")

    @property
    @pulumi.getter(name="subscriptionUrl")
    def subscription_url(self) -> str:
        """
        The URL for app users to launch the subscribed application.
        """
        return pulumi.get(self, "subscription_url")

    @property
    @pulumi.getter(name="supportsParametersUpdates")
    def supports_parameters_updates(self) -> bool:
        """
        Specifies whether a consumer, whose subaccount is subscribed to the application, can change its subscriptions parameters.
        """
        return pulumi.get(self, "supports_parameters_updates")

    @property
    @pulumi.getter(name="supportsPlanUpdates")
    def supports_plan_updates(self) -> bool:
        """
        Specifies whether a consumer, whose subaccount is subscribed to the application, can change the subscription to a different plan that is available for this application and subaccount.
        """
        return pulumi.get(self, "supports_plan_updates")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID of the application provider.
        """
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class GetSubaccountTrustConfigurationsValueResult(dict):
    def __init__(__self__, *,
                 auto_create_shadow_users: bool,
                 available_for_user_logon: bool,
                 description: str,
                 domain: str,
                 id: str,
                 identity_provider: str,
                 link_text: str,
                 name: str,
                 origin: str,
                 protocol: str,
                 read_only: bool,
                 status: str,
                 type: str):
        """
        :param bool auto_create_shadow_users: Shows whether any user from the tenant can log in. If not set, only the ones who already have a shadow user can log in.
        :param bool available_for_user_logon: Shows whether end users can choose the trust configuration for login. If not set, the trust configuration can remain active, however only application users that explicitly specify the origin key can use if for login.
        :param str description: The description of the trust configuration.
        :param str domain: The tenant's domain which should be used for user logon.
        :param str id: The origin of the identity provider.
        :param str identity_provider: The name of the Identity Authentication tenant the subaccount is connected to.
        :param str link_text: Short string that helps users to identify the link for login.
        :param str name: The display name of the trust configuration.
        :param str origin: The origin of the identity provider.
        :param str protocol: The protocol used to establish trust with the identity provider.
        :param bool read_only: Shows whether the trust configuration can be modified.
        :param str status: Shows whether the identity provider is currently 'active' or 'inactive'.
        :param str type: The trust type.
        """
        pulumi.set(__self__, "auto_create_shadow_users", auto_create_shadow_users)
        pulumi.set(__self__, "available_for_user_logon", available_for_user_logon)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "identity_provider", identity_provider)
        pulumi.set(__self__, "link_text", link_text)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "origin", origin)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "read_only", read_only)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="autoCreateShadowUsers")
    def auto_create_shadow_users(self) -> bool:
        """
        Shows whether any user from the tenant can log in. If not set, only the ones who already have a shadow user can log in.
        """
        return pulumi.get(self, "auto_create_shadow_users")

    @property
    @pulumi.getter(name="availableForUserLogon")
    def available_for_user_logon(self) -> bool:
        """
        Shows whether end users can choose the trust configuration for login. If not set, the trust configuration can remain active, however only application users that explicitly specify the origin key can use if for login.
        """
        return pulumi.get(self, "available_for_user_logon")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the trust configuration.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> str:
        """
        The tenant's domain which should be used for user logon.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The origin of the identity provider.
        """
        warnings.warn("""Use the `origin` attribute instead""", DeprecationWarning)
        pulumi.log.warn("""id is deprecated: Use the `origin` attribute instead""")

        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="identityProvider")
    def identity_provider(self) -> str:
        """
        The name of the Identity Authentication tenant the subaccount is connected to.
        """
        return pulumi.get(self, "identity_provider")

    @property
    @pulumi.getter(name="linkText")
    def link_text(self) -> str:
        """
        Short string that helps users to identify the link for login.
        """
        return pulumi.get(self, "link_text")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The display name of the trust configuration.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def origin(self) -> str:
        """
        The origin of the identity provider.
        """
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol used to establish trust with the identity provider.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        """
        Shows whether the trust configuration can be modified.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Shows whether the identity provider is currently 'active' or 'inactive'.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The trust type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSubaccountsValueResult(dict):
    def __init__(__self__, *,
                 beta_enabled: bool,
                 created_by: str,
                 created_date: str,
                 description: str,
                 id: str,
                 labels: Mapping[str, Sequence[str]],
                 last_modified: str,
                 name: str,
                 parent_features: Sequence[str],
                 parent_id: str,
                 region: str,
                 state: str,
                 subdomain: str,
                 usage: str):
        """
        :param bool beta_enabled: Shows whether the subaccount can use beta services and applications.
        :param str created_by: The details of the user that created the subaccount.
        :param str created_date: The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param str description: The description of the subaccount.
        :param str id: The unique ID of the subaccount.
        :param Mapping[str, Sequence[str]] labels: The set of words or phrases assigned to the subaccount.
        :param str last_modified: The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param str name: A descriptive name of the subaccount for customer-facing UIs.
        :param Sequence[str] parent_features: The features of parent entity of the subaccount.
        :param str parent_id: The ID of the subaccount’s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
        :param str region: The region in which the subaccount was created.
        :param str state: The current state of the subaccount. Possible values are:
        """
        pulumi.set(__self__, "beta_enabled", beta_enabled)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "created_date", created_date)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "last_modified", last_modified)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parent_features", parent_features)
        pulumi.set(__self__, "parent_id", parent_id)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subdomain", subdomain)
        pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter(name="betaEnabled")
    def beta_enabled(self) -> bool:
        """
        Shows whether the subaccount can use beta services and applications.
        """
        return pulumi.get(self, "beta_enabled")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The details of the user that created the subaccount.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the subaccount.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID of the subaccount.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, Sequence[str]]:
        """
        The set of words or phrases assigned to the subaccount.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A descriptive name of the subaccount for customer-facing UIs.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentFeatures")
    def parent_features(self) -> Sequence[str]:
        """
        The features of parent entity of the subaccount.
        """
        return pulumi.get(self, "parent_features")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> str:
        """
        The ID of the subaccount’s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
        """
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        The region in which the subaccount was created.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the subaccount. Possible values are:
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def subdomain(self) -> str:
        return pulumi.get(self, "subdomain")

    @property
    @pulumi.getter
    def usage(self) -> str:
        return pulumi.get(self, "usage")


