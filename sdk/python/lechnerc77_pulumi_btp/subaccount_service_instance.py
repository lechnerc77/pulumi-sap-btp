# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SubaccountServiceInstanceArgs', 'SubaccountServiceInstance']

@pulumi.input_type
class SubaccountServiceInstanceArgs:
    def __init__(__self__, *,
                 serviceplan_id: pulumi.Input[str],
                 subaccount_id: pulumi.Input[str],
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['SubaccountServiceInstanceTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a SubaccountServiceInstance resource.
        :param pulumi.Input[str] serviceplan_id: The ID of the service plan.
        :param pulumi.Input[str] subaccount_id: The ID of the subaccount.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] labels: The set of words or phrases assigned to the service instance.
        :param pulumi.Input[str] name: The name of the service instance.
        :param pulumi.Input[str] parameters: The configuration parameters for the service instance.
        """
        pulumi.set(__self__, "serviceplan_id", serviceplan_id)
        pulumi.set(__self__, "subaccount_id", subaccount_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter(name="serviceplanId")
    def serviceplan_id(self) -> pulumi.Input[str]:
        """
        The ID of the service plan.
        """
        return pulumi.get(self, "serviceplan_id")

    @serviceplan_id.setter
    def serviceplan_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "serviceplan_id", value)

    @property
    @pulumi.getter(name="subaccountId")
    def subaccount_id(self) -> pulumi.Input[str]:
        """
        The ID of the subaccount.
        """
        return pulumi.get(self, "subaccount_id")

    @subaccount_id.setter
    def subaccount_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subaccount_id", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        The set of words or phrases assigned to the service instance.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the service instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[str]]:
        """
        The configuration parameters for the service instance.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SubaccountServiceInstanceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SubaccountServiceInstanceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _SubaccountServiceInstanceState:
    def __init__(__self__, *,
                 context: Optional[pulumi.Input[str]] = None,
                 created_date: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 last_modified: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[str]] = None,
                 platform_id: Optional[pulumi.Input[str]] = None,
                 ready: Optional[pulumi.Input[bool]] = None,
                 referenced_instance_id: Optional[pulumi.Input[str]] = None,
                 serviceplan_id: Optional[pulumi.Input[str]] = None,
                 shared: Optional[pulumi.Input[bool]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 subaccount_id: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['SubaccountServiceInstanceTimeoutsArgs']] = None,
                 usable: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering SubaccountServiceInstance resources.
        :param pulumi.Input[str] context: Contextual data for the resource.
        :param pulumi.Input[str] created_date: The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] labels: The set of words or phrases assigned to the service instance.
        :param pulumi.Input[str] last_modified: The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param pulumi.Input[str] name: The name of the service instance.
        :param pulumi.Input[str] parameters: The configuration parameters for the service instance.
        :param pulumi.Input[str] platform_id: The platform ID.
        :param pulumi.Input[str] referenced_instance_id: The ID of the instance to which the service instance refers.
        :param pulumi.Input[str] serviceplan_id: The ID of the service plan.
        :param pulumi.Input[bool] shared: Shows whether the service instance is shared.
        :param pulumi.Input[str] state: The current state of the service instance.
        :param pulumi.Input[str] subaccount_id: The ID of the subaccount.
        :param pulumi.Input[bool] usable: Shows whether the resource can be used.
        """
        if context is not None:
            pulumi.set(__self__, "context", context)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if platform_id is not None:
            pulumi.set(__self__, "platform_id", platform_id)
        if ready is not None:
            pulumi.set(__self__, "ready", ready)
        if referenced_instance_id is not None:
            pulumi.set(__self__, "referenced_instance_id", referenced_instance_id)
        if serviceplan_id is not None:
            pulumi.set(__self__, "serviceplan_id", serviceplan_id)
        if shared is not None:
            pulumi.set(__self__, "shared", shared)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subaccount_id is not None:
            pulumi.set(__self__, "subaccount_id", subaccount_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if usable is not None:
            pulumi.set(__self__, "usable", usable)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[str]]:
        """
        Contextual data for the resource.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        The set of words or phrases assigned to the service instance.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_modified", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the service instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[str]]:
        """
        The configuration parameters for the service instance.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> Optional[pulumi.Input[str]]:
        """
        The platform ID.
        """
        return pulumi.get(self, "platform_id")

    @platform_id.setter
    def platform_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "platform_id", value)

    @property
    @pulumi.getter
    def ready(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ready")

    @ready.setter
    def ready(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ready", value)

    @property
    @pulumi.getter(name="referencedInstanceId")
    def referenced_instance_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the instance to which the service instance refers.
        """
        return pulumi.get(self, "referenced_instance_id")

    @referenced_instance_id.setter
    def referenced_instance_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "referenced_instance_id", value)

    @property
    @pulumi.getter(name="serviceplanId")
    def serviceplan_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the service plan.
        """
        return pulumi.get(self, "serviceplan_id")

    @serviceplan_id.setter
    def serviceplan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serviceplan_id", value)

    @property
    @pulumi.getter
    def shared(self) -> Optional[pulumi.Input[bool]]:
        """
        Shows whether the service instance is shared.
        """
        return pulumi.get(self, "shared")

    @shared.setter
    def shared(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shared", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The current state of the service instance.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="subaccountId")
    def subaccount_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the subaccount.
        """
        return pulumi.get(self, "subaccount_id")

    @subaccount_id.setter
    def subaccount_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subaccount_id", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SubaccountServiceInstanceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SubaccountServiceInstanceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter
    def usable(self) -> Optional[pulumi.Input[bool]]:
        """
        Shows whether the resource can be used.
        """
        return pulumi.get(self, "usable")

    @usable.setter
    def usable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "usable", value)


class SubaccountServiceInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[str]] = None,
                 serviceplan_id: Optional[pulumi.Input[str]] = None,
                 subaccount_id: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[pulumi.InputType['SubaccountServiceInstanceTimeoutsArgs']]] = None,
                 __props__=None):
        """
        Creates a service instance in a subaccount.

        ## Example Usage

        ```python
        import pulumi
        import json
        import lechnerc77_pulumi_btp as btp

        # create an instance of the alert-notification service (no configuration necessary)
        alert_notification_free_subaccount_service_instance = btp.SubaccountServiceInstance("alertNotificationFreeSubaccountServiceInstance",
            subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
            serviceplan_id="b50d1b0b-2059-4f21-a014-2ea87752eb48")
        # create an xsuaa service instance with additional configurations
        xsuaa_application = btp.SubaccountServiceInstance("xsuaaApplication",
            subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
            serviceplan_id="bd5e893f-81dd-4d10-8343-e02975e8ecd8",
            parameters=json.dumps({
                "xsappname": "my-application",
                "tenant-mode": "dedicated",
            }))
        # create an instance of the alert-notification service (no configuration necessary)
        # in additon add a custom timeout for the create and update operation
        alert_notification_free_index_subaccount_service_instance_subaccount_service_instance = btp.SubaccountServiceInstance("alertNotificationFreeIndex/subaccountServiceInstanceSubaccountServiceInstance",
            subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
            serviceplan_id="b50d1b0b-2059-4f21-a014-2ea87752eb48",
            timeouts=btp.SubaccountServiceInstanceTimeoutsArgs(
                create="25m",
                update="15m",
                delete="15m",
            ))
        ```

        ## Import

        ### Restriction The import of service instances that can be configured via parameters only works if the corresponding service offering supports the retrieval of these parameters, which means that the `instances_retrievable` parameter of the service offering must be set to `true`. You can check this setting via the following data sourceterraform data "btp_subaccount_service_offering" "by_name" {

         subaccount_id = <ID of your subaccount>

         name

        = <name of the service offering> }

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] labels: The set of words or phrases assigned to the service instance.
        :param pulumi.Input[str] name: The name of the service instance.
        :param pulumi.Input[str] parameters: The configuration parameters for the service instance.
        :param pulumi.Input[str] serviceplan_id: The ID of the service plan.
        :param pulumi.Input[str] subaccount_id: The ID of the subaccount.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SubaccountServiceInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a service instance in a subaccount.

        ## Example Usage

        ```python
        import pulumi
        import json
        import lechnerc77_pulumi_btp as btp

        # create an instance of the alert-notification service (no configuration necessary)
        alert_notification_free_subaccount_service_instance = btp.SubaccountServiceInstance("alertNotificationFreeSubaccountServiceInstance",
            subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
            serviceplan_id="b50d1b0b-2059-4f21-a014-2ea87752eb48")
        # create an xsuaa service instance with additional configurations
        xsuaa_application = btp.SubaccountServiceInstance("xsuaaApplication",
            subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
            serviceplan_id="bd5e893f-81dd-4d10-8343-e02975e8ecd8",
            parameters=json.dumps({
                "xsappname": "my-application",
                "tenant-mode": "dedicated",
            }))
        # create an instance of the alert-notification service (no configuration necessary)
        # in additon add a custom timeout for the create and update operation
        alert_notification_free_index_subaccount_service_instance_subaccount_service_instance = btp.SubaccountServiceInstance("alertNotificationFreeIndex/subaccountServiceInstanceSubaccountServiceInstance",
            subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
            serviceplan_id="b50d1b0b-2059-4f21-a014-2ea87752eb48",
            timeouts=btp.SubaccountServiceInstanceTimeoutsArgs(
                create="25m",
                update="15m",
                delete="15m",
            ))
        ```

        ## Import

        ### Restriction The import of service instances that can be configured via parameters only works if the corresponding service offering supports the retrieval of these parameters, which means that the `instances_retrievable` parameter of the service offering must be set to `true`. You can check this setting via the following data sourceterraform data "btp_subaccount_service_offering" "by_name" {

         subaccount_id = <ID of your subaccount>

         name

        = <name of the service offering> }

        :param str resource_name: The name of the resource.
        :param SubaccountServiceInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SubaccountServiceInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[str]] = None,
                 serviceplan_id: Optional[pulumi.Input[str]] = None,
                 subaccount_id: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[pulumi.InputType['SubaccountServiceInstanceTimeoutsArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SubaccountServiceInstanceArgs.__new__(SubaccountServiceInstanceArgs)

            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["parameters"] = None if parameters is None else pulumi.Output.secret(parameters)
            if serviceplan_id is None and not opts.urn:
                raise TypeError("Missing required property 'serviceplan_id'")
            __props__.__dict__["serviceplan_id"] = serviceplan_id
            if subaccount_id is None and not opts.urn:
                raise TypeError("Missing required property 'subaccount_id'")
            __props__.__dict__["subaccount_id"] = subaccount_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["context"] = None
            __props__.__dict__["created_date"] = None
            __props__.__dict__["last_modified"] = None
            __props__.__dict__["platform_id"] = None
            __props__.__dict__["ready"] = None
            __props__.__dict__["referenced_instance_id"] = None
            __props__.__dict__["shared"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["usable"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["parameters"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(SubaccountServiceInstance, __self__).__init__(
            'btp:index/subaccountServiceInstance:SubaccountServiceInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            context: Optional[pulumi.Input[str]] = None,
            created_date: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
            last_modified: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            parameters: Optional[pulumi.Input[str]] = None,
            platform_id: Optional[pulumi.Input[str]] = None,
            ready: Optional[pulumi.Input[bool]] = None,
            referenced_instance_id: Optional[pulumi.Input[str]] = None,
            serviceplan_id: Optional[pulumi.Input[str]] = None,
            shared: Optional[pulumi.Input[bool]] = None,
            state: Optional[pulumi.Input[str]] = None,
            subaccount_id: Optional[pulumi.Input[str]] = None,
            timeouts: Optional[pulumi.Input[pulumi.InputType['SubaccountServiceInstanceTimeoutsArgs']]] = None,
            usable: Optional[pulumi.Input[bool]] = None) -> 'SubaccountServiceInstance':
        """
        Get an existing SubaccountServiceInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] context: Contextual data for the resource.
        :param pulumi.Input[str] created_date: The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] labels: The set of words or phrases assigned to the service instance.
        :param pulumi.Input[str] last_modified: The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param pulumi.Input[str] name: The name of the service instance.
        :param pulumi.Input[str] parameters: The configuration parameters for the service instance.
        :param pulumi.Input[str] platform_id: The platform ID.
        :param pulumi.Input[str] referenced_instance_id: The ID of the instance to which the service instance refers.
        :param pulumi.Input[str] serviceplan_id: The ID of the service plan.
        :param pulumi.Input[bool] shared: Shows whether the service instance is shared.
        :param pulumi.Input[str] state: The current state of the service instance.
        :param pulumi.Input[str] subaccount_id: The ID of the subaccount.
        :param pulumi.Input[bool] usable: Shows whether the resource can be used.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SubaccountServiceInstanceState.__new__(_SubaccountServiceInstanceState)

        __props__.__dict__["context"] = context
        __props__.__dict__["created_date"] = created_date
        __props__.__dict__["labels"] = labels
        __props__.__dict__["last_modified"] = last_modified
        __props__.__dict__["name"] = name
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["platform_id"] = platform_id
        __props__.__dict__["ready"] = ready
        __props__.__dict__["referenced_instance_id"] = referenced_instance_id
        __props__.__dict__["serviceplan_id"] = serviceplan_id
        __props__.__dict__["shared"] = shared
        __props__.__dict__["state"] = state
        __props__.__dict__["subaccount_id"] = subaccount_id
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["usable"] = usable
        return SubaccountServiceInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def context(self) -> pulumi.Output[str]:
        """
        Contextual data for the resource.
        """
        return pulumi.get(self, "context")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> pulumi.Output[str]:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, Sequence[str]]]:
        """
        The set of words or phrases assigned to the service instance.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> pulumi.Output[str]:
        """
        The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the service instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[Optional[str]]:
        """
        The configuration parameters for the service instance.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> pulumi.Output[str]:
        """
        The platform ID.
        """
        return pulumi.get(self, "platform_id")

    @property
    @pulumi.getter
    def ready(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter(name="referencedInstanceId")
    def referenced_instance_id(self) -> pulumi.Output[str]:
        """
        The ID of the instance to which the service instance refers.
        """
        return pulumi.get(self, "referenced_instance_id")

    @property
    @pulumi.getter(name="serviceplanId")
    def serviceplan_id(self) -> pulumi.Output[str]:
        """
        The ID of the service plan.
        """
        return pulumi.get(self, "serviceplan_id")

    @property
    @pulumi.getter
    def shared(self) -> pulumi.Output[bool]:
        """
        Shows whether the service instance is shared.
        """
        return pulumi.get(self, "shared")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The current state of the service instance.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subaccountId")
    def subaccount_id(self) -> pulumi.Output[str]:
        """
        The ID of the subaccount.
        """
        return pulumi.get(self, "subaccount_id")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.SubaccountServiceInstanceTimeouts']]:
        return pulumi.get(self, "timeouts")

    @property
    @pulumi.getter
    def usable(self) -> pulumi.Output[bool]:
        """
        Shows whether the resource can be used.
        """
        return pulumi.get(self, "usable")

