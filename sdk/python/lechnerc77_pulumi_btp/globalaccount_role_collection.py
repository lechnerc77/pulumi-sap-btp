# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GlobalaccountRoleCollectionArgs', 'GlobalaccountRoleCollection']

@pulumi.input_type
class GlobalaccountRoleCollectionArgs:
    def __init__(__self__, *,
                 roles: pulumi.Input[Sequence[pulumi.Input['GlobalaccountRoleCollectionRoleArgs']]],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a GlobalaccountRoleCollection resource.
        :param pulumi.Input[str] description: The description of the role collection.
        :param pulumi.Input[str] name: The name of the role collection.
        """
        pulumi.set(__self__, "roles", roles)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Input[Sequence[pulumi.Input['GlobalaccountRoleCollectionRoleArgs']]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: pulumi.Input[Sequence[pulumi.Input['GlobalaccountRoleCollectionRoleArgs']]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the role collection.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the role collection.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _GlobalaccountRoleCollectionState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalaccountRoleCollectionRoleArgs']]]] = None):
        """
        Input properties used for looking up and filtering GlobalaccountRoleCollection resources.
        :param pulumi.Input[str] description: The description of the role collection.
        :param pulumi.Input[str] name: The name of the role collection.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the role collection.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the role collection.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GlobalaccountRoleCollectionRoleArgs']]]]:
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalaccountRoleCollectionRoleArgs']]]]):
        pulumi.set(self, "roles", value)


class GlobalaccountRoleCollection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalaccountRoleCollectionRoleArgs']]]]] = None,
                 __props__=None):
        """
        Creates a role collection in a global account.

        __Further documentation:__
        <https://help.sap.com/docs/btp/sap-business-technology-platform/role-collections-and-roles-in-global-accounts-directories-and-subaccounts>

        ## Import

        terraform

        ```sh
         $ pulumi import btp:index/globalaccountRoleCollection:GlobalaccountRoleCollection <resource_name> '<name>'
        ```

        ```sh
         $ pulumi import btp:index/globalaccountRoleCollection:GlobalaccountRoleCollection globalaccount_viewer 'Global Account Viewer'
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the role collection.
        :param pulumi.Input[str] name: The name of the role collection.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GlobalaccountRoleCollectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a role collection in a global account.

        __Further documentation:__
        <https://help.sap.com/docs/btp/sap-business-technology-platform/role-collections-and-roles-in-global-accounts-directories-and-subaccounts>

        ## Import

        terraform

        ```sh
         $ pulumi import btp:index/globalaccountRoleCollection:GlobalaccountRoleCollection <resource_name> '<name>'
        ```

        ```sh
         $ pulumi import btp:index/globalaccountRoleCollection:GlobalaccountRoleCollection globalaccount_viewer 'Global Account Viewer'
        ```

        :param str resource_name: The name of the resource.
        :param GlobalaccountRoleCollectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GlobalaccountRoleCollectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalaccountRoleCollectionRoleArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GlobalaccountRoleCollectionArgs.__new__(GlobalaccountRoleCollectionArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if roles is None and not opts.urn:
                raise TypeError("Missing required property 'roles'")
            __props__.__dict__["roles"] = roles
        super(GlobalaccountRoleCollection, __self__).__init__(
            'btp:index/globalaccountRoleCollection:GlobalaccountRoleCollection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GlobalaccountRoleCollectionRoleArgs']]]]] = None) -> 'GlobalaccountRoleCollection':
        """
        Get an existing GlobalaccountRoleCollection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the role collection.
        :param pulumi.Input[str] name: The name of the role collection.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GlobalaccountRoleCollectionState.__new__(_GlobalaccountRoleCollectionState)

        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["roles"] = roles
        return GlobalaccountRoleCollection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the role collection.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the role collection.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Sequence['outputs.GlobalaccountRoleCollectionRole']]:
        return pulumi.get(self, "roles")

