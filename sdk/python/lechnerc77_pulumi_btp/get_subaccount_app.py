# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetSubaccountAppResult',
    'AwaitableGetSubaccountAppResult',
    'get_subaccount_app',
    'get_subaccount_app_output',
]

@pulumi.output_type
class GetSubaccountAppResult:
    """
    A collection of values returned by getSubaccountApp.
    """
    def __init__(__self__, authorities=None, description=None, foreign_scope_references=None, id=None, master_app_id=None, oauth2_configuration=None, org_id=None, plan_id=None, plan_name=None, serviceinstance_id=None, space_id=None, subaccount_id=None, tenant_mode=None, username=None, xsappname=None):
        if authorities and not isinstance(authorities, list):
            raise TypeError("Expected argument 'authorities' to be a list")
        pulumi.set(__self__, "authorities", authorities)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if foreign_scope_references and not isinstance(foreign_scope_references, list):
            raise TypeError("Expected argument 'foreign_scope_references' to be a list")
        pulumi.set(__self__, "foreign_scope_references", foreign_scope_references)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if master_app_id and not isinstance(master_app_id, str):
            raise TypeError("Expected argument 'master_app_id' to be a str")
        pulumi.set(__self__, "master_app_id", master_app_id)
        if oauth2_configuration and not isinstance(oauth2_configuration, dict):
            raise TypeError("Expected argument 'oauth2_configuration' to be a dict")
        pulumi.set(__self__, "oauth2_configuration", oauth2_configuration)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if plan_id and not isinstance(plan_id, str):
            raise TypeError("Expected argument 'plan_id' to be a str")
        pulumi.set(__self__, "plan_id", plan_id)
        if plan_name and not isinstance(plan_name, str):
            raise TypeError("Expected argument 'plan_name' to be a str")
        pulumi.set(__self__, "plan_name", plan_name)
        if serviceinstance_id and not isinstance(serviceinstance_id, str):
            raise TypeError("Expected argument 'serviceinstance_id' to be a str")
        pulumi.set(__self__, "serviceinstance_id", serviceinstance_id)
        if space_id and not isinstance(space_id, str):
            raise TypeError("Expected argument 'space_id' to be a str")
        pulumi.set(__self__, "space_id", space_id)
        if subaccount_id and not isinstance(subaccount_id, str):
            raise TypeError("Expected argument 'subaccount_id' to be a str")
        pulumi.set(__self__, "subaccount_id", subaccount_id)
        if tenant_mode and not isinstance(tenant_mode, str):
            raise TypeError("Expected argument 'tenant_mode' to be a str")
        pulumi.set(__self__, "tenant_mode", tenant_mode)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)
        if xsappname and not isinstance(xsappname, str):
            raise TypeError("Expected argument 'xsappname' to be a str")
        pulumi.set(__self__, "xsappname", xsappname)

    @property
    @pulumi.getter
    def authorities(self) -> Sequence[str]:
        return pulumi.get(self, "authorities")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the app.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="foreignScopeReferences")
    def foreign_scope_references(self) -> Sequence[str]:
        return pulumi.get(self, "foreign_scope_references")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The application ID is the xsappname plus the identifier, which consists of an exclamation mark (!), an identifier for the plan under which the application is deployed, and an index number.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="masterAppId")
    def master_app_id(self) -> str:
        return pulumi.get(self, "master_app_id")

    @property
    @pulumi.getter(name="oauth2Configuration")
    def oauth2_configuration(self) -> 'outputs.GetSubaccountAppOauth2ConfigurationResult':
        return pulumi.get(self, "oauth2_configuration")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> str:
        return pulumi.get(self, "plan_id")

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> str:
        return pulumi.get(self, "plan_name")

    @property
    @pulumi.getter(name="serviceinstanceId")
    def serviceinstance_id(self) -> str:
        return pulumi.get(self, "serviceinstance_id")

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> str:
        return pulumi.get(self, "space_id")

    @property
    @pulumi.getter(name="subaccountId")
    def subaccount_id(self) -> str:
        """
        The ID of the subaccount.
        """
        return pulumi.get(self, "subaccount_id")

    @property
    @pulumi.getter(name="tenantMode")
    def tenant_mode(self) -> str:
        return pulumi.get(self, "tenant_mode")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def xsappname(self) -> str:
        return pulumi.get(self, "xsappname")


class AwaitableGetSubaccountAppResult(GetSubaccountAppResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubaccountAppResult(
            authorities=self.authorities,
            description=self.description,
            foreign_scope_references=self.foreign_scope_references,
            id=self.id,
            master_app_id=self.master_app_id,
            oauth2_configuration=self.oauth2_configuration,
            org_id=self.org_id,
            plan_id=self.plan_id,
            plan_name=self.plan_name,
            serviceinstance_id=self.serviceinstance_id,
            space_id=self.space_id,
            subaccount_id=self.subaccount_id,
            tenant_mode=self.tenant_mode,
            username=self.username,
            xsappname=self.xsappname)


def get_subaccount_app(id: Optional[str] = None,
                       subaccount_id: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubaccountAppResult:
    """
    Gets details about a specific app.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    by_id = btp.get_subaccount_app(id="xsuaa!t1",
        subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    ```


    :param str id: The application ID is the xsappname plus the identifier, which consists of an exclamation mark (!), an identifier for the plan under which the application is deployed, and an index number.
    :param str subaccount_id: The ID of the subaccount.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['subaccountId'] = subaccount_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('btp:index/getSubaccountApp:getSubaccountApp', __args__, opts=opts, typ=GetSubaccountAppResult).value

    return AwaitableGetSubaccountAppResult(
        authorities=pulumi.get(__ret__, 'authorities'),
        description=pulumi.get(__ret__, 'description'),
        foreign_scope_references=pulumi.get(__ret__, 'foreign_scope_references'),
        id=pulumi.get(__ret__, 'id'),
        master_app_id=pulumi.get(__ret__, 'master_app_id'),
        oauth2_configuration=pulumi.get(__ret__, 'oauth2_configuration'),
        org_id=pulumi.get(__ret__, 'org_id'),
        plan_id=pulumi.get(__ret__, 'plan_id'),
        plan_name=pulumi.get(__ret__, 'plan_name'),
        serviceinstance_id=pulumi.get(__ret__, 'serviceinstance_id'),
        space_id=pulumi.get(__ret__, 'space_id'),
        subaccount_id=pulumi.get(__ret__, 'subaccount_id'),
        tenant_mode=pulumi.get(__ret__, 'tenant_mode'),
        username=pulumi.get(__ret__, 'username'),
        xsappname=pulumi.get(__ret__, 'xsappname'))


@_utilities.lift_output_func(get_subaccount_app)
def get_subaccount_app_output(id: Optional[pulumi.Input[str]] = None,
                              subaccount_id: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSubaccountAppResult]:
    """
    Gets details about a specific app.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    by_id = btp.get_subaccount_app(id="xsuaa!t1",
        subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    ```


    :param str id: The application ID is the xsappname plus the identifier, which consists of an exclamation mark (!), an identifier for the plan under which the application is deployed, and an index number.
    :param str subaccount_id: The ID of the subaccount.
    """
    ...
