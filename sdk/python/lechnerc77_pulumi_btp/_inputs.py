# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'DirectoryRoleCollectionRoleArgs',
    'GlobalaccountRoleCollectionRoleArgs',
    'SubaccountEnvironmentInstanceTimeoutsArgs',
    'SubaccountRoleCollectionRoleArgs',
    'SubaccountServiceInstanceTimeoutsArgs',
]

@pulumi.input_type
class DirectoryRoleCollectionRoleArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 role_template_app_id: pulumi.Input[str],
                 role_template_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the referenced role.
        :param pulumi.Input[str] role_template_app_id: The name of the referenced template app id.
        :param pulumi.Input[str] role_template_name: The name of the referenced role template.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role_template_app_id", role_template_app_id)
        pulumi.set(__self__, "role_template_name", role_template_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the referenced role.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="roleTemplateAppId")
    def role_template_app_id(self) -> pulumi.Input[str]:
        """
        The name of the referenced template app id.
        """
        return pulumi.get(self, "role_template_app_id")

    @role_template_app_id.setter
    def role_template_app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_template_app_id", value)

    @property
    @pulumi.getter(name="roleTemplateName")
    def role_template_name(self) -> pulumi.Input[str]:
        """
        The name of the referenced role template.
        """
        return pulumi.get(self, "role_template_name")

    @role_template_name.setter
    def role_template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_template_name", value)


@pulumi.input_type
class GlobalaccountRoleCollectionRoleArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 role_template_app_id: pulumi.Input[str],
                 role_template_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the referenced role.
        :param pulumi.Input[str] role_template_app_id: The name of the referenced template app id.
        :param pulumi.Input[str] role_template_name: The name of the referenced role template.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role_template_app_id", role_template_app_id)
        pulumi.set(__self__, "role_template_name", role_template_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the referenced role.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="roleTemplateAppId")
    def role_template_app_id(self) -> pulumi.Input[str]:
        """
        The name of the referenced template app id.
        """
        return pulumi.get(self, "role_template_app_id")

    @role_template_app_id.setter
    def role_template_app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_template_app_id", value)

    @property
    @pulumi.getter(name="roleTemplateName")
    def role_template_name(self) -> pulumi.Input[str]:
        """
        The name of the referenced role template.
        """
        return pulumi.get(self, "role_template_name")

    @role_template_name.setter
    def role_template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_template_name", value)


@pulumi.input_type
class SubaccountEnvironmentInstanceTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 delete: Optional[pulumi.Input[str]] = None,
                 update: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create: Timeout for creating the environment instance.
        :param pulumi.Input[str] delete: Timeout for deleting the environment instance.
        :param pulumi.Input[str] update: Timeout for updating the environment instance.
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        """
        Timeout for creating the environment instance.
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[str]]:
        """
        Timeout for deleting the environment instance.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[str]]:
        """
        Timeout for updating the environment instance.
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update", value)


@pulumi.input_type
class SubaccountRoleCollectionRoleArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 role_template_app_id: pulumi.Input[str],
                 role_template_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the referenced role.
        :param pulumi.Input[str] role_template_app_id: The name of the referenced template app id.
        :param pulumi.Input[str] role_template_name: The name of the referenced role template.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role_template_app_id", role_template_app_id)
        pulumi.set(__self__, "role_template_name", role_template_name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the referenced role.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="roleTemplateAppId")
    def role_template_app_id(self) -> pulumi.Input[str]:
        """
        The name of the referenced template app id.
        """
        return pulumi.get(self, "role_template_app_id")

    @role_template_app_id.setter
    def role_template_app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_template_app_id", value)

    @property
    @pulumi.getter(name="roleTemplateName")
    def role_template_name(self) -> pulumi.Input[str]:
        """
        The name of the referenced role template.
        """
        return pulumi.get(self, "role_template_name")

    @role_template_name.setter
    def role_template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_template_name", value)


@pulumi.input_type
class SubaccountServiceInstanceTimeoutsArgs:
    def __init__(__self__, *,
                 create: Optional[pulumi.Input[str]] = None,
                 delete: Optional[pulumi.Input[str]] = None,
                 update: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] create: Timeout for creating the service instance.
        :param pulumi.Input[str] delete: Timeout for deleting the service instance.
        :param pulumi.Input[str] update: Timeout for updating the service instance.
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter
    def create(self) -> Optional[pulumi.Input[str]]:
        """
        Timeout for creating the service instance.
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[str]]:
        """
        Timeout for deleting the service instance.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[str]]:
        """
        Timeout for updating the service instance.
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update", value)


