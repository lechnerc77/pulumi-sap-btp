# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSubaccountSubscriptionResult',
    'AwaitableGetSubaccountSubscriptionResult',
    'get_subaccount_subscription',
    'get_subaccount_subscription_output',
]

@pulumi.output_type
class GetSubaccountSubscriptionResult:
    """
    A collection of values returned by getSubaccountSubscription.
    """
    def __init__(__self__, additional_plan_features=None, app_id=None, app_name=None, authentication_provider=None, category=None, commercial_app_name=None, created_date=None, customer_developed=None, description=None, display_name=None, formation_solution_name=None, globalaccount_id=None, id=None, labels=None, last_modified=None, parameters=None, plan_name=None, platform_entity_id=None, quota=None, state=None, subaccount_id=None, subscribed_subaccount_id=None, subscribed_tenant_id=None, subscription_url=None, supports_parameters_updates=None, supports_plan_updates=None, tenant_id=None):
        if additional_plan_features and not isinstance(additional_plan_features, list):
            raise TypeError("Expected argument 'additional_plan_features' to be a list")
        pulumi.set(__self__, "additional_plan_features", additional_plan_features)
        if app_id and not isinstance(app_id, str):
            raise TypeError("Expected argument 'app_id' to be a str")
        pulumi.set(__self__, "app_id", app_id)
        if app_name and not isinstance(app_name, str):
            raise TypeError("Expected argument 'app_name' to be a str")
        pulumi.set(__self__, "app_name", app_name)
        if authentication_provider and not isinstance(authentication_provider, str):
            raise TypeError("Expected argument 'authentication_provider' to be a str")
        pulumi.set(__self__, "authentication_provider", authentication_provider)
        if category and not isinstance(category, str):
            raise TypeError("Expected argument 'category' to be a str")
        pulumi.set(__self__, "category", category)
        if commercial_app_name and not isinstance(commercial_app_name, str):
            raise TypeError("Expected argument 'commercial_app_name' to be a str")
        pulumi.set(__self__, "commercial_app_name", commercial_app_name)
        if created_date and not isinstance(created_date, str):
            raise TypeError("Expected argument 'created_date' to be a str")
        pulumi.set(__self__, "created_date", created_date)
        if customer_developed and not isinstance(customer_developed, bool):
            raise TypeError("Expected argument 'customer_developed' to be a bool")
        pulumi.set(__self__, "customer_developed", customer_developed)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if formation_solution_name and not isinstance(formation_solution_name, str):
            raise TypeError("Expected argument 'formation_solution_name' to be a str")
        pulumi.set(__self__, "formation_solution_name", formation_solution_name)
        if globalaccount_id and not isinstance(globalaccount_id, str):
            raise TypeError("Expected argument 'globalaccount_id' to be a str")
        pulumi.set(__self__, "globalaccount_id", globalaccount_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if last_modified and not isinstance(last_modified, str):
            raise TypeError("Expected argument 'last_modified' to be a str")
        pulumi.set(__self__, "last_modified", last_modified)
        if parameters and not isinstance(parameters, str):
            raise TypeError("Expected argument 'parameters' to be a str")
        pulumi.set(__self__, "parameters", parameters)
        if plan_name and not isinstance(plan_name, str):
            raise TypeError("Expected argument 'plan_name' to be a str")
        pulumi.set(__self__, "plan_name", plan_name)
        if platform_entity_id and not isinstance(platform_entity_id, str):
            raise TypeError("Expected argument 'platform_entity_id' to be a str")
        pulumi.set(__self__, "platform_entity_id", platform_entity_id)
        if quota and not isinstance(quota, int):
            raise TypeError("Expected argument 'quota' to be a int")
        pulumi.set(__self__, "quota", quota)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if subaccount_id and not isinstance(subaccount_id, str):
            raise TypeError("Expected argument 'subaccount_id' to be a str")
        pulumi.set(__self__, "subaccount_id", subaccount_id)
        if subscribed_subaccount_id and not isinstance(subscribed_subaccount_id, str):
            raise TypeError("Expected argument 'subscribed_subaccount_id' to be a str")
        pulumi.set(__self__, "subscribed_subaccount_id", subscribed_subaccount_id)
        if subscribed_tenant_id and not isinstance(subscribed_tenant_id, str):
            raise TypeError("Expected argument 'subscribed_tenant_id' to be a str")
        pulumi.set(__self__, "subscribed_tenant_id", subscribed_tenant_id)
        if subscription_url and not isinstance(subscription_url, str):
            raise TypeError("Expected argument 'subscription_url' to be a str")
        pulumi.set(__self__, "subscription_url", subscription_url)
        if supports_parameters_updates and not isinstance(supports_parameters_updates, bool):
            raise TypeError("Expected argument 'supports_parameters_updates' to be a bool")
        pulumi.set(__self__, "supports_parameters_updates", supports_parameters_updates)
        if supports_plan_updates and not isinstance(supports_plan_updates, bool):
            raise TypeError("Expected argument 'supports_plan_updates' to be a bool")
        pulumi.set(__self__, "supports_plan_updates", supports_plan_updates)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="additionalPlanFeatures")
    def additional_plan_features(self) -> Sequence[str]:
        """
        The list of features specific to this plan.
        """
        return pulumi.get(self, "additional_plan_features")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        The ID returned by XSUAA after the app provider has performed a bind of the multitenant application to a XSUAA service instance.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> str:
        """
        The unique registration name of the deployed multitenant application as defined by the app developer.
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter(name="authenticationProvider")
    def authentication_provider(self) -> str:
        """
        The authentication provider of the multitenant application. * XSUAA is the SAP Authorization and Trust Management service that defines scopes and permissions for users as tenants at the global account level. * IAS is Identity Authentication Service that defines scopes and permissions for users in zones (common data isolation systems across systems, SaaS tenants, and services).
        """
        return pulumi.get(self, "authentication_provider")

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        The technical name of the category defined by the app developer to which the multitenant application is grouped in customer-facing UIs.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="commercialAppName")
    def commercial_app_name(self) -> str:
        """
        The commercial name of the deployed multitenant application as defined by the app developer.
        """
        return pulumi.get(self, "commercial_app_name")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter(name="customerDeveloped")
    def customer_developed(self) -> bool:
        """
        Shows whether the application was developed by a customer. If not, then the application is developed by the cloud operator, such as SAP.
        """
        return pulumi.get(self, "customer_developed")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the multitenant application.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        The display name of the application for customer-facing UIs.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="formationSolutionName")
    def formation_solution_name(self) -> str:
        """
        The name of the formations solution associated with the multitenant application.
        """
        return pulumi.get(self, "formation_solution_name")

    @property
    @pulumi.getter(name="globalaccountId")
    def globalaccount_id(self) -> str:
        """
        The ID of the associated global account.
        """
        return pulumi.get(self, "globalaccount_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The technical ID generated by XSUAA for a multitenant application when a consumer subscribes to the application.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, Sequence[str]]:
        """
        The set of words or phrases assigned to the multitenant application subscription.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def parameters(self) -> str:
        """
        The parameters of the subscription as a valid JSON object.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> str:
        """
        The plan name of the application to which the consumer has subscribed.
        """
        return pulumi.get(self, "plan_name")

    @property
    @pulumi.getter(name="platformEntityId")
    def platform_entity_id(self) -> str:
        """
        The ID of the landscape-specific environment.
        """
        return pulumi.get(self, "platform_entity_id")

    @property
    @pulumi.getter
    def quota(self) -> int:
        """
        The total amount the subscribed subaccount is entitled to consume.
        """
        return pulumi.get(self, "quota")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The subscription state of the subaccount regarding the multitenant application.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subaccountId")
    def subaccount_id(self) -> str:
        """
        The ID of the subaccount.
        """
        return pulumi.get(self, "subaccount_id")

    @property
    @pulumi.getter(name="subscribedSubaccountId")
    def subscribed_subaccount_id(self) -> str:
        """
        The ID of the subaccount which is subscribed to the multitenant application.
        """
        return pulumi.get(self, "subscribed_subaccount_id")

    @property
    @pulumi.getter(name="subscribedTenantId")
    def subscribed_tenant_id(self) -> str:
        """
        The ID of the tenant which is subscribed to a multitenant application.
        """
        return pulumi.get(self, "subscribed_tenant_id")

    @property
    @pulumi.getter(name="subscriptionUrl")
    def subscription_url(self) -> str:
        """
        The URL for app users to launch the subscribed application.
        """
        return pulumi.get(self, "subscription_url")

    @property
    @pulumi.getter(name="supportsParametersUpdates")
    def supports_parameters_updates(self) -> bool:
        """
        Specifies whether a consumer, whose subaccount is subscribed to the application, can change its subscriptions parameters.
        """
        return pulumi.get(self, "supports_parameters_updates")

    @property
    @pulumi.getter(name="supportsPlanUpdates")
    def supports_plan_updates(self) -> bool:
        """
        Specifies whether a consumer, whose subaccount is subscribed to the application, can change the subscription to a different plan that is available for this application and subaccount.
        """
        return pulumi.get(self, "supports_plan_updates")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID of the application provider.
        """
        return pulumi.get(self, "tenant_id")


class AwaitableGetSubaccountSubscriptionResult(GetSubaccountSubscriptionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubaccountSubscriptionResult(
            additional_plan_features=self.additional_plan_features,
            app_id=self.app_id,
            app_name=self.app_name,
            authentication_provider=self.authentication_provider,
            category=self.category,
            commercial_app_name=self.commercial_app_name,
            created_date=self.created_date,
            customer_developed=self.customer_developed,
            description=self.description,
            display_name=self.display_name,
            formation_solution_name=self.formation_solution_name,
            globalaccount_id=self.globalaccount_id,
            id=self.id,
            labels=self.labels,
            last_modified=self.last_modified,
            parameters=self.parameters,
            plan_name=self.plan_name,
            platform_entity_id=self.platform_entity_id,
            quota=self.quota,
            state=self.state,
            subaccount_id=self.subaccount_id,
            subscribed_subaccount_id=self.subscribed_subaccount_id,
            subscribed_tenant_id=self.subscribed_tenant_id,
            subscription_url=self.subscription_url,
            supports_parameters_updates=self.supports_parameters_updates,
            supports_plan_updates=self.supports_plan_updates,
            tenant_id=self.tenant_id)


def get_subaccount_subscription(app_name: Optional[str] = None,
                                plan_name: Optional[str] = None,
                                subaccount_id: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubaccountSubscriptionResult:
    """
    Gets details of a specific multitenant application to which a subaccount is entitled to subscribe. If this application is in a different global account than the current one, you need to specify its plan with '--plan'.

    __Tip:__
    You must be assigned to the subaccount admin or viewer role.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    content_agent_ui_free = btp.get_subaccount_subscription(app_name="content-agent-ui",
        plan_name="free",
        subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    ```


    :param str app_name: The unique registration name of the deployed multitenant application as defined by the app developer.
    :param str plan_name: The plan name of the application to which the consumer has subscribed.
    :param str subaccount_id: The ID of the subaccount.
    """
    __args__ = dict()
    __args__['appName'] = app_name
    __args__['planName'] = plan_name
    __args__['subaccountId'] = subaccount_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('btp:index/getSubaccountSubscription:getSubaccountSubscription', __args__, opts=opts, typ=GetSubaccountSubscriptionResult).value

    return AwaitableGetSubaccountSubscriptionResult(
        additional_plan_features=pulumi.get(__ret__, 'additional_plan_features'),
        app_id=pulumi.get(__ret__, 'app_id'),
        app_name=pulumi.get(__ret__, 'app_name'),
        authentication_provider=pulumi.get(__ret__, 'authentication_provider'),
        category=pulumi.get(__ret__, 'category'),
        commercial_app_name=pulumi.get(__ret__, 'commercial_app_name'),
        created_date=pulumi.get(__ret__, 'created_date'),
        customer_developed=pulumi.get(__ret__, 'customer_developed'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        formation_solution_name=pulumi.get(__ret__, 'formation_solution_name'),
        globalaccount_id=pulumi.get(__ret__, 'globalaccount_id'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        last_modified=pulumi.get(__ret__, 'last_modified'),
        parameters=pulumi.get(__ret__, 'parameters'),
        plan_name=pulumi.get(__ret__, 'plan_name'),
        platform_entity_id=pulumi.get(__ret__, 'platform_entity_id'),
        quota=pulumi.get(__ret__, 'quota'),
        state=pulumi.get(__ret__, 'state'),
        subaccount_id=pulumi.get(__ret__, 'subaccount_id'),
        subscribed_subaccount_id=pulumi.get(__ret__, 'subscribed_subaccount_id'),
        subscribed_tenant_id=pulumi.get(__ret__, 'subscribed_tenant_id'),
        subscription_url=pulumi.get(__ret__, 'subscription_url'),
        supports_parameters_updates=pulumi.get(__ret__, 'supports_parameters_updates'),
        supports_plan_updates=pulumi.get(__ret__, 'supports_plan_updates'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'))


@_utilities.lift_output_func(get_subaccount_subscription)
def get_subaccount_subscription_output(app_name: Optional[pulumi.Input[str]] = None,
                                       plan_name: Optional[pulumi.Input[str]] = None,
                                       subaccount_id: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSubaccountSubscriptionResult]:
    """
    Gets details of a specific multitenant application to which a subaccount is entitled to subscribe. If this application is in a different global account than the current one, you need to specify its plan with '--plan'.

    __Tip:__
    You must be assigned to the subaccount admin or viewer role.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    content_agent_ui_free = btp.get_subaccount_subscription(app_name="content-agent-ui",
        plan_name="free",
        subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    ```


    :param str app_name: The unique registration name of the deployed multitenant application as defined by the app developer.
    :param str plan_name: The plan name of the application to which the consumer has subscribed.
    :param str subaccount_id: The ID of the subaccount.
    """
    ...
