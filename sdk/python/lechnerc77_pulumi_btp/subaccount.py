# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SubaccountArgs', 'Subaccount']

@pulumi.input_type
class SubaccountArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[str],
                 subdomain: pulumi.Input[str],
                 beta_enabled: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Subaccount resource.
        :param pulumi.Input[str] region: The region in which the subaccount was created.
        :param pulumi.Input[str] subdomain: The subdomain that becomes part of the path used to access the authorization tenant of the subaccount. Must be unique within the defined region and cannot be changed after the subaccount has been created.
        :param pulumi.Input[bool] beta_enabled: Shows whether the subaccount can use beta services and applications.
        :param pulumi.Input[str] description: A description of the subaccount for customer-facing UIs.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] labels: The set of words or phrases assigned to the subaccount.
        :param pulumi.Input[str] name: A descriptive name of the subaccount for customer-facing UIs.
        :param pulumi.Input[str] parent_id: The ID of the subaccount’s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
        :param pulumi.Input[str] usage: Shows whether the subaccount is used for production purposes. This flag can help your cloud operator to take appropriate action when handling incidents that are related to mission-critical accounts in production systems. Do not apply for subaccounts that are used for nonproduction purposes, such as development, testing, and demos. Applying this setting this does not modify the subaccount. Possible values are:
        """
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "subdomain", subdomain)
        if beta_enabled is not None:
            pulumi.set(__self__, "beta_enabled", beta_enabled)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        The region in which the subaccount was created.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def subdomain(self) -> pulumi.Input[str]:
        """
        The subdomain that becomes part of the path used to access the authorization tenant of the subaccount. Must be unique within the defined region and cannot be changed after the subaccount has been created.
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: pulumi.Input[str]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter(name="betaEnabled")
    def beta_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Shows whether the subaccount can use beta services and applications.
        """
        return pulumi.get(self, "beta_enabled")

    @beta_enabled.setter
    def beta_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "beta_enabled", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the subaccount for customer-facing UIs.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        The set of words or phrases assigned to the subaccount.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A descriptive name of the subaccount for customer-facing UIs.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the subaccount’s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        """
        Shows whether the subaccount is used for production purposes. This flag can help your cloud operator to take appropriate action when handling incidents that are related to mission-critical accounts in production systems. Do not apply for subaccounts that are used for nonproduction purposes, such as development, testing, and demos. Applying this setting this does not modify the subaccount. Possible values are:
        """
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


@pulumi.input_type
class _SubaccountState:
    def __init__(__self__, *,
                 beta_enabled: Optional[pulumi.Input[bool]] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 created_date: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 last_modified: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 usage: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Subaccount resources.
        :param pulumi.Input[bool] beta_enabled: Shows whether the subaccount can use beta services and applications.
        :param pulumi.Input[str] created_by: The details of the user that created the subaccount.
        :param pulumi.Input[str] created_date: The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param pulumi.Input[str] description: A description of the subaccount for customer-facing UIs.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] labels: The set of words or phrases assigned to the subaccount.
        :param pulumi.Input[str] last_modified: The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param pulumi.Input[str] name: A descriptive name of the subaccount for customer-facing UIs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] parent_features: The features of parent entity of the subaccount.
        :param pulumi.Input[str] parent_id: The ID of the subaccount’s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
        :param pulumi.Input[str] region: The region in which the subaccount was created.
        :param pulumi.Input[str] state: The current state of the subaccount. Possible values are: | state | description | | --- | --- | | `OK` | The CRUD
               operation or series of operations completed successfully. | | `STARTED` | CRUD operation on the subaccount has started.
               | | `CANCELED` | The operation or processing was canceled by the operator. | | `PROCESSING` | A series of operations
               related to the subaccount are in progress. | | `PROCESSING_FAILED` | The processing operations failed. | | `CREATING` |
               Creating the subaccount is in progress. | | `CREATION_FAILED` | The creation operation failed, and the subaccount was
               not created or was created but cannot be used. | | `UPDATING` | Updating the subaccount is in progress. | |
               `UPDATE_FAILED` | The update operation failed, and the subaccount was not updated. | | `UPDATE_DIRECTORY_TYPE_FAILED` |
               The update of the directory type failed. | | `UPDATE_ACCOUNT_TYPE_FAILED` | The update of the account type failed. | |
               `DELETING` | Deleting the subaccount is in progress. | | `DELETION_FAILED` | The deletion of the subaccount failed, and
               the subaccount was not deleted. | | `MOVING` | Moving the subaccount is in progress. | | `MOVE_FAILED` | The moving of
               the subaccount failed. | | `MOVING_TO_OTHER_GA` | Moving the subaccount to another global account is in progress. | |
               `MOVE_TO_OTHER_GA_FAILED` | Moving the subaccount to another global account failed. | | `PENDING_REVIEW` | The
               processing operation has been stopped for reviewing and can be restarted by the operator. | | `MIGRATING` | Migrating
               the subaccount from Neo to Cloud Foundry. | | `MIGRATED` | The migration of the subaccount completed. | |
               `MIGRATION_FAILED` | The migration of the subaccount failed and the subaccount was not migrated. | |
               `ROLLBACK_MIGRATION_PROCESSING` | The migration of the subaccount was rolled back and the subaccount is not migrated. |
               | `SUSPENSION_FAILED` | The suspension operations failed. |
        :param pulumi.Input[str] subdomain: The subdomain that becomes part of the path used to access the authorization tenant of the subaccount. Must be unique within the defined region and cannot be changed after the subaccount has been created.
        :param pulumi.Input[str] usage: Shows whether the subaccount is used for production purposes. This flag can help your cloud operator to take appropriate action when handling incidents that are related to mission-critical accounts in production systems. Do not apply for subaccounts that are used for nonproduction purposes, such as development, testing, and demos. Applying this setting this does not modify the subaccount. Possible values are:
        """
        if beta_enabled is not None:
            pulumi.set(__self__, "beta_enabled", beta_enabled)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parent_features is not None:
            pulumi.set(__self__, "parent_features", parent_features)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)

    @property
    @pulumi.getter(name="betaEnabled")
    def beta_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Shows whether the subaccount can use beta services and applications.
        """
        return pulumi.get(self, "beta_enabled")

    @beta_enabled.setter
    def beta_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "beta_enabled", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        """
        The details of the user that created the subaccount.
        """
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the subaccount for customer-facing UIs.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        The set of words or phrases assigned to the subaccount.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_modified", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A descriptive name of the subaccount for customer-facing UIs.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parentFeatures")
    def parent_features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The features of parent entity of the subaccount.
        """
        return pulumi.get(self, "parent_features")

    @parent_features.setter
    def parent_features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "parent_features", value)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the subaccount’s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region in which the subaccount was created.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The current state of the subaccount. Possible values are: | state | description | | --- | --- | | `OK` | The CRUD
        operation or series of operations completed successfully. | | `STARTED` | CRUD operation on the subaccount has started.
        | | `CANCELED` | The operation or processing was canceled by the operator. | | `PROCESSING` | A series of operations
        related to the subaccount are in progress. | | `PROCESSING_FAILED` | The processing operations failed. | | `CREATING` |
        Creating the subaccount is in progress. | | `CREATION_FAILED` | The creation operation failed, and the subaccount was
        not created or was created but cannot be used. | | `UPDATING` | Updating the subaccount is in progress. | |
        `UPDATE_FAILED` | The update operation failed, and the subaccount was not updated. | | `UPDATE_DIRECTORY_TYPE_FAILED` |
        The update of the directory type failed. | | `UPDATE_ACCOUNT_TYPE_FAILED` | The update of the account type failed. | |
        `DELETING` | Deleting the subaccount is in progress. | | `DELETION_FAILED` | The deletion of the subaccount failed, and
        the subaccount was not deleted. | | `MOVING` | Moving the subaccount is in progress. | | `MOVE_FAILED` | The moving of
        the subaccount failed. | | `MOVING_TO_OTHER_GA` | Moving the subaccount to another global account is in progress. | |
        `MOVE_TO_OTHER_GA_FAILED` | Moving the subaccount to another global account failed. | | `PENDING_REVIEW` | The
        processing operation has been stopped for reviewing and can be restarted by the operator. | | `MIGRATING` | Migrating
        the subaccount from Neo to Cloud Foundry. | | `MIGRATED` | The migration of the subaccount completed. | |
        `MIGRATION_FAILED` | The migration of the subaccount failed and the subaccount was not migrated. | |
        `ROLLBACK_MIGRATION_PROCESSING` | The migration of the subaccount was rolled back and the subaccount is not migrated. |
        | `SUSPENSION_FAILED` | The suspension operations failed. |
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        """
        The subdomain that becomes part of the path used to access the authorization tenant of the subaccount. Must be unique within the defined region and cannot be changed after the subaccount has been created.
        """
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input[str]]:
        """
        Shows whether the subaccount is used for production purposes. This flag can help your cloud operator to take appropriate action when handling incidents that are related to mission-critical accounts in production systems. Do not apply for subaccounts that are used for nonproduction purposes, such as development, testing, and demos. Applying this setting this does not modify the subaccount. Possible values are:
        """
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "usage", value)


class Subaccount(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 beta_enabled: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 usage: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a subaccount in a global account or directory.

        __Tip:__
        You must be assigned to the global account or directory admin role.

        __Further documentation:__
        <https://help.sap.com/docs/btp/sap-business-technology-platform/account-model>

        ## Example Usage

        ```python
        import pulumi
        import lechnerc77_pulumi_btp as btp
        import pulumi_btp as btp

        # create a subaccount in eu30 region (GCP)
        my_project = btp.Subaccount("myProject",
            subdomain="my-project",
            region="eu30")
        # create a subaccount in every Azure region which has support for cloud foundry
        all = btp.get_regions()
        # create the subaccounts by iterating over the regions with the defined constraints
        my_project_on_azure = []
        for range in [{"key": k, "value": v} for [k, v] in enumerate({dc.region: dc for dc in all.values if dc.environment == cloudfoundry and dc.iaas_provider == AZURE})]:
            my_project_on_azure.append(btp.Subaccount(f"myProjectOnAzure-{range['key']}",
                subdomain=f"my-project-{range['key']}",
                region=range["key"]))
        ```

        ## Import

        terraform

        ```sh
         $ pulumi import btp:index/subaccount:Subaccount <resource_name> <subaccount_id>
        ```

        ```sh
         $ pulumi import btp:index/subaccount:Subaccount my_project 6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] beta_enabled: Shows whether the subaccount can use beta services and applications.
        :param pulumi.Input[str] description: A description of the subaccount for customer-facing UIs.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] labels: The set of words or phrases assigned to the subaccount.
        :param pulumi.Input[str] name: A descriptive name of the subaccount for customer-facing UIs.
        :param pulumi.Input[str] parent_id: The ID of the subaccount’s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
        :param pulumi.Input[str] region: The region in which the subaccount was created.
        :param pulumi.Input[str] subdomain: The subdomain that becomes part of the path used to access the authorization tenant of the subaccount. Must be unique within the defined region and cannot be changed after the subaccount has been created.
        :param pulumi.Input[str] usage: Shows whether the subaccount is used for production purposes. This flag can help your cloud operator to take appropriate action when handling incidents that are related to mission-critical accounts in production systems. Do not apply for subaccounts that are used for nonproduction purposes, such as development, testing, and demos. Applying this setting this does not modify the subaccount. Possible values are:
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SubaccountArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a subaccount in a global account or directory.

        __Tip:__
        You must be assigned to the global account or directory admin role.

        __Further documentation:__
        <https://help.sap.com/docs/btp/sap-business-technology-platform/account-model>

        ## Example Usage

        ```python
        import pulumi
        import lechnerc77_pulumi_btp as btp
        import pulumi_btp as btp

        # create a subaccount in eu30 region (GCP)
        my_project = btp.Subaccount("myProject",
            subdomain="my-project",
            region="eu30")
        # create a subaccount in every Azure region which has support for cloud foundry
        all = btp.get_regions()
        # create the subaccounts by iterating over the regions with the defined constraints
        my_project_on_azure = []
        for range in [{"key": k, "value": v} for [k, v] in enumerate({dc.region: dc for dc in all.values if dc.environment == cloudfoundry and dc.iaas_provider == AZURE})]:
            my_project_on_azure.append(btp.Subaccount(f"myProjectOnAzure-{range['key']}",
                subdomain=f"my-project-{range['key']}",
                region=range["key"]))
        ```

        ## Import

        terraform

        ```sh
         $ pulumi import btp:index/subaccount:Subaccount <resource_name> <subaccount_id>
        ```

        ```sh
         $ pulumi import btp:index/subaccount:Subaccount my_project 6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f
        ```

        :param str resource_name: The name of the resource.
        :param SubaccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SubaccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 beta_enabled: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parent_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 subdomain: Optional[pulumi.Input[str]] = None,
                 usage: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SubaccountArgs.__new__(SubaccountArgs)

            __props__.__dict__["beta_enabled"] = beta_enabled
            __props__.__dict__["description"] = description
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["parent_id"] = parent_id
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            if subdomain is None and not opts.urn:
                raise TypeError("Missing required property 'subdomain'")
            __props__.__dict__["subdomain"] = subdomain
            __props__.__dict__["usage"] = usage
            __props__.__dict__["created_by"] = None
            __props__.__dict__["created_date"] = None
            __props__.__dict__["last_modified"] = None
            __props__.__dict__["parent_features"] = None
            __props__.__dict__["state"] = None
        super(Subaccount, __self__).__init__(
            'btp:index/subaccount:Subaccount',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            beta_enabled: Optional[pulumi.Input[bool]] = None,
            created_by: Optional[pulumi.Input[str]] = None,
            created_date: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
            last_modified: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            parent_features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            parent_id: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            subdomain: Optional[pulumi.Input[str]] = None,
            usage: Optional[pulumi.Input[str]] = None) -> 'Subaccount':
        """
        Get an existing Subaccount resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] beta_enabled: Shows whether the subaccount can use beta services and applications.
        :param pulumi.Input[str] created_by: The details of the user that created the subaccount.
        :param pulumi.Input[str] created_date: The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param pulumi.Input[str] description: A description of the subaccount for customer-facing UIs.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] labels: The set of words or phrases assigned to the subaccount.
        :param pulumi.Input[str] last_modified: The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param pulumi.Input[str] name: A descriptive name of the subaccount for customer-facing UIs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] parent_features: The features of parent entity of the subaccount.
        :param pulumi.Input[str] parent_id: The ID of the subaccount’s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
        :param pulumi.Input[str] region: The region in which the subaccount was created.
        :param pulumi.Input[str] state: The current state of the subaccount. Possible values are: | state | description | | --- | --- | | `OK` | The CRUD
               operation or series of operations completed successfully. | | `STARTED` | CRUD operation on the subaccount has started.
               | | `CANCELED` | The operation or processing was canceled by the operator. | | `PROCESSING` | A series of operations
               related to the subaccount are in progress. | | `PROCESSING_FAILED` | The processing operations failed. | | `CREATING` |
               Creating the subaccount is in progress. | | `CREATION_FAILED` | The creation operation failed, and the subaccount was
               not created or was created but cannot be used. | | `UPDATING` | Updating the subaccount is in progress. | |
               `UPDATE_FAILED` | The update operation failed, and the subaccount was not updated. | | `UPDATE_DIRECTORY_TYPE_FAILED` |
               The update of the directory type failed. | | `UPDATE_ACCOUNT_TYPE_FAILED` | The update of the account type failed. | |
               `DELETING` | Deleting the subaccount is in progress. | | `DELETION_FAILED` | The deletion of the subaccount failed, and
               the subaccount was not deleted. | | `MOVING` | Moving the subaccount is in progress. | | `MOVE_FAILED` | The moving of
               the subaccount failed. | | `MOVING_TO_OTHER_GA` | Moving the subaccount to another global account is in progress. | |
               `MOVE_TO_OTHER_GA_FAILED` | Moving the subaccount to another global account failed. | | `PENDING_REVIEW` | The
               processing operation has been stopped for reviewing and can be restarted by the operator. | | `MIGRATING` | Migrating
               the subaccount from Neo to Cloud Foundry. | | `MIGRATED` | The migration of the subaccount completed. | |
               `MIGRATION_FAILED` | The migration of the subaccount failed and the subaccount was not migrated. | |
               `ROLLBACK_MIGRATION_PROCESSING` | The migration of the subaccount was rolled back and the subaccount is not migrated. |
               | `SUSPENSION_FAILED` | The suspension operations failed. |
        :param pulumi.Input[str] subdomain: The subdomain that becomes part of the path used to access the authorization tenant of the subaccount. Must be unique within the defined region and cannot be changed after the subaccount has been created.
        :param pulumi.Input[str] usage: Shows whether the subaccount is used for production purposes. This flag can help your cloud operator to take appropriate action when handling incidents that are related to mission-critical accounts in production systems. Do not apply for subaccounts that are used for nonproduction purposes, such as development, testing, and demos. Applying this setting this does not modify the subaccount. Possible values are:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SubaccountState.__new__(_SubaccountState)

        __props__.__dict__["beta_enabled"] = beta_enabled
        __props__.__dict__["created_by"] = created_by
        __props__.__dict__["created_date"] = created_date
        __props__.__dict__["description"] = description
        __props__.__dict__["labels"] = labels
        __props__.__dict__["last_modified"] = last_modified
        __props__.__dict__["name"] = name
        __props__.__dict__["parent_features"] = parent_features
        __props__.__dict__["parent_id"] = parent_id
        __props__.__dict__["region"] = region
        __props__.__dict__["state"] = state
        __props__.__dict__["subdomain"] = subdomain
        __props__.__dict__["usage"] = usage
        return Subaccount(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="betaEnabled")
    def beta_enabled(self) -> pulumi.Output[bool]:
        """
        Shows whether the subaccount can use beta services and applications.
        """
        return pulumi.get(self, "beta_enabled")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[str]:
        """
        The details of the user that created the subaccount.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> pulumi.Output[str]:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        A description of the subaccount for customer-facing UIs.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, Sequence[str]]]]:
        """
        The set of words or phrases assigned to the subaccount.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> pulumi.Output[str]:
        """
        The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A descriptive name of the subaccount for customer-facing UIs.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentFeatures")
    def parent_features(self) -> pulumi.Output[Sequence[str]]:
        """
        The features of parent entity of the subaccount.
        """
        return pulumi.get(self, "parent_features")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Output[str]:
        """
        The ID of the subaccount’s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
        """
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        The region in which the subaccount was created.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The current state of the subaccount. Possible values are: | state | description | | --- | --- | | `OK` | The CRUD
        operation or series of operations completed successfully. | | `STARTED` | CRUD operation on the subaccount has started.
        | | `CANCELED` | The operation or processing was canceled by the operator. | | `PROCESSING` | A series of operations
        related to the subaccount are in progress. | | `PROCESSING_FAILED` | The processing operations failed. | | `CREATING` |
        Creating the subaccount is in progress. | | `CREATION_FAILED` | The creation operation failed, and the subaccount was
        not created or was created but cannot be used. | | `UPDATING` | Updating the subaccount is in progress. | |
        `UPDATE_FAILED` | The update operation failed, and the subaccount was not updated. | | `UPDATE_DIRECTORY_TYPE_FAILED` |
        The update of the directory type failed. | | `UPDATE_ACCOUNT_TYPE_FAILED` | The update of the account type failed. | |
        `DELETING` | Deleting the subaccount is in progress. | | `DELETION_FAILED` | The deletion of the subaccount failed, and
        the subaccount was not deleted. | | `MOVING` | Moving the subaccount is in progress. | | `MOVE_FAILED` | The moving of
        the subaccount failed. | | `MOVING_TO_OTHER_GA` | Moving the subaccount to another global account is in progress. | |
        `MOVE_TO_OTHER_GA_FAILED` | Moving the subaccount to another global account failed. | | `PENDING_REVIEW` | The
        processing operation has been stopped for reviewing and can be restarted by the operator. | | `MIGRATING` | Migrating
        the subaccount from Neo to Cloud Foundry. | | `MIGRATED` | The migration of the subaccount completed. | |
        `MIGRATION_FAILED` | The migration of the subaccount failed and the subaccount was not migrated. | |
        `ROLLBACK_MIGRATION_PROCESSING` | The migration of the subaccount was rolled back and the subaccount is not migrated. |
        | `SUSPENSION_FAILED` | The suspension operations failed. |
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def subdomain(self) -> pulumi.Output[str]:
        """
        The subdomain that becomes part of the path used to access the authorization tenant of the subaccount. Must be unique within the defined region and cannot be changed after the subaccount has been created.
        """
        return pulumi.get(self, "subdomain")

    @property
    @pulumi.getter
    def usage(self) -> pulumi.Output[str]:
        """
        Shows whether the subaccount is used for production purposes. This flag can help your cloud operator to take appropriate action when handling incidents that are related to mission-critical accounts in production systems. Do not apply for subaccounts that are used for nonproduction purposes, such as development, testing, and demos. Applying this setting this does not modify the subaccount. Possible values are:
        """
        return pulumi.get(self, "usage")

