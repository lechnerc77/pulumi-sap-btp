# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSubaccountSecuritySettingsResult',
    'AwaitableGetSubaccountSecuritySettingsResult',
    'get_subaccount_security_settings',
    'get_subaccount_security_settings_output',
]

@pulumi.output_type
class GetSubaccountSecuritySettingsResult:
    """
    A collection of values returned by getSubaccountSecuritySettings.
    """
    def __init__(__self__, access_token_validity=None, custom_email_domains=None, default_identity_provider=None, id=None, refresh_token_validity=None, subaccount_id=None, treat_users_with_same_email_as_same_user=None):
        if access_token_validity and not isinstance(access_token_validity, int):
            raise TypeError("Expected argument 'access_token_validity' to be a int")
        pulumi.set(__self__, "access_token_validity", access_token_validity)
        if custom_email_domains and not isinstance(custom_email_domains, list):
            raise TypeError("Expected argument 'custom_email_domains' to be a list")
        pulumi.set(__self__, "custom_email_domains", custom_email_domains)
        if default_identity_provider and not isinstance(default_identity_provider, str):
            raise TypeError("Expected argument 'default_identity_provider' to be a str")
        pulumi.set(__self__, "default_identity_provider", default_identity_provider)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if refresh_token_validity and not isinstance(refresh_token_validity, int):
            raise TypeError("Expected argument 'refresh_token_validity' to be a int")
        pulumi.set(__self__, "refresh_token_validity", refresh_token_validity)
        if subaccount_id and not isinstance(subaccount_id, str):
            raise TypeError("Expected argument 'subaccount_id' to be a str")
        pulumi.set(__self__, "subaccount_id", subaccount_id)
        if treat_users_with_same_email_as_same_user and not isinstance(treat_users_with_same_email_as_same_user, bool):
            raise TypeError("Expected argument 'treat_users_with_same_email_as_same_user' to be a bool")
        pulumi.set(__self__, "treat_users_with_same_email_as_same_user", treat_users_with_same_email_as_same_user)

    @property
    @pulumi.getter(name="accessTokenValidity")
    def access_token_validity(self) -> int:
        """
        The validity of the access token.
        """
        return pulumi.get(self, "access_token_validity")

    @property
    @pulumi.getter(name="customEmailDomains")
    def custom_email_domains(self) -> Sequence[str]:
        """
        Set of domains that are allowed to be used for user authentication.
        """
        return pulumi.get(self, "custom_email_domains")

    @property
    @pulumi.getter(name="defaultIdentityProvider")
    def default_identity_provider(self) -> str:
        """
        The subaccount's default identity provider for business application users.
        """
        return pulumi.get(self, "default_identity_provider")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="refreshTokenValidity")
    def refresh_token_validity(self) -> int:
        """
        The validity of the refresh token.
        """
        return pulumi.get(self, "refresh_token_validity")

    @property
    @pulumi.getter(name="subaccountId")
    def subaccount_id(self) -> str:
        """
        The ID of the subaccount.
        """
        return pulumi.get(self, "subaccount_id")

    @property
    @pulumi.getter(name="treatUsersWithSameEmailAsSameUser")
    def treat_users_with_same_email_as_same_user(self) -> bool:
        """
        If set to true, users with the same email are treated as same users.
        """
        return pulumi.get(self, "treat_users_with_same_email_as_same_user")


class AwaitableGetSubaccountSecuritySettingsResult(GetSubaccountSecuritySettingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubaccountSecuritySettingsResult(
            access_token_validity=self.access_token_validity,
            custom_email_domains=self.custom_email_domains,
            default_identity_provider=self.default_identity_provider,
            id=self.id,
            refresh_token_validity=self.refresh_token_validity,
            subaccount_id=self.subaccount_id,
            treat_users_with_same_email_as_same_user=self.treat_users_with_same_email_as_same_user)


def get_subaccount_security_settings(subaccount_id: Optional[str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubaccountSecuritySettingsResult:
    """
    Gets the security settings of a subaccount.

    __Tip:__
    You must be viewer or administrator of the subaccount.

    __Further documentation:__
    <https://help.sap.com/docs/btp/sap-business-technology-platform/configure-trusted-domains-for-sap-authorization-and-trust-management-service>
    <https://help.sap.com/docs/btp/sap-business-technology-platform/configure-token-policy-for-sap-authorization-and-trust-management-service>

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    subaccount = btp.get_subaccount_security_settings(subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    ```


    :param str subaccount_id: The ID of the subaccount.
    """
    __args__ = dict()
    __args__['subaccountId'] = subaccount_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('btp:index/getSubaccountSecuritySettings:getSubaccountSecuritySettings', __args__, opts=opts, typ=GetSubaccountSecuritySettingsResult).value

    return AwaitableGetSubaccountSecuritySettingsResult(
        access_token_validity=pulumi.get(__ret__, 'access_token_validity'),
        custom_email_domains=pulumi.get(__ret__, 'custom_email_domains'),
        default_identity_provider=pulumi.get(__ret__, 'default_identity_provider'),
        id=pulumi.get(__ret__, 'id'),
        refresh_token_validity=pulumi.get(__ret__, 'refresh_token_validity'),
        subaccount_id=pulumi.get(__ret__, 'subaccount_id'),
        treat_users_with_same_email_as_same_user=pulumi.get(__ret__, 'treat_users_with_same_email_as_same_user'))


@_utilities.lift_output_func(get_subaccount_security_settings)
def get_subaccount_security_settings_output(subaccount_id: Optional[pulumi.Input[str]] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSubaccountSecuritySettingsResult]:
    """
    Gets the security settings of a subaccount.

    __Tip:__
    You must be viewer or administrator of the subaccount.

    __Further documentation:__
    <https://help.sap.com/docs/btp/sap-business-technology-platform/configure-trusted-domains-for-sap-authorization-and-trust-management-service>
    <https://help.sap.com/docs/btp/sap-business-technology-platform/configure-token-policy-for-sap-authorization-and-trust-management-service>

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    subaccount = btp.get_subaccount_security_settings(subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    ```


    :param str subaccount_id: The ID of the subaccount.
    """
    ...
