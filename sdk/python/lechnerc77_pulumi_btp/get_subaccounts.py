# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetSubaccountsResult',
    'AwaitableGetSubaccountsResult',
    'get_subaccounts',
    'get_subaccounts_output',
]

@pulumi.output_type
class GetSubaccountsResult:
    """
    A collection of values returned by getSubaccounts.
    """
    def __init__(__self__, id=None, labels_filter=None, values=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels_filter and not isinstance(labels_filter, str):
            raise TypeError("Expected argument 'labels_filter' to be a str")
        pulumi.set(__self__, "labels_filter", labels_filter)
        if values and not isinstance(values, list):
            raise TypeError("Expected argument 'values' to be a list")
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the global account.
        """
        warnings.warn("""Use the `btp_globalaccount` datasource instead""", DeprecationWarning)
        pulumi.log.warn("""id is deprecated: Use the `btp_globalaccount` datasource instead""")

        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="labelsFilter")
    def labels_filter(self) -> Optional[str]:
        """
        Filters the response based on the labels query.
        """
        return pulumi.get(self, "labels_filter")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetSubaccountsValueResult']:
        """
        The subaccounts contained in the global account.
        """
        return pulumi.get(self, "values")


class AwaitableGetSubaccountsResult(GetSubaccountsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubaccountsResult(
            id=self.id,
            labels_filter=self.labels_filter,
            values=self.values)


def get_subaccounts(labels_filter: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubaccountsResult:
    """
    Gets all the subaccounts in a global account, including the subaccounts in directories.

    __Tip:__
    You must be assigned to the admin or viewer role of the global account, directory.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    all = btp.get_subaccounts()
    filtered = btp.get_subaccounts(labels_filter="my-label=my-value")
    ```


    :param str labels_filter: Filters the response based on the labels query.
    """
    __args__ = dict()
    __args__['labelsFilter'] = labels_filter
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('btp:index/getSubaccounts:getSubaccounts', __args__, opts=opts, typ=GetSubaccountsResult).value

    return AwaitableGetSubaccountsResult(
        id=pulumi.get(__ret__, 'id'),
        labels_filter=pulumi.get(__ret__, 'labels_filter'),
        values=pulumi.get(__ret__, 'values'))


@_utilities.lift_output_func(get_subaccounts)
def get_subaccounts_output(labels_filter: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSubaccountsResult]:
    """
    Gets all the subaccounts in a global account, including the subaccounts in directories.

    __Tip:__
    You must be assigned to the admin or viewer role of the global account, directory.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    all = btp.get_subaccounts()
    filtered = btp.get_subaccounts(labels_filter="my-label=my-value")
    ```


    :param str labels_filter: Filters the response based on the labels query.
    """
    ...
