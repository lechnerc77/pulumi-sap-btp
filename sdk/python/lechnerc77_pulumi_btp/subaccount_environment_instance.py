# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SubaccountEnvironmentInstanceArgs', 'SubaccountEnvironmentInstance']

@pulumi.input_type
class SubaccountEnvironmentInstanceArgs:
    def __init__(__self__, *,
                 environment_type: pulumi.Input[str],
                 parameters: pulumi.Input[str],
                 plan_name: pulumi.Input[str],
                 service_name: pulumi.Input[str],
                 subaccount_id: pulumi.Input[str],
                 landscape_label: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['SubaccountEnvironmentInstanceTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a SubaccountEnvironmentInstance resource.
        :param pulumi.Input[str] environment_type: The type of the environment instance that is used.
        :param pulumi.Input[str] parameters: The configuration parameters for the environment instance.
        :param pulumi.Input[str] plan_name: The name of the service plan for the environment instance in the corresponding service broker's catalog.
        :param pulumi.Input[str] service_name: The name of the service for the environment instance in the corresponding service broker's catalog.
        :param pulumi.Input[str] subaccount_id: The ID of the subaccount.
        :param pulumi.Input[str] landscape_label: The name of the landscape within the logged in region on which the environment instance is created.
        :param pulumi.Input[str] name: The name of the environment instance.
        """
        pulumi.set(__self__, "environment_type", environment_type)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "plan_name", plan_name)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "subaccount_id", subaccount_id)
        if landscape_label is not None:
            pulumi.set(__self__, "landscape_label", landscape_label)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> pulumi.Input[str]:
        """
        The type of the environment instance that is used.
        """
        return pulumi.get(self, "environment_type")

    @environment_type.setter
    def environment_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment_type", value)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input[str]:
        """
        The configuration parameters for the environment instance.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> pulumi.Input[str]:
        """
        The name of the service plan for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "plan_name")

    @plan_name.setter
    def plan_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan_name", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        """
        The name of the service for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="subaccountId")
    def subaccount_id(self) -> pulumi.Input[str]:
        """
        The ID of the subaccount.
        """
        return pulumi.get(self, "subaccount_id")

    @subaccount_id.setter
    def subaccount_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subaccount_id", value)

    @property
    @pulumi.getter(name="landscapeLabel")
    def landscape_label(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the landscape within the logged in region on which the environment instance is created.
        """
        return pulumi.get(self, "landscape_label")

    @landscape_label.setter
    def landscape_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "landscape_label", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the environment instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SubaccountEnvironmentInstanceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SubaccountEnvironmentInstanceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _SubaccountEnvironmentInstanceState:
    def __init__(__self__, *,
                 broker_id: Optional[pulumi.Input[str]] = None,
                 created_date: Optional[pulumi.Input[str]] = None,
                 custom_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 dashboard_url: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environment_type: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[str]] = None,
                 landscape_label: Optional[pulumi.Input[str]] = None,
                 last_modified: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operation: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[str]] = None,
                 plan_id: Optional[pulumi.Input[str]] = None,
                 plan_name: Optional[pulumi.Input[str]] = None,
                 platform_id: Optional[pulumi.Input[str]] = None,
                 service_id: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 subaccount_id: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input['SubaccountEnvironmentInstanceTimeoutsArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SubaccountEnvironmentInstance resources.
        :param pulumi.Input[str] broker_id: The ID of the associated environment broker.
        :param pulumi.Input[str] created_date: The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] custom_labels: The set of words or phrases assigned to the environment instance.
        :param pulumi.Input[str] dashboard_url: The URL of the service dashboard, which is a web-based management user interface for the service instances.
        :param pulumi.Input[str] description: The description of the environment instance.
        :param pulumi.Input[str] environment_type: The type of the environment instance that is used.
        :param pulumi.Input[str] labels: The Broker-specified key-value pairs that specify attributes of an environment instance.
        :param pulumi.Input[str] landscape_label: The name of the landscape within the logged in region on which the environment instance is created.
        :param pulumi.Input[str] last_modified: The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param pulumi.Input[str] name: The name of the environment instance.
        :param pulumi.Input[str] operation: An identifier that represents the last operation. This ID is returned by the environment brokers.
        :param pulumi.Input[str] parameters: The configuration parameters for the environment instance.
        :param pulumi.Input[str] plan_id: The ID of the service plan for the environment instance in the corresponding service broker's catalog.
        :param pulumi.Input[str] plan_name: The name of the service plan for the environment instance in the corresponding service broker's catalog.
        :param pulumi.Input[str] platform_id: The ID of the platform for the environment instance in the corresponding service broker's catalog.
        :param pulumi.Input[str] service_id: The ID of the service for the environment instance in the corresponding service broker's catalog.
        :param pulumi.Input[str] service_name: The name of the service for the environment instance in the corresponding service broker's catalog.
        :param pulumi.Input[str] state: The current state of the environment instance. Possible values are:
        :param pulumi.Input[str] subaccount_id: The ID of the subaccount.
        :param pulumi.Input[str] tenant_id: The ID of the tenant that owns the environment instance.
        :param pulumi.Input[str] type: The last provisioning operation on the environment instance. Possible values are: | type | description | | --- | --- | |
               `Provision` | The environment instance is created. | | `Update` | The environment instance is changed. | | `Deprovision`
               | The environment instance is deleted. |
        """
        if broker_id is not None:
            pulumi.set(__self__, "broker_id", broker_id)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if custom_labels is not None:
            pulumi.set(__self__, "custom_labels", custom_labels)
        if dashboard_url is not None:
            pulumi.set(__self__, "dashboard_url", dashboard_url)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environment_type is not None:
            pulumi.set(__self__, "environment_type", environment_type)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if landscape_label is not None:
            pulumi.set(__self__, "landscape_label", landscape_label)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if plan_id is not None:
            pulumi.set(__self__, "plan_id", plan_id)
        if plan_name is not None:
            pulumi.set(__self__, "plan_name", plan_name)
        if platform_id is not None:
            pulumi.set(__self__, "platform_id", platform_id)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subaccount_id is not None:
            pulumi.set(__self__, "subaccount_id", subaccount_id)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="brokerId")
    def broker_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the associated environment broker.
        """
        return pulumi.get(self, "broker_id")

    @broker_id.setter
    def broker_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "broker_id", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter(name="customLabels")
    def custom_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        The set of words or phrases assigned to the environment instance.
        """
        return pulumi.get(self, "custom_labels")

    @custom_labels.setter
    def custom_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "custom_labels", value)

    @property
    @pulumi.getter(name="dashboardUrl")
    def dashboard_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the service dashboard, which is a web-based management user interface for the service instances.
        """
        return pulumi.get(self, "dashboard_url")

    @dashboard_url.setter
    def dashboard_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dashboard_url", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the environment instance.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the environment instance that is used.
        """
        return pulumi.get(self, "environment_type")

    @environment_type.setter
    def environment_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_type", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[str]]:
        """
        The Broker-specified key-value pairs that specify attributes of an environment instance.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="landscapeLabel")
    def landscape_label(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the landscape within the logged in region on which the environment instance is created.
        """
        return pulumi.get(self, "landscape_label")

    @landscape_label.setter
    def landscape_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "landscape_label", value)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_modified", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the environment instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def operation(self) -> Optional[pulumi.Input[str]]:
        """
        An identifier that represents the last operation. This ID is returned by the environment brokers.
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[str]]:
        """
        The configuration parameters for the environment instance.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the service plan for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "plan_id")

    @plan_id.setter
    def plan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan_id", value)

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the service plan for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "plan_name")

    @plan_name.setter
    def plan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan_name", value)

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the platform for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "platform_id")

    @platform_id.setter
    def platform_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "platform_id", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the service for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_id", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the service for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The current state of the environment instance. Possible values are:
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="subaccountId")
    def subaccount_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the subaccount.
        """
        return pulumi.get(self, "subaccount_id")

    @subaccount_id.setter
    def subaccount_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subaccount_id", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the tenant that owns the environment instance.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['SubaccountEnvironmentInstanceTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['SubaccountEnvironmentInstanceTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The last provisioning operation on the environment instance. Possible values are: | type | description | | --- | --- | |
        `Provision` | The environment instance is created. | | `Update` | The environment instance is changed. | | `Deprovision`
        | The environment instance is deleted. |
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class SubaccountEnvironmentInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environment_type: Optional[pulumi.Input[str]] = None,
                 landscape_label: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[str]] = None,
                 plan_name: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 subaccount_id: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[pulumi.InputType['SubaccountEnvironmentInstanceTimeoutsArgs']]] = None,
                 __props__=None):
        """
        Creates an environment instance, such as a Cloud Foundry org, in a subaccount.

        __Tips:__
        * You must be assigned to the subaccount admin role.
        * Quota-based environments, such as Kyma, must first be assigned as entitlements to the subaccount.

        __Further documentation:__
        * Cloud Foundry: <https://help.sap.com/docs/btp/sap-business-technology-platform/org-management-using-sap-btp-command-line-interface-btp-cli>
        * Kyma: <https://help.sap.com/docs/btp/sap-business-technology-platform/available-plans-in-kyma-environment>
        * Concept: <https://help.sap.com/docs/btp/sap-business-technology-platform/environments>

        ## Example Usage

        ```python
        import pulumi
        import json
        import lechnerc77_pulumi_btp as btp

        # creates a cloud foundry environment in a given account
        cloudfoundry_subaccount_environment_instance = btp.SubaccountEnvironmentInstance("cloudfoundrySubaccountEnvironmentInstance",
            subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
            environment_type="cloudfoundry",
            service_name="cloudfoundry",
            plan_name="standard",
            parameters=json.dumps({
                "instance_name": "my-cf-org-name",
            }))
        # creates a cloud foundry environment in a given account
        # in additon add a custom timeout for the create and delete operation
        cloudfoundry_index_subaccount_environment_instance_subaccount_environment_instance = btp.SubaccountEnvironmentInstance("cloudfoundryIndex/subaccountEnvironmentInstanceSubaccountEnvironmentInstance",
            subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
            environment_type="cloudfoundry",
            service_name="cloudfoundry",
            plan_name="standard",
            parameters=json.dumps({
                "instance_name": "my-cf-org-name",
            }),
            timeouts=btp.SubaccountEnvironmentInstanceTimeoutsArgs(
                create="1h",
                update="35m",
                delete="30m",
            ))
        # creates a kyma environment in a given account
        # NOTE: for the available parameter values, check https://help.sap.com/docs/btp/sap-business-technology-platform/available-plans-in-kyma-environment
        kyma = btp.SubaccountEnvironmentInstance("kyma",
            subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
            environment_type="kyma",
            service_name="kymaruntime",
            plan_name="aws",
            parameters=json.dumps({
                "name": "my-kyma-environment",
                "region": "us-east-1",
                "machine_type": "mx5.xlarge",
                "auto_scaler_min": 3,
                "auto_scaler_max": 20,
            }),
            timeouts=btp.SubaccountEnvironmentInstanceTimeoutsArgs(
                create="1h",
                update="35m",
                delete="1h",
            ))
        ```

        ## Import

        terraform

        ```sh
         $ pulumi import btp:index/subaccountEnvironmentInstance:SubaccountEnvironmentInstance <resource_name> <subaccount_id>,<environment_instance_id>
        ```

        ```sh
         $ pulumi import btp:index/subaccountEnvironmentInstance:SubaccountEnvironmentInstance cloudfoundry 6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f,FD9BB73F-F663-4284-A50B-D72EC24FC4E1
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] environment_type: The type of the environment instance that is used.
        :param pulumi.Input[str] landscape_label: The name of the landscape within the logged in region on which the environment instance is created.
        :param pulumi.Input[str] name: The name of the environment instance.
        :param pulumi.Input[str] parameters: The configuration parameters for the environment instance.
        :param pulumi.Input[str] plan_name: The name of the service plan for the environment instance in the corresponding service broker's catalog.
        :param pulumi.Input[str] service_name: The name of the service for the environment instance in the corresponding service broker's catalog.
        :param pulumi.Input[str] subaccount_id: The ID of the subaccount.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SubaccountEnvironmentInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates an environment instance, such as a Cloud Foundry org, in a subaccount.

        __Tips:__
        * You must be assigned to the subaccount admin role.
        * Quota-based environments, such as Kyma, must first be assigned as entitlements to the subaccount.

        __Further documentation:__
        * Cloud Foundry: <https://help.sap.com/docs/btp/sap-business-technology-platform/org-management-using-sap-btp-command-line-interface-btp-cli>
        * Kyma: <https://help.sap.com/docs/btp/sap-business-technology-platform/available-plans-in-kyma-environment>
        * Concept: <https://help.sap.com/docs/btp/sap-business-technology-platform/environments>

        ## Example Usage

        ```python
        import pulumi
        import json
        import lechnerc77_pulumi_btp as btp

        # creates a cloud foundry environment in a given account
        cloudfoundry_subaccount_environment_instance = btp.SubaccountEnvironmentInstance("cloudfoundrySubaccountEnvironmentInstance",
            subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
            environment_type="cloudfoundry",
            service_name="cloudfoundry",
            plan_name="standard",
            parameters=json.dumps({
                "instance_name": "my-cf-org-name",
            }))
        # creates a cloud foundry environment in a given account
        # in additon add a custom timeout for the create and delete operation
        cloudfoundry_index_subaccount_environment_instance_subaccount_environment_instance = btp.SubaccountEnvironmentInstance("cloudfoundryIndex/subaccountEnvironmentInstanceSubaccountEnvironmentInstance",
            subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
            environment_type="cloudfoundry",
            service_name="cloudfoundry",
            plan_name="standard",
            parameters=json.dumps({
                "instance_name": "my-cf-org-name",
            }),
            timeouts=btp.SubaccountEnvironmentInstanceTimeoutsArgs(
                create="1h",
                update="35m",
                delete="30m",
            ))
        # creates a kyma environment in a given account
        # NOTE: for the available parameter values, check https://help.sap.com/docs/btp/sap-business-technology-platform/available-plans-in-kyma-environment
        kyma = btp.SubaccountEnvironmentInstance("kyma",
            subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
            environment_type="kyma",
            service_name="kymaruntime",
            plan_name="aws",
            parameters=json.dumps({
                "name": "my-kyma-environment",
                "region": "us-east-1",
                "machine_type": "mx5.xlarge",
                "auto_scaler_min": 3,
                "auto_scaler_max": 20,
            }),
            timeouts=btp.SubaccountEnvironmentInstanceTimeoutsArgs(
                create="1h",
                update="35m",
                delete="1h",
            ))
        ```

        ## Import

        terraform

        ```sh
         $ pulumi import btp:index/subaccountEnvironmentInstance:SubaccountEnvironmentInstance <resource_name> <subaccount_id>,<environment_instance_id>
        ```

        ```sh
         $ pulumi import btp:index/subaccountEnvironmentInstance:SubaccountEnvironmentInstance cloudfoundry 6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f,FD9BB73F-F663-4284-A50B-D72EC24FC4E1
        ```

        :param str resource_name: The name of the resource.
        :param SubaccountEnvironmentInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SubaccountEnvironmentInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environment_type: Optional[pulumi.Input[str]] = None,
                 landscape_label: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[str]] = None,
                 plan_name: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 subaccount_id: Optional[pulumi.Input[str]] = None,
                 timeouts: Optional[pulumi.Input[pulumi.InputType['SubaccountEnvironmentInstanceTimeoutsArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SubaccountEnvironmentInstanceArgs.__new__(SubaccountEnvironmentInstanceArgs)

            if environment_type is None and not opts.urn:
                raise TypeError("Missing required property 'environment_type'")
            __props__.__dict__["environment_type"] = environment_type
            __props__.__dict__["landscape_label"] = landscape_label
            __props__.__dict__["name"] = name
            if parameters is None and not opts.urn:
                raise TypeError("Missing required property 'parameters'")
            __props__.__dict__["parameters"] = parameters
            if plan_name is None and not opts.urn:
                raise TypeError("Missing required property 'plan_name'")
            __props__.__dict__["plan_name"] = plan_name
            if service_name is None and not opts.urn:
                raise TypeError("Missing required property 'service_name'")
            __props__.__dict__["service_name"] = service_name
            if subaccount_id is None and not opts.urn:
                raise TypeError("Missing required property 'subaccount_id'")
            __props__.__dict__["subaccount_id"] = subaccount_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["broker_id"] = None
            __props__.__dict__["created_date"] = None
            __props__.__dict__["custom_labels"] = None
            __props__.__dict__["dashboard_url"] = None
            __props__.__dict__["description"] = None
            __props__.__dict__["labels"] = None
            __props__.__dict__["last_modified"] = None
            __props__.__dict__["operation"] = None
            __props__.__dict__["plan_id"] = None
            __props__.__dict__["platform_id"] = None
            __props__.__dict__["service_id"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["tenant_id"] = None
            __props__.__dict__["type"] = None
        super(SubaccountEnvironmentInstance, __self__).__init__(
            'btp:index/subaccountEnvironmentInstance:SubaccountEnvironmentInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            broker_id: Optional[pulumi.Input[str]] = None,
            created_date: Optional[pulumi.Input[str]] = None,
            custom_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
            dashboard_url: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            environment_type: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[str]] = None,
            landscape_label: Optional[pulumi.Input[str]] = None,
            last_modified: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            operation: Optional[pulumi.Input[str]] = None,
            parameters: Optional[pulumi.Input[str]] = None,
            plan_id: Optional[pulumi.Input[str]] = None,
            plan_name: Optional[pulumi.Input[str]] = None,
            platform_id: Optional[pulumi.Input[str]] = None,
            service_id: Optional[pulumi.Input[str]] = None,
            service_name: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            subaccount_id: Optional[pulumi.Input[str]] = None,
            tenant_id: Optional[pulumi.Input[str]] = None,
            timeouts: Optional[pulumi.Input[pulumi.InputType['SubaccountEnvironmentInstanceTimeoutsArgs']]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'SubaccountEnvironmentInstance':
        """
        Get an existing SubaccountEnvironmentInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] broker_id: The ID of the associated environment broker.
        :param pulumi.Input[str] created_date: The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] custom_labels: The set of words or phrases assigned to the environment instance.
        :param pulumi.Input[str] dashboard_url: The URL of the service dashboard, which is a web-based management user interface for the service instances.
        :param pulumi.Input[str] description: The description of the environment instance.
        :param pulumi.Input[str] environment_type: The type of the environment instance that is used.
        :param pulumi.Input[str] labels: The Broker-specified key-value pairs that specify attributes of an environment instance.
        :param pulumi.Input[str] landscape_label: The name of the landscape within the logged in region on which the environment instance is created.
        :param pulumi.Input[str] last_modified: The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param pulumi.Input[str] name: The name of the environment instance.
        :param pulumi.Input[str] operation: An identifier that represents the last operation. This ID is returned by the environment brokers.
        :param pulumi.Input[str] parameters: The configuration parameters for the environment instance.
        :param pulumi.Input[str] plan_id: The ID of the service plan for the environment instance in the corresponding service broker's catalog.
        :param pulumi.Input[str] plan_name: The name of the service plan for the environment instance in the corresponding service broker's catalog.
        :param pulumi.Input[str] platform_id: The ID of the platform for the environment instance in the corresponding service broker's catalog.
        :param pulumi.Input[str] service_id: The ID of the service for the environment instance in the corresponding service broker's catalog.
        :param pulumi.Input[str] service_name: The name of the service for the environment instance in the corresponding service broker's catalog.
        :param pulumi.Input[str] state: The current state of the environment instance. Possible values are:
        :param pulumi.Input[str] subaccount_id: The ID of the subaccount.
        :param pulumi.Input[str] tenant_id: The ID of the tenant that owns the environment instance.
        :param pulumi.Input[str] type: The last provisioning operation on the environment instance. Possible values are: | type | description | | --- | --- | |
               `Provision` | The environment instance is created. | | `Update` | The environment instance is changed. | | `Deprovision`
               | The environment instance is deleted. |
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SubaccountEnvironmentInstanceState.__new__(_SubaccountEnvironmentInstanceState)

        __props__.__dict__["broker_id"] = broker_id
        __props__.__dict__["created_date"] = created_date
        __props__.__dict__["custom_labels"] = custom_labels
        __props__.__dict__["dashboard_url"] = dashboard_url
        __props__.__dict__["description"] = description
        __props__.__dict__["environment_type"] = environment_type
        __props__.__dict__["labels"] = labels
        __props__.__dict__["landscape_label"] = landscape_label
        __props__.__dict__["last_modified"] = last_modified
        __props__.__dict__["name"] = name
        __props__.__dict__["operation"] = operation
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["plan_id"] = plan_id
        __props__.__dict__["plan_name"] = plan_name
        __props__.__dict__["platform_id"] = platform_id
        __props__.__dict__["service_id"] = service_id
        __props__.__dict__["service_name"] = service_name
        __props__.__dict__["state"] = state
        __props__.__dict__["subaccount_id"] = subaccount_id
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["type"] = type
        return SubaccountEnvironmentInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="brokerId")
    def broker_id(self) -> pulumi.Output[str]:
        """
        The ID of the associated environment broker.
        """
        return pulumi.get(self, "broker_id")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> pulumi.Output[str]:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter(name="customLabels")
    def custom_labels(self) -> pulumi.Output[Mapping[str, Sequence[str]]]:
        """
        The set of words or phrases assigned to the environment instance.
        """
        return pulumi.get(self, "custom_labels")

    @property
    @pulumi.getter(name="dashboardUrl")
    def dashboard_url(self) -> pulumi.Output[str]:
        """
        The URL of the service dashboard, which is a web-based management user interface for the service instances.
        """
        return pulumi.get(self, "dashboard_url")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the environment instance.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> pulumi.Output[str]:
        """
        The type of the environment instance that is used.
        """
        return pulumi.get(self, "environment_type")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[str]:
        """
        The Broker-specified key-value pairs that specify attributes of an environment instance.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="landscapeLabel")
    def landscape_label(self) -> pulumi.Output[str]:
        """
        The name of the landscape within the logged in region on which the environment instance is created.
        """
        return pulumi.get(self, "landscape_label")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> pulumi.Output[str]:
        """
        The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the environment instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Output[str]:
        """
        An identifier that represents the last operation. This ID is returned by the environment brokers.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[str]:
        """
        The configuration parameters for the environment instance.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> pulumi.Output[str]:
        """
        The ID of the service plan for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "plan_id")

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> pulumi.Output[str]:
        """
        The name of the service plan for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "plan_name")

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> pulumi.Output[str]:
        """
        The ID of the platform for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "platform_id")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[str]:
        """
        The ID of the service for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Output[str]:
        """
        The name of the service for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The current state of the environment instance. Possible values are:
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subaccountId")
    def subaccount_id(self) -> pulumi.Output[str]:
        """
        The ID of the subaccount.
        """
        return pulumi.get(self, "subaccount_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[str]:
        """
        The ID of the tenant that owns the environment instance.
        """
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.SubaccountEnvironmentInstanceTimeouts']]:
        return pulumi.get(self, "timeouts")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The last provisioning operation on the environment instance. Possible values are: | type | description | | --- | --- | |
        `Provision` | The environment instance is created. | | `Update` | The environment instance is changed. | | `Deprovision`
        | The environment instance is deleted. |
        """
        return pulumi.get(self, "type")

