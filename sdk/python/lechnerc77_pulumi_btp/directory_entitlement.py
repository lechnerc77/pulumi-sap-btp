# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DirectoryEntitlementArgs', 'DirectoryEntitlement']

@pulumi.input_type
class DirectoryEntitlementArgs:
    def __init__(__self__, *,
                 directory_id: pulumi.Input[str],
                 plan_name: pulumi.Input[str],
                 service_name: pulumi.Input[str],
                 amount: Optional[pulumi.Input[int]] = None,
                 auto_assign: Optional[pulumi.Input[bool]] = None,
                 auto_distribute_amount: Optional[pulumi.Input[int]] = None,
                 distribute: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a DirectoryEntitlement resource.
        :param pulumi.Input[str] directory_id: The ID of the directory.
        :param pulumi.Input[str] plan_name: The name of the entitled service plan.
        :param pulumi.Input[str] service_name: The name of the entitled service.
        :param pulumi.Input[int] amount: The quota assigned to the directory.
        :param pulumi.Input[bool] auto_assign: Determines whether the plans of entitlements that have a numeric quota with the amount specified in `auto_distribute_amount` are automatically allocated to any new subaccount that is added to the directory in the future. For entitlements without a numeric quota, it shows if the plan are assigned to any new subaccount that is added to the directory in the future (`auto_distribute_amount` is not needed). If the `distribute` parameter is set, the same assignment is also made to all subaccounts currently in the directory. Entitlements are subject to available quota in the directory.
        :param pulumi.Input[int] auto_distribute_amount: The quota of the specified plan automatically allocated to any new subaccount that is created in the future in the directory. When applying this option, `auto_assign` and/or `distribute` must also be set. Applies only to entitlements that have a numeric quota.
        :param pulumi.Input[bool] distribute: Defines the assignment of the plan with the quota specified in `auto_distribute_amount` to subaccounts currently located in the specified directory. For entitlements without a numeric quota, the plan is assigned to the subaccounts currently located in the directory (`auto_distribute_amount` is not needed). When applying this option, `auto_assign` must also be set.
        """
        pulumi.set(__self__, "directory_id", directory_id)
        pulumi.set(__self__, "plan_name", plan_name)
        pulumi.set(__self__, "service_name", service_name)
        if amount is not None:
            pulumi.set(__self__, "amount", amount)
        if auto_assign is not None:
            pulumi.set(__self__, "auto_assign", auto_assign)
        if auto_distribute_amount is not None:
            pulumi.set(__self__, "auto_distribute_amount", auto_distribute_amount)
        if distribute is not None:
            pulumi.set(__self__, "distribute", distribute)

    @property
    @pulumi.getter(name="directoryId")
    def directory_id(self) -> pulumi.Input[str]:
        """
        The ID of the directory.
        """
        return pulumi.get(self, "directory_id")

    @directory_id.setter
    def directory_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "directory_id", value)

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> pulumi.Input[str]:
        """
        The name of the entitled service plan.
        """
        return pulumi.get(self, "plan_name")

    @plan_name.setter
    def plan_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan_name", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        """
        The name of the entitled service.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def amount(self) -> Optional[pulumi.Input[int]]:
        """
        The quota assigned to the directory.
        """
        return pulumi.get(self, "amount")

    @amount.setter
    def amount(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "amount", value)

    @property
    @pulumi.getter(name="autoAssign")
    def auto_assign(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether the plans of entitlements that have a numeric quota with the amount specified in `auto_distribute_amount` are automatically allocated to any new subaccount that is added to the directory in the future. For entitlements without a numeric quota, it shows if the plan are assigned to any new subaccount that is added to the directory in the future (`auto_distribute_amount` is not needed). If the `distribute` parameter is set, the same assignment is also made to all subaccounts currently in the directory. Entitlements are subject to available quota in the directory.
        """
        return pulumi.get(self, "auto_assign")

    @auto_assign.setter
    def auto_assign(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_assign", value)

    @property
    @pulumi.getter(name="autoDistributeAmount")
    def auto_distribute_amount(self) -> Optional[pulumi.Input[int]]:
        """
        The quota of the specified plan automatically allocated to any new subaccount that is created in the future in the directory. When applying this option, `auto_assign` and/or `distribute` must also be set. Applies only to entitlements that have a numeric quota.
        """
        return pulumi.get(self, "auto_distribute_amount")

    @auto_distribute_amount.setter
    def auto_distribute_amount(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_distribute_amount", value)

    @property
    @pulumi.getter
    def distribute(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines the assignment of the plan with the quota specified in `auto_distribute_amount` to subaccounts currently located in the specified directory. For entitlements without a numeric quota, the plan is assigned to the subaccounts currently located in the directory (`auto_distribute_amount` is not needed). When applying this option, `auto_assign` must also be set.
        """
        return pulumi.get(self, "distribute")

    @distribute.setter
    def distribute(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "distribute", value)


@pulumi.input_type
class _DirectoryEntitlementState:
    def __init__(__self__, *,
                 amount: Optional[pulumi.Input[int]] = None,
                 auto_assign: Optional[pulumi.Input[bool]] = None,
                 auto_distribute_amount: Optional[pulumi.Input[int]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 directory_id: Optional[pulumi.Input[str]] = None,
                 distribute: Optional[pulumi.Input[bool]] = None,
                 plan_id: Optional[pulumi.Input[str]] = None,
                 plan_name: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DirectoryEntitlement resources.
        :param pulumi.Input[int] amount: The quota assigned to the directory.
        :param pulumi.Input[bool] auto_assign: Determines whether the plans of entitlements that have a numeric quota with the amount specified in `auto_distribute_amount` are automatically allocated to any new subaccount that is added to the directory in the future. For entitlements without a numeric quota, it shows if the plan are assigned to any new subaccount that is added to the directory in the future (`auto_distribute_amount` is not needed). If the `distribute` parameter is set, the same assignment is also made to all subaccounts currently in the directory. Entitlements are subject to available quota in the directory.
        :param pulumi.Input[int] auto_distribute_amount: The quota of the specified plan automatically allocated to any new subaccount that is created in the future in the directory. When applying this option, `auto_assign` and/or `distribute` must also be set. Applies only to entitlements that have a numeric quota.
        :param pulumi.Input[str] category: The current state of the entitlement. Possible values are:
        :param pulumi.Input[str] directory_id: The ID of the directory.
        :param pulumi.Input[bool] distribute: Defines the assignment of the plan with the quota specified in `auto_distribute_amount` to subaccounts currently located in the specified directory. For entitlements without a numeric quota, the plan is assigned to the subaccounts currently located in the directory (`auto_distribute_amount` is not needed). When applying this option, `auto_assign` must also be set.
        :param pulumi.Input[str] plan_id: The ID of the entitled service plan.
        :param pulumi.Input[str] plan_name: The name of the entitled service plan.
        :param pulumi.Input[str] service_name: The name of the entitled service.
        """
        if amount is not None:
            pulumi.set(__self__, "amount", amount)
        if auto_assign is not None:
            pulumi.set(__self__, "auto_assign", auto_assign)
        if auto_distribute_amount is not None:
            pulumi.set(__self__, "auto_distribute_amount", auto_distribute_amount)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if directory_id is not None:
            pulumi.set(__self__, "directory_id", directory_id)
        if distribute is not None:
            pulumi.set(__self__, "distribute", distribute)
        if plan_id is not None:
            pulumi.set(__self__, "plan_id", plan_id)
        if plan_name is not None:
            pulumi.set(__self__, "plan_name", plan_name)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def amount(self) -> Optional[pulumi.Input[int]]:
        """
        The quota assigned to the directory.
        """
        return pulumi.get(self, "amount")

    @amount.setter
    def amount(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "amount", value)

    @property
    @pulumi.getter(name="autoAssign")
    def auto_assign(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether the plans of entitlements that have a numeric quota with the amount specified in `auto_distribute_amount` are automatically allocated to any new subaccount that is added to the directory in the future. For entitlements without a numeric quota, it shows if the plan are assigned to any new subaccount that is added to the directory in the future (`auto_distribute_amount` is not needed). If the `distribute` parameter is set, the same assignment is also made to all subaccounts currently in the directory. Entitlements are subject to available quota in the directory.
        """
        return pulumi.get(self, "auto_assign")

    @auto_assign.setter
    def auto_assign(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_assign", value)

    @property
    @pulumi.getter(name="autoDistributeAmount")
    def auto_distribute_amount(self) -> Optional[pulumi.Input[int]]:
        """
        The quota of the specified plan automatically allocated to any new subaccount that is created in the future in the directory. When applying this option, `auto_assign` and/or `distribute` must also be set. Applies only to entitlements that have a numeric quota.
        """
        return pulumi.get(self, "auto_distribute_amount")

    @auto_distribute_amount.setter
    def auto_distribute_amount(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "auto_distribute_amount", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        The current state of the entitlement. Possible values are:
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="directoryId")
    def directory_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the directory.
        """
        return pulumi.get(self, "directory_id")

    @directory_id.setter
    def directory_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory_id", value)

    @property
    @pulumi.getter
    def distribute(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines the assignment of the plan with the quota specified in `auto_distribute_amount` to subaccounts currently located in the specified directory. For entitlements without a numeric quota, the plan is assigned to the subaccounts currently located in the directory (`auto_distribute_amount` is not needed). When applying this option, `auto_assign` must also be set.
        """
        return pulumi.get(self, "distribute")

    @distribute.setter
    def distribute(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "distribute", value)

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the entitled service plan.
        """
        return pulumi.get(self, "plan_id")

    @plan_id.setter
    def plan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan_id", value)

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the entitled service plan.
        """
        return pulumi.get(self, "plan_name")

    @plan_name.setter
    def plan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan_name", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the entitled service.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)


class DirectoryEntitlement(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 amount: Optional[pulumi.Input[int]] = None,
                 auto_assign: Optional[pulumi.Input[bool]] = None,
                 auto_distribute_amount: Optional[pulumi.Input[int]] = None,
                 directory_id: Optional[pulumi.Input[str]] = None,
                 distribute: Optional[pulumi.Input[bool]] = None,
                 plan_name: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Assigns the entitlement plan of a service, multitenant application, or environment, to a directory. Note that some environments, such as Cloud Foundry, are available by default to all global accounts and their directorys, and therefore are not made available as entitlements.

        __Tip:__
        You must be assigned to the global account admin or viewer role.

        __Further documentation:__
        <https://help.sap.com/docs/btp/sap-business-technology-platform/entitlements-and-quotas>

        ## Example Usage

        ```python
        import pulumi
        import lechnerc77_pulumi_btp as btp

        # entitle service plan without quota in a directory
        alert_notification_service = btp.DirectoryEntitlement("alertNotificationService",
            directory_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
            plan_name="free",
            service_name="alert-notification")
        # entitle service plan with distribution and auto assignment in a directory
        uas_reporting = btp.DirectoryEntitlement("uasReporting",
            auto_assign=True,
            directory_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
            distribute=True,
            plan_name="free",
            service_name="alert-notification")
        ```

        ## Import

        terraform

        ```sh
         $ pulumi import btp:index/directoryEntitlement:DirectoryEntitlement <resource_name> <subaccount_id>,<service_name>,<plan_name>
        ```

        ```sh
         $ pulumi import btp:index/directoryEntitlement:DirectoryEntitlement alert_notification_service 6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f,alert-notification,free
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] amount: The quota assigned to the directory.
        :param pulumi.Input[bool] auto_assign: Determines whether the plans of entitlements that have a numeric quota with the amount specified in `auto_distribute_amount` are automatically allocated to any new subaccount that is added to the directory in the future. For entitlements without a numeric quota, it shows if the plan are assigned to any new subaccount that is added to the directory in the future (`auto_distribute_amount` is not needed). If the `distribute` parameter is set, the same assignment is also made to all subaccounts currently in the directory. Entitlements are subject to available quota in the directory.
        :param pulumi.Input[int] auto_distribute_amount: The quota of the specified plan automatically allocated to any new subaccount that is created in the future in the directory. When applying this option, `auto_assign` and/or `distribute` must also be set. Applies only to entitlements that have a numeric quota.
        :param pulumi.Input[str] directory_id: The ID of the directory.
        :param pulumi.Input[bool] distribute: Defines the assignment of the plan with the quota specified in `auto_distribute_amount` to subaccounts currently located in the specified directory. For entitlements without a numeric quota, the plan is assigned to the subaccounts currently located in the directory (`auto_distribute_amount` is not needed). When applying this option, `auto_assign` must also be set.
        :param pulumi.Input[str] plan_name: The name of the entitled service plan.
        :param pulumi.Input[str] service_name: The name of the entitled service.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DirectoryEntitlementArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Assigns the entitlement plan of a service, multitenant application, or environment, to a directory. Note that some environments, such as Cloud Foundry, are available by default to all global accounts and their directorys, and therefore are not made available as entitlements.

        __Tip:__
        You must be assigned to the global account admin or viewer role.

        __Further documentation:__
        <https://help.sap.com/docs/btp/sap-business-technology-platform/entitlements-and-quotas>

        ## Example Usage

        ```python
        import pulumi
        import lechnerc77_pulumi_btp as btp

        # entitle service plan without quota in a directory
        alert_notification_service = btp.DirectoryEntitlement("alertNotificationService",
            directory_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
            plan_name="free",
            service_name="alert-notification")
        # entitle service plan with distribution and auto assignment in a directory
        uas_reporting = btp.DirectoryEntitlement("uasReporting",
            auto_assign=True,
            directory_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
            distribute=True,
            plan_name="free",
            service_name="alert-notification")
        ```

        ## Import

        terraform

        ```sh
         $ pulumi import btp:index/directoryEntitlement:DirectoryEntitlement <resource_name> <subaccount_id>,<service_name>,<plan_name>
        ```

        ```sh
         $ pulumi import btp:index/directoryEntitlement:DirectoryEntitlement alert_notification_service 6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f,alert-notification,free
        ```

        :param str resource_name: The name of the resource.
        :param DirectoryEntitlementArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DirectoryEntitlementArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 amount: Optional[pulumi.Input[int]] = None,
                 auto_assign: Optional[pulumi.Input[bool]] = None,
                 auto_distribute_amount: Optional[pulumi.Input[int]] = None,
                 directory_id: Optional[pulumi.Input[str]] = None,
                 distribute: Optional[pulumi.Input[bool]] = None,
                 plan_name: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DirectoryEntitlementArgs.__new__(DirectoryEntitlementArgs)

            __props__.__dict__["amount"] = amount
            __props__.__dict__["auto_assign"] = auto_assign
            __props__.__dict__["auto_distribute_amount"] = auto_distribute_amount
            if directory_id is None and not opts.urn:
                raise TypeError("Missing required property 'directory_id'")
            __props__.__dict__["directory_id"] = directory_id
            __props__.__dict__["distribute"] = distribute
            if plan_name is None and not opts.urn:
                raise TypeError("Missing required property 'plan_name'")
            __props__.__dict__["plan_name"] = plan_name
            if service_name is None and not opts.urn:
                raise TypeError("Missing required property 'service_name'")
            __props__.__dict__["service_name"] = service_name
            __props__.__dict__["category"] = None
            __props__.__dict__["plan_id"] = None
        super(DirectoryEntitlement, __self__).__init__(
            'btp:index/directoryEntitlement:DirectoryEntitlement',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            amount: Optional[pulumi.Input[int]] = None,
            auto_assign: Optional[pulumi.Input[bool]] = None,
            auto_distribute_amount: Optional[pulumi.Input[int]] = None,
            category: Optional[pulumi.Input[str]] = None,
            directory_id: Optional[pulumi.Input[str]] = None,
            distribute: Optional[pulumi.Input[bool]] = None,
            plan_id: Optional[pulumi.Input[str]] = None,
            plan_name: Optional[pulumi.Input[str]] = None,
            service_name: Optional[pulumi.Input[str]] = None) -> 'DirectoryEntitlement':
        """
        Get an existing DirectoryEntitlement resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] amount: The quota assigned to the directory.
        :param pulumi.Input[bool] auto_assign: Determines whether the plans of entitlements that have a numeric quota with the amount specified in `auto_distribute_amount` are automatically allocated to any new subaccount that is added to the directory in the future. For entitlements without a numeric quota, it shows if the plan are assigned to any new subaccount that is added to the directory in the future (`auto_distribute_amount` is not needed). If the `distribute` parameter is set, the same assignment is also made to all subaccounts currently in the directory. Entitlements are subject to available quota in the directory.
        :param pulumi.Input[int] auto_distribute_amount: The quota of the specified plan automatically allocated to any new subaccount that is created in the future in the directory. When applying this option, `auto_assign` and/or `distribute` must also be set. Applies only to entitlements that have a numeric quota.
        :param pulumi.Input[str] category: The current state of the entitlement. Possible values are:
        :param pulumi.Input[str] directory_id: The ID of the directory.
        :param pulumi.Input[bool] distribute: Defines the assignment of the plan with the quota specified in `auto_distribute_amount` to subaccounts currently located in the specified directory. For entitlements without a numeric quota, the plan is assigned to the subaccounts currently located in the directory (`auto_distribute_amount` is not needed). When applying this option, `auto_assign` must also be set.
        :param pulumi.Input[str] plan_id: The ID of the entitled service plan.
        :param pulumi.Input[str] plan_name: The name of the entitled service plan.
        :param pulumi.Input[str] service_name: The name of the entitled service.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DirectoryEntitlementState.__new__(_DirectoryEntitlementState)

        __props__.__dict__["amount"] = amount
        __props__.__dict__["auto_assign"] = auto_assign
        __props__.__dict__["auto_distribute_amount"] = auto_distribute_amount
        __props__.__dict__["category"] = category
        __props__.__dict__["directory_id"] = directory_id
        __props__.__dict__["distribute"] = distribute
        __props__.__dict__["plan_id"] = plan_id
        __props__.__dict__["plan_name"] = plan_name
        __props__.__dict__["service_name"] = service_name
        return DirectoryEntitlement(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def amount(self) -> pulumi.Output[int]:
        """
        The quota assigned to the directory.
        """
        return pulumi.get(self, "amount")

    @property
    @pulumi.getter(name="autoAssign")
    def auto_assign(self) -> pulumi.Output[bool]:
        """
        Determines whether the plans of entitlements that have a numeric quota with the amount specified in `auto_distribute_amount` are automatically allocated to any new subaccount that is added to the directory in the future. For entitlements without a numeric quota, it shows if the plan are assigned to any new subaccount that is added to the directory in the future (`auto_distribute_amount` is not needed). If the `distribute` parameter is set, the same assignment is also made to all subaccounts currently in the directory. Entitlements are subject to available quota in the directory.
        """
        return pulumi.get(self, "auto_assign")

    @property
    @pulumi.getter(name="autoDistributeAmount")
    def auto_distribute_amount(self) -> pulumi.Output[int]:
        """
        The quota of the specified plan automatically allocated to any new subaccount that is created in the future in the directory. When applying this option, `auto_assign` and/or `distribute` must also be set. Applies only to entitlements that have a numeric quota.
        """
        return pulumi.get(self, "auto_distribute_amount")

    @property
    @pulumi.getter
    def category(self) -> pulumi.Output[str]:
        """
        The current state of the entitlement. Possible values are:
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="directoryId")
    def directory_id(self) -> pulumi.Output[str]:
        """
        The ID of the directory.
        """
        return pulumi.get(self, "directory_id")

    @property
    @pulumi.getter
    def distribute(self) -> pulumi.Output[bool]:
        """
        Defines the assignment of the plan with the quota specified in `auto_distribute_amount` to subaccounts currently located in the specified directory. For entitlements without a numeric quota, the plan is assigned to the subaccounts currently located in the directory (`auto_distribute_amount` is not needed). When applying this option, `auto_assign` must also be set.
        """
        return pulumi.get(self, "distribute")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> pulumi.Output[str]:
        """
        The ID of the entitled service plan.
        """
        return pulumi.get(self, "plan_id")

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> pulumi.Output[str]:
        """
        The name of the entitled service plan.
        """
        return pulumi.get(self, "plan_name")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Output[str]:
        """
        The name of the entitled service.
        """
        return pulumi.get(self, "service_name")

