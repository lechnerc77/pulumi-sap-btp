# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 globalaccount: pulumi.Input[str],
                 cli_server_url: Optional[pulumi.Input[str]] = None,
                 idp: Optional[pulumi.Input[str]] = None,
                 idtoken: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 tls_client_certificate: Optional[pulumi.Input[str]] = None,
                 tls_client_key: Optional[pulumi.Input[str]] = None,
                 tls_idp_url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[str] globalaccount: The subdomain of the global account in which you want to manage resources. To be found in the cockpit, in the global
               account view.
        :param pulumi.Input[str] cli_server_url: The URL of the BTP CLI server (e.g. `https://cli.btp.cloud.sap`).
        :param pulumi.Input[str] idp: The identity provider to be used for authentication (default: SAP ID service with origin `sap.default`).
        :param pulumi.Input[str] idtoken: A valid id token. To be provided instead of 'username' and 'password'. This can also be sourced from the `BTP_IDTOKEN`
               environment variable. (SAP-internal usage only)
        :param pulumi.Input[str] password: Your password. Note that two-factor authentication is not supported. This can also be sourced from the `BTP_PASSWORD`
               environment variable.
        :param pulumi.Input[str] tls_client_certificate: PEM encoded certificate (only required for x509 auth).
        :param pulumi.Input[str] tls_client_key: PEM encoded private key (only required for x509 auth).
        :param pulumi.Input[str] tls_idp_url: The URL of the identity provider to be used for authentication (only required for x509 auth).
        :param pulumi.Input[str] username: Your user name, usually an e-mail address. This can also be sourced from the `BTP_USERNAME` environment variable.
        """
        pulumi.set(__self__, "globalaccount", globalaccount)
        if cli_server_url is not None:
            pulumi.set(__self__, "cli_server_url", cli_server_url)
        if idp is not None:
            pulumi.set(__self__, "idp", idp)
        if idtoken is not None:
            pulumi.set(__self__, "idtoken", idtoken)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if tls_client_certificate is not None:
            pulumi.set(__self__, "tls_client_certificate", tls_client_certificate)
        if tls_client_key is not None:
            pulumi.set(__self__, "tls_client_key", tls_client_key)
        if tls_idp_url is not None:
            pulumi.set(__self__, "tls_idp_url", tls_idp_url)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def globalaccount(self) -> pulumi.Input[str]:
        """
        The subdomain of the global account in which you want to manage resources. To be found in the cockpit, in the global
        account view.
        """
        return pulumi.get(self, "globalaccount")

    @globalaccount.setter
    def globalaccount(self, value: pulumi.Input[str]):
        pulumi.set(self, "globalaccount", value)

    @property
    @pulumi.getter(name="cliServerUrl")
    def cli_server_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the BTP CLI server (e.g. `https://cli.btp.cloud.sap`).
        """
        return pulumi.get(self, "cli_server_url")

    @cli_server_url.setter
    def cli_server_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cli_server_url", value)

    @property
    @pulumi.getter
    def idp(self) -> Optional[pulumi.Input[str]]:
        """
        The identity provider to be used for authentication (default: SAP ID service with origin `sap.default`).
        """
        return pulumi.get(self, "idp")

    @idp.setter
    def idp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp", value)

    @property
    @pulumi.getter
    def idtoken(self) -> Optional[pulumi.Input[str]]:
        """
        A valid id token. To be provided instead of 'username' and 'password'. This can also be sourced from the `BTP_IDTOKEN`
        environment variable. (SAP-internal usage only)
        """
        return pulumi.get(self, "idtoken")

    @idtoken.setter
    def idtoken(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idtoken", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Your password. Note that two-factor authentication is not supported. This can also be sourced from the `BTP_PASSWORD`
        environment variable.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="tlsClientCertificate")
    def tls_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        PEM encoded certificate (only required for x509 auth).
        """
        return pulumi.get(self, "tls_client_certificate")

    @tls_client_certificate.setter
    def tls_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_client_certificate", value)

    @property
    @pulumi.getter(name="tlsClientKey")
    def tls_client_key(self) -> Optional[pulumi.Input[str]]:
        """
        PEM encoded private key (only required for x509 auth).
        """
        return pulumi.get(self, "tls_client_key")

    @tls_client_key.setter
    def tls_client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_client_key", value)

    @property
    @pulumi.getter(name="tlsIdpUrl")
    def tls_idp_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the identity provider to be used for authentication (only required for x509 auth).
        """
        return pulumi.get(self, "tls_idp_url")

    @tls_idp_url.setter
    def tls_idp_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_idp_url", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Your user name, usually an e-mail address. This can also be sourced from the `BTP_USERNAME` environment variable.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cli_server_url: Optional[pulumi.Input[str]] = None,
                 globalaccount: Optional[pulumi.Input[str]] = None,
                 idp: Optional[pulumi.Input[str]] = None,
                 idtoken: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 tls_client_certificate: Optional[pulumi.Input[str]] = None,
                 tls_client_key: Optional[pulumi.Input[str]] = None,
                 tls_idp_url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the btp package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cli_server_url: The URL of the BTP CLI server (e.g. `https://cli.btp.cloud.sap`).
        :param pulumi.Input[str] globalaccount: The subdomain of the global account in which you want to manage resources. To be found in the cockpit, in the global
               account view.
        :param pulumi.Input[str] idp: The identity provider to be used for authentication (default: SAP ID service with origin `sap.default`).
        :param pulumi.Input[str] idtoken: A valid id token. To be provided instead of 'username' and 'password'. This can also be sourced from the `BTP_IDTOKEN`
               environment variable. (SAP-internal usage only)
        :param pulumi.Input[str] password: Your password. Note that two-factor authentication is not supported. This can also be sourced from the `BTP_PASSWORD`
               environment variable.
        :param pulumi.Input[str] tls_client_certificate: PEM encoded certificate (only required for x509 auth).
        :param pulumi.Input[str] tls_client_key: PEM encoded private key (only required for x509 auth).
        :param pulumi.Input[str] tls_idp_url: The URL of the identity provider to be used for authentication (only required for x509 auth).
        :param pulumi.Input[str] username: Your user name, usually an e-mail address. This can also be sourced from the `BTP_USERNAME` environment variable.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProviderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the btp package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cli_server_url: Optional[pulumi.Input[str]] = None,
                 globalaccount: Optional[pulumi.Input[str]] = None,
                 idp: Optional[pulumi.Input[str]] = None,
                 idtoken: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 tls_client_certificate: Optional[pulumi.Input[str]] = None,
                 tls_client_key: Optional[pulumi.Input[str]] = None,
                 tls_idp_url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["cli_server_url"] = cli_server_url
            if globalaccount is None and not opts.urn:
                raise TypeError("Missing required property 'globalaccount'")
            __props__.__dict__["globalaccount"] = globalaccount
            __props__.__dict__["idp"] = idp
            __props__.__dict__["idtoken"] = None if idtoken is None else pulumi.Output.secret(idtoken)
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["tls_client_certificate"] = tls_client_certificate
            __props__.__dict__["tls_client_key"] = tls_client_key
            __props__.__dict__["tls_idp_url"] = tls_idp_url
            __props__.__dict__["username"] = username
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["idtoken", "password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Provider, __self__).__init__(
            'btp',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="cliServerUrl")
    def cli_server_url(self) -> pulumi.Output[Optional[str]]:
        """
        The URL of the BTP CLI server (e.g. `https://cli.btp.cloud.sap`).
        """
        return pulumi.get(self, "cli_server_url")

    @property
    @pulumi.getter
    def globalaccount(self) -> pulumi.Output[str]:
        """
        The subdomain of the global account in which you want to manage resources. To be found in the cockpit, in the global
        account view.
        """
        return pulumi.get(self, "globalaccount")

    @property
    @pulumi.getter
    def idp(self) -> pulumi.Output[Optional[str]]:
        """
        The identity provider to be used for authentication (default: SAP ID service with origin `sap.default`).
        """
        return pulumi.get(self, "idp")

    @property
    @pulumi.getter
    def idtoken(self) -> pulumi.Output[Optional[str]]:
        """
        A valid id token. To be provided instead of 'username' and 'password'. This can also be sourced from the `BTP_IDTOKEN`
        environment variable. (SAP-internal usage only)
        """
        return pulumi.get(self, "idtoken")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Your password. Note that two-factor authentication is not supported. This can also be sourced from the `BTP_PASSWORD`
        environment variable.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="tlsClientCertificate")
    def tls_client_certificate(self) -> pulumi.Output[Optional[str]]:
        """
        PEM encoded certificate (only required for x509 auth).
        """
        return pulumi.get(self, "tls_client_certificate")

    @property
    @pulumi.getter(name="tlsClientKey")
    def tls_client_key(self) -> pulumi.Output[Optional[str]]:
        """
        PEM encoded private key (only required for x509 auth).
        """
        return pulumi.get(self, "tls_client_key")

    @property
    @pulumi.getter(name="tlsIdpUrl")
    def tls_idp_url(self) -> pulumi.Output[Optional[str]]:
        """
        The URL of the identity provider to be used for authentication (only required for x509 auth).
        """
        return pulumi.get(self, "tls_idp_url")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[str]]:
        """
        Your user name, usually an e-mail address. This can also be sourced from the `BTP_USERNAME` environment variable.
        """
        return pulumi.get(self, "username")

