# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['GlobalaccountRoleCollectionAssignmentArgs', 'GlobalaccountRoleCollectionAssignment']

@pulumi.input_type
class GlobalaccountRoleCollectionAssignmentArgs:
    def __init__(__self__, *,
                 role_collection_name: pulumi.Input[str],
                 attribute_name: Optional[pulumi.Input[str]] = None,
                 attribute_value: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a GlobalaccountRoleCollectionAssignment resource.
        :param pulumi.Input[str] role_collection_name: The name of the role collection.
        :param pulumi.Input[str] attribute_name: The name of the attribute to assign.
        :param pulumi.Input[str] attribute_value: The value of the attribute to assign.
        :param pulumi.Input[str] group_name: The name of the group to assign.
        :param pulumi.Input[str] origin: The identity provider that hosts the user or group. The default value is `ldap`.
        :param pulumi.Input[str] user_name: The name of the user to assign.
        """
        pulumi.set(__self__, "role_collection_name", role_collection_name)
        if attribute_name is not None:
            pulumi.set(__self__, "attribute_name", attribute_name)
        if attribute_value is not None:
            pulumi.set(__self__, "attribute_value", attribute_value)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="roleCollectionName")
    def role_collection_name(self) -> pulumi.Input[str]:
        """
        The name of the role collection.
        """
        return pulumi.get(self, "role_collection_name")

    @role_collection_name.setter
    def role_collection_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_collection_name", value)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the attribute to assign.
        """
        return pulumi.get(self, "attribute_name")

    @attribute_name.setter
    def attribute_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_name", value)

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the attribute to assign.
        """
        return pulumi.get(self, "attribute_value")

    @attribute_value.setter
    def attribute_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_value", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the group to assign.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[str]]:
        """
        The identity provider that hosts the user or group. The default value is `ldap`.
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the user to assign.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


@pulumi.input_type
class _GlobalaccountRoleCollectionAssignmentState:
    def __init__(__self__, *,
                 attribute_name: Optional[pulumi.Input[str]] = None,
                 attribute_value: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 role_collection_name: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering GlobalaccountRoleCollectionAssignment resources.
        :param pulumi.Input[str] attribute_name: The name of the attribute to assign.
        :param pulumi.Input[str] attribute_value: The value of the attribute to assign.
        :param pulumi.Input[str] group_name: The name of the group to assign.
        :param pulumi.Input[str] origin: The identity provider that hosts the user or group. The default value is `ldap`.
        :param pulumi.Input[str] role_collection_name: The name of the role collection.
        :param pulumi.Input[str] user_name: The name of the user to assign.
        """
        if attribute_name is not None:
            pulumi.set(__self__, "attribute_name", attribute_name)
        if attribute_value is not None:
            pulumi.set(__self__, "attribute_value", attribute_value)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if role_collection_name is not None:
            pulumi.set(__self__, "role_collection_name", role_collection_name)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the attribute to assign.
        """
        return pulumi.get(self, "attribute_name")

    @attribute_name.setter
    def attribute_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_name", value)

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the attribute to assign.
        """
        return pulumi.get(self, "attribute_value")

    @attribute_value.setter
    def attribute_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_value", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the group to assign.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[str]]:
        """
        The identity provider that hosts the user or group. The default value is `ldap`.
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter(name="roleCollectionName")
    def role_collection_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the role collection.
        """
        return pulumi.get(self, "role_collection_name")

    @role_collection_name.setter
    def role_collection_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_collection_name", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the user to assign.
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


class GlobalaccountRoleCollectionAssignment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attribute_name: Optional[pulumi.Input[str]] = None,
                 attribute_value: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 role_collection_name: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Assigns a user or a group to a role collection on global account level.

        ## Example Usage

        ```python
        import pulumi
        import lechnerc77_pulumi_btp as btp

        # assign a user to a role collection on global account level
        jd = btp.GlobalaccountRoleCollectionAssignment("jd",
            role_collection_name="Global Account Viewer",
            user_name="john.doe@mycompany.com")
        # assign a group to a role collection on global account level
        globalaccount_viewer_group = btp.GlobalaccountRoleCollectionAssignment("globalaccountViewerGroup",
            group_name="globalaccount-viewer-group",
            role_collection_name="Global Account Viewer")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] attribute_name: The name of the attribute to assign.
        :param pulumi.Input[str] attribute_value: The value of the attribute to assign.
        :param pulumi.Input[str] group_name: The name of the group to assign.
        :param pulumi.Input[str] origin: The identity provider that hosts the user or group. The default value is `ldap`.
        :param pulumi.Input[str] role_collection_name: The name of the role collection.
        :param pulumi.Input[str] user_name: The name of the user to assign.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GlobalaccountRoleCollectionAssignmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Assigns a user or a group to a role collection on global account level.

        ## Example Usage

        ```python
        import pulumi
        import lechnerc77_pulumi_btp as btp

        # assign a user to a role collection on global account level
        jd = btp.GlobalaccountRoleCollectionAssignment("jd",
            role_collection_name="Global Account Viewer",
            user_name="john.doe@mycompany.com")
        # assign a group to a role collection on global account level
        globalaccount_viewer_group = btp.GlobalaccountRoleCollectionAssignment("globalaccountViewerGroup",
            group_name="globalaccount-viewer-group",
            role_collection_name="Global Account Viewer")
        ```

        :param str resource_name: The name of the resource.
        :param GlobalaccountRoleCollectionAssignmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GlobalaccountRoleCollectionAssignmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attribute_name: Optional[pulumi.Input[str]] = None,
                 attribute_value: Optional[pulumi.Input[str]] = None,
                 group_name: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 role_collection_name: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GlobalaccountRoleCollectionAssignmentArgs.__new__(GlobalaccountRoleCollectionAssignmentArgs)

            __props__.__dict__["attribute_name"] = attribute_name
            __props__.__dict__["attribute_value"] = attribute_value
            __props__.__dict__["group_name"] = group_name
            __props__.__dict__["origin"] = origin
            if role_collection_name is None and not opts.urn:
                raise TypeError("Missing required property 'role_collection_name'")
            __props__.__dict__["role_collection_name"] = role_collection_name
            __props__.__dict__["user_name"] = user_name
        super(GlobalaccountRoleCollectionAssignment, __self__).__init__(
            'btp:index/globalaccountRoleCollectionAssignment:GlobalaccountRoleCollectionAssignment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attribute_name: Optional[pulumi.Input[str]] = None,
            attribute_value: Optional[pulumi.Input[str]] = None,
            group_name: Optional[pulumi.Input[str]] = None,
            origin: Optional[pulumi.Input[str]] = None,
            role_collection_name: Optional[pulumi.Input[str]] = None,
            user_name: Optional[pulumi.Input[str]] = None) -> 'GlobalaccountRoleCollectionAssignment':
        """
        Get an existing GlobalaccountRoleCollectionAssignment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] attribute_name: The name of the attribute to assign.
        :param pulumi.Input[str] attribute_value: The value of the attribute to assign.
        :param pulumi.Input[str] group_name: The name of the group to assign.
        :param pulumi.Input[str] origin: The identity provider that hosts the user or group. The default value is `ldap`.
        :param pulumi.Input[str] role_collection_name: The name of the role collection.
        :param pulumi.Input[str] user_name: The name of the user to assign.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GlobalaccountRoleCollectionAssignmentState.__new__(_GlobalaccountRoleCollectionAssignmentState)

        __props__.__dict__["attribute_name"] = attribute_name
        __props__.__dict__["attribute_value"] = attribute_value
        __props__.__dict__["group_name"] = group_name
        __props__.__dict__["origin"] = origin
        __props__.__dict__["role_collection_name"] = role_collection_name
        __props__.__dict__["user_name"] = user_name
        return GlobalaccountRoleCollectionAssignment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the attribute to assign.
        """
        return pulumi.get(self, "attribute_name")

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> pulumi.Output[Optional[str]]:
        """
        The value of the attribute to assign.
        """
        return pulumi.get(self, "attribute_value")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the group to assign.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter
    def origin(self) -> pulumi.Output[str]:
        """
        The identity provider that hosts the user or group. The default value is `ldap`.
        """
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter(name="roleCollectionName")
    def role_collection_name(self) -> pulumi.Output[str]:
        """
        The name of the role collection.
        """
        return pulumi.get(self, "role_collection_name")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the user to assign.
        """
        return pulumi.get(self, "user_name")

