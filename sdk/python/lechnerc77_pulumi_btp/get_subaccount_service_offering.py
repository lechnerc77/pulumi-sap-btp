# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSubaccountServiceOfferingResult',
    'AwaitableGetSubaccountServiceOfferingResult',
    'get_subaccount_service_offering',
    'get_subaccount_service_offering_output',
]

@pulumi.output_type
class GetSubaccountServiceOfferingResult:
    """
    A collection of values returned by getSubaccountServiceOffering.
    """
    def __init__(__self__, allow_context_updates=None, bindable=None, bindings_retrievable=None, broker_id=None, catalog_id=None, catalog_name=None, created_date=None, description=None, id=None, instances_retrievable=None, last_modified=None, name=None, plan_updateable=None, ready=None, subaccount_id=None, tags=None):
        if allow_context_updates and not isinstance(allow_context_updates, bool):
            raise TypeError("Expected argument 'allow_context_updates' to be a bool")
        pulumi.set(__self__, "allow_context_updates", allow_context_updates)
        if bindable and not isinstance(bindable, bool):
            raise TypeError("Expected argument 'bindable' to be a bool")
        pulumi.set(__self__, "bindable", bindable)
        if bindings_retrievable and not isinstance(bindings_retrievable, bool):
            raise TypeError("Expected argument 'bindings_retrievable' to be a bool")
        pulumi.set(__self__, "bindings_retrievable", bindings_retrievable)
        if broker_id and not isinstance(broker_id, str):
            raise TypeError("Expected argument 'broker_id' to be a str")
        pulumi.set(__self__, "broker_id", broker_id)
        if catalog_id and not isinstance(catalog_id, str):
            raise TypeError("Expected argument 'catalog_id' to be a str")
        pulumi.set(__self__, "catalog_id", catalog_id)
        if catalog_name and not isinstance(catalog_name, str):
            raise TypeError("Expected argument 'catalog_name' to be a str")
        pulumi.set(__self__, "catalog_name", catalog_name)
        if created_date and not isinstance(created_date, str):
            raise TypeError("Expected argument 'created_date' to be a str")
        pulumi.set(__self__, "created_date", created_date)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instances_retrievable and not isinstance(instances_retrievable, bool):
            raise TypeError("Expected argument 'instances_retrievable' to be a bool")
        pulumi.set(__self__, "instances_retrievable", instances_retrievable)
        if last_modified and not isinstance(last_modified, str):
            raise TypeError("Expected argument 'last_modified' to be a str")
        pulumi.set(__self__, "last_modified", last_modified)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if plan_updateable and not isinstance(plan_updateable, bool):
            raise TypeError("Expected argument 'plan_updateable' to be a bool")
        pulumi.set(__self__, "plan_updateable", plan_updateable)
        if ready and not isinstance(ready, bool):
            raise TypeError("Expected argument 'ready' to be a bool")
        pulumi.set(__self__, "ready", ready)
        if subaccount_id and not isinstance(subaccount_id, str):
            raise TypeError("Expected argument 'subaccount_id' to be a str")
        pulumi.set(__self__, "subaccount_id", subaccount_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="allowContextUpdates")
    def allow_context_updates(self) -> bool:
        """
        Shows whether the context for the service offering can be updated.
        """
        return pulumi.get(self, "allow_context_updates")

    @property
    @pulumi.getter
    def bindable(self) -> bool:
        """
        Shows whether the service offering is bindable.
        """
        return pulumi.get(self, "bindable")

    @property
    @pulumi.getter(name="bindingsRetrievable")
    def bindings_retrievable(self) -> bool:
        """
        Shows whether the bindings associated with the service offering can be retrieved.
        """
        return pulumi.get(self, "bindings_retrievable")

    @property
    @pulumi.getter(name="brokerId")
    def broker_id(self) -> str:
        """
        The ID of the broker that provides the service plan.
        """
        return pulumi.get(self, "broker_id")

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> str:
        """
        The ID of the service offering as provided by the catalog.
        """
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> str:
        """
        The catalog name of the service offering.
        """
        return pulumi.get(self, "catalog_name")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the service offering.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the service offering.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instancesRetrievable")
    def instances_retrievable(self) -> bool:
        """
        Shows whether the service instances associated with the service offering can be retrieved.
        """
        return pulumi.get(self, "instances_retrievable")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the service offering.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="planUpdateable")
    def plan_updateable(self) -> bool:
        """
        Shows whether the offered plan can be updated.
        """
        return pulumi.get(self, "plan_updateable")

    @property
    @pulumi.getter
    def ready(self) -> bool:
        """
        Shows whether the service offering is ready to be advertised.
        """
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter(name="subaccountId")
    def subaccount_id(self) -> str:
        """
        The ID of the subaccount.
        """
        return pulumi.get(self, "subaccount_id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        The list of tags for the service offering.
        """
        return pulumi.get(self, "tags")


class AwaitableGetSubaccountServiceOfferingResult(GetSubaccountServiceOfferingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubaccountServiceOfferingResult(
            allow_context_updates=self.allow_context_updates,
            bindable=self.bindable,
            bindings_retrievable=self.bindings_retrievable,
            broker_id=self.broker_id,
            catalog_id=self.catalog_id,
            catalog_name=self.catalog_name,
            created_date=self.created_date,
            description=self.description,
            id=self.id,
            instances_retrievable=self.instances_retrievable,
            last_modified=self.last_modified,
            name=self.name,
            plan_updateable=self.plan_updateable,
            ready=self.ready,
            subaccount_id=self.subaccount_id,
            tags=self.tags)


def get_subaccount_service_offering(id: Optional[str] = None,
                                    name: Optional[str] = None,
                                    subaccount_id: Optional[str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubaccountServiceOfferingResult:
    """
    Gets details about a specific service offering such as its ID, name, description, metadata, and the associated service brokers.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    by_id = btp.get_subaccount_service_offering(id="4e953cf1-7eda-4ebb-a58c-02c6ebfe45fb",
        subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    by_name = btp.get_subaccount_service_offering(name="auditlog-management",
        subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    ```


    :param str id: The ID of the service offering.
    :param str name: The name of the service offering.
    :param str subaccount_id: The ID of the subaccount.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['subaccountId'] = subaccount_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('btp:index/getSubaccountServiceOffering:getSubaccountServiceOffering', __args__, opts=opts, typ=GetSubaccountServiceOfferingResult).value

    return AwaitableGetSubaccountServiceOfferingResult(
        allow_context_updates=pulumi.get(__ret__, 'allow_context_updates'),
        bindable=pulumi.get(__ret__, 'bindable'),
        bindings_retrievable=pulumi.get(__ret__, 'bindings_retrievable'),
        broker_id=pulumi.get(__ret__, 'broker_id'),
        catalog_id=pulumi.get(__ret__, 'catalog_id'),
        catalog_name=pulumi.get(__ret__, 'catalog_name'),
        created_date=pulumi.get(__ret__, 'created_date'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        instances_retrievable=pulumi.get(__ret__, 'instances_retrievable'),
        last_modified=pulumi.get(__ret__, 'last_modified'),
        name=pulumi.get(__ret__, 'name'),
        plan_updateable=pulumi.get(__ret__, 'plan_updateable'),
        ready=pulumi.get(__ret__, 'ready'),
        subaccount_id=pulumi.get(__ret__, 'subaccount_id'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_subaccount_service_offering)
def get_subaccount_service_offering_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                                           name: Optional[pulumi.Input[Optional[str]]] = None,
                                           subaccount_id: Optional[pulumi.Input[str]] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSubaccountServiceOfferingResult]:
    """
    Gets details about a specific service offering such as its ID, name, description, metadata, and the associated service brokers.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    by_id = btp.get_subaccount_service_offering(id="4e953cf1-7eda-4ebb-a58c-02c6ebfe45fb",
        subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    by_name = btp.get_subaccount_service_offering(name="auditlog-management",
        subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    ```


    :param str id: The ID of the service offering.
    :param str name: The name of the service offering.
    :param str subaccount_id: The ID of the subaccount.
    """
    ...
