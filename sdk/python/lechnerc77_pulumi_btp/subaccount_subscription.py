# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SubaccountSubscriptionArgs', 'SubaccountSubscription']

@pulumi.input_type
class SubaccountSubscriptionArgs:
    def __init__(__self__, *,
                 app_name: pulumi.Input[str],
                 plan_name: pulumi.Input[str],
                 subaccount_id: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SubaccountSubscription resource.
        :param pulumi.Input[str] app_name: The unique registration name of the deployed multitenant application as defined by the app developer.
        :param pulumi.Input[str] plan_name: The plan name of the application to which the consumer has subscribed.
        :param pulumi.Input[str] subaccount_id: The ID of the subaccount.
        :param pulumi.Input[str] parameters: The parameters of the subscription as a valid JSON object.
        """
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "plan_name", plan_name)
        pulumi.set(__self__, "subaccount_id", subaccount_id)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> pulumi.Input[str]:
        """
        The unique registration name of the deployed multitenant application as defined by the app developer.
        """
        return pulumi.get(self, "app_name")

    @app_name.setter
    def app_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_name", value)

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> pulumi.Input[str]:
        """
        The plan name of the application to which the consumer has subscribed.
        """
        return pulumi.get(self, "plan_name")

    @plan_name.setter
    def plan_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan_name", value)

    @property
    @pulumi.getter(name="subaccountId")
    def subaccount_id(self) -> pulumi.Input[str]:
        """
        The ID of the subaccount.
        """
        return pulumi.get(self, "subaccount_id")

    @subaccount_id.setter
    def subaccount_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subaccount_id", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[str]]:
        """
        The parameters of the subscription as a valid JSON object.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class _SubaccountSubscriptionState:
    def __init__(__self__, *,
                 additional_plan_features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 app_name: Optional[pulumi.Input[str]] = None,
                 authentication_provider: Optional[pulumi.Input[str]] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 commercial_app_name: Optional[pulumi.Input[str]] = None,
                 created_date: Optional[pulumi.Input[str]] = None,
                 customer_developed: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 formation_solution_name: Optional[pulumi.Input[str]] = None,
                 globalaccount_id: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 last_modified: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[str]] = None,
                 plan_name: Optional[pulumi.Input[str]] = None,
                 platform_entity_id: Optional[pulumi.Input[str]] = None,
                 quota: Optional[pulumi.Input[int]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 subaccount_id: Optional[pulumi.Input[str]] = None,
                 subscribed_subaccount_id: Optional[pulumi.Input[str]] = None,
                 subscribed_tenant_id: Optional[pulumi.Input[str]] = None,
                 subscription_url: Optional[pulumi.Input[str]] = None,
                 supports_parameters_updates: Optional[pulumi.Input[bool]] = None,
                 supports_plan_updates: Optional[pulumi.Input[bool]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SubaccountSubscription resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_plan_features: The list of features specific to this plan.
        :param pulumi.Input[str] app_id: The ID returned by XSUAA after the app provider has performed a bind of the multitenant application to an XSUAA service instance.
        :param pulumi.Input[str] app_name: The unique registration name of the deployed multitenant application as defined by the app developer.
        :param pulumi.Input[str] authentication_provider: The authentication provider of the multitenant application. * XSUAA is the SAP Authorization and Trust Management service that defines scopes and permissions for users as tenants at the global account level. * IAS is Identity Authentication Service that defines scopes and permissions for users in zones (common data isolation systems across systems, SaaS tenants, and services).
        :param pulumi.Input[str] category: The technical name of the category defined by the app developer to which the multitenant application is grouped in customer-facing UIs.
        :param pulumi.Input[str] commercial_app_name: The commercial name of the deployed multitenant application as defined by the app developer.
        :param pulumi.Input[str] created_date: The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param pulumi.Input[bool] customer_developed: Shows whether the application was developed by a customer. If not, then the application is developed by the cloud operator, such as SAP.
        :param pulumi.Input[str] description: The description of the multitenant application for customer-facing UIs.
        :param pulumi.Input[str] display_name: The display name of the application for customer-facing UIs.
        :param pulumi.Input[str] formation_solution_name: The name of the formations solution associated with the multitenant application.
        :param pulumi.Input[str] globalaccount_id: The ID of the associated global account.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] labels: The set of words or phrases assigned to the multitenant application subscription.
        :param pulumi.Input[str] last_modified: The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param pulumi.Input[str] parameters: The parameters of the subscription as a valid JSON object.
        :param pulumi.Input[str] plan_name: The plan name of the application to which the consumer has subscribed.
        :param pulumi.Input[str] platform_entity_id: The ID of the landscape-specific environment.
        :param pulumi.Input[int] quota: The total amount the subscribed subaccount is entitled to consume.
        :param pulumi.Input[str] state: The subscription state of the subaccount regarding the multitenant application.
        :param pulumi.Input[str] subaccount_id: The ID of the subaccount.
        :param pulumi.Input[str] subscribed_subaccount_id: The ID of the subaccount, which is subscribed to the multitenant application.
        :param pulumi.Input[str] subscribed_tenant_id: The ID of the tenant, which is subscribed to a multitenant application.
        :param pulumi.Input[str] subscription_url: The URL for app users to launch the subscribed application.
        :param pulumi.Input[bool] supports_parameters_updates: Specifies whether a consumer, whose subaccount is subscribed to the application, can change its subscriptions parameters.
        :param pulumi.Input[bool] supports_plan_updates: Specifies whether a consumer, whose subaccount is subscribed to the application, can change the subscription to a different plan that is available for this application and subaccount.
        :param pulumi.Input[str] tenant_id: The tenant ID of the application provider.
        """
        if additional_plan_features is not None:
            pulumi.set(__self__, "additional_plan_features", additional_plan_features)
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)
        if authentication_provider is not None:
            pulumi.set(__self__, "authentication_provider", authentication_provider)
        if category is not None:
            pulumi.set(__self__, "category", category)
        if commercial_app_name is not None:
            pulumi.set(__self__, "commercial_app_name", commercial_app_name)
        if created_date is not None:
            pulumi.set(__self__, "created_date", created_date)
        if customer_developed is not None:
            pulumi.set(__self__, "customer_developed", customer_developed)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if formation_solution_name is not None:
            pulumi.set(__self__, "formation_solution_name", formation_solution_name)
        if globalaccount_id is not None:
            pulumi.set(__self__, "globalaccount_id", globalaccount_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if plan_name is not None:
            pulumi.set(__self__, "plan_name", plan_name)
        if platform_entity_id is not None:
            pulumi.set(__self__, "platform_entity_id", platform_entity_id)
        if quota is not None:
            pulumi.set(__self__, "quota", quota)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subaccount_id is not None:
            pulumi.set(__self__, "subaccount_id", subaccount_id)
        if subscribed_subaccount_id is not None:
            pulumi.set(__self__, "subscribed_subaccount_id", subscribed_subaccount_id)
        if subscribed_tenant_id is not None:
            pulumi.set(__self__, "subscribed_tenant_id", subscribed_tenant_id)
        if subscription_url is not None:
            pulumi.set(__self__, "subscription_url", subscription_url)
        if supports_parameters_updates is not None:
            pulumi.set(__self__, "supports_parameters_updates", supports_parameters_updates)
        if supports_plan_updates is not None:
            pulumi.set(__self__, "supports_plan_updates", supports_plan_updates)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="additionalPlanFeatures")
    def additional_plan_features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of features specific to this plan.
        """
        return pulumi.get(self, "additional_plan_features")

    @additional_plan_features.setter
    def additional_plan_features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_plan_features", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID returned by XSUAA after the app provider has performed a bind of the multitenant application to an XSUAA service instance.
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[pulumi.Input[str]]:
        """
        The unique registration name of the deployed multitenant application as defined by the app developer.
        """
        return pulumi.get(self, "app_name")

    @app_name.setter
    def app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_name", value)

    @property
    @pulumi.getter(name="authenticationProvider")
    def authentication_provider(self) -> Optional[pulumi.Input[str]]:
        """
        The authentication provider of the multitenant application. * XSUAA is the SAP Authorization and Trust Management service that defines scopes and permissions for users as tenants at the global account level. * IAS is Identity Authentication Service that defines scopes and permissions for users in zones (common data isolation systems across systems, SaaS tenants, and services).
        """
        return pulumi.get(self, "authentication_provider")

    @authentication_provider.setter
    def authentication_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_provider", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[str]]:
        """
        The technical name of the category defined by the app developer to which the multitenant application is grouped in customer-facing UIs.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="commercialAppName")
    def commercial_app_name(self) -> Optional[pulumi.Input[str]]:
        """
        The commercial name of the deployed multitenant application as defined by the app developer.
        """
        return pulumi.get(self, "commercial_app_name")

    @commercial_app_name.setter
    def commercial_app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commercial_app_name", value)

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @created_date.setter
    def created_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_date", value)

    @property
    @pulumi.getter(name="customerDeveloped")
    def customer_developed(self) -> Optional[pulumi.Input[bool]]:
        """
        Shows whether the application was developed by a customer. If not, then the application is developed by the cloud operator, such as SAP.
        """
        return pulumi.get(self, "customer_developed")

    @customer_developed.setter
    def customer_developed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "customer_developed", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the multitenant application for customer-facing UIs.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the application for customer-facing UIs.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="formationSolutionName")
    def formation_solution_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the formations solution associated with the multitenant application.
        """
        return pulumi.get(self, "formation_solution_name")

    @formation_solution_name.setter
    def formation_solution_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "formation_solution_name", value)

    @property
    @pulumi.getter(name="globalaccountId")
    def globalaccount_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the associated global account.
        """
        return pulumi.get(self, "globalaccount_id")

    @globalaccount_id.setter
    def globalaccount_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "globalaccount_id", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        The set of words or phrases assigned to the multitenant application subscription.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_modified", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[str]]:
        """
        The parameters of the subscription as a valid JSON object.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> Optional[pulumi.Input[str]]:
        """
        The plan name of the application to which the consumer has subscribed.
        """
        return pulumi.get(self, "plan_name")

    @plan_name.setter
    def plan_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan_name", value)

    @property
    @pulumi.getter(name="platformEntityId")
    def platform_entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the landscape-specific environment.
        """
        return pulumi.get(self, "platform_entity_id")

    @platform_entity_id.setter
    def platform_entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "platform_entity_id", value)

    @property
    @pulumi.getter
    def quota(self) -> Optional[pulumi.Input[int]]:
        """
        The total amount the subscribed subaccount is entitled to consume.
        """
        return pulumi.get(self, "quota")

    @quota.setter
    def quota(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "quota", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The subscription state of the subaccount regarding the multitenant application.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="subaccountId")
    def subaccount_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the subaccount.
        """
        return pulumi.get(self, "subaccount_id")

    @subaccount_id.setter
    def subaccount_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subaccount_id", value)

    @property
    @pulumi.getter(name="subscribedSubaccountId")
    def subscribed_subaccount_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the subaccount, which is subscribed to the multitenant application.
        """
        return pulumi.get(self, "subscribed_subaccount_id")

    @subscribed_subaccount_id.setter
    def subscribed_subaccount_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscribed_subaccount_id", value)

    @property
    @pulumi.getter(name="subscribedTenantId")
    def subscribed_tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the tenant, which is subscribed to a multitenant application.
        """
        return pulumi.get(self, "subscribed_tenant_id")

    @subscribed_tenant_id.setter
    def subscribed_tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscribed_tenant_id", value)

    @property
    @pulumi.getter(name="subscriptionUrl")
    def subscription_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL for app users to launch the subscribed application.
        """
        return pulumi.get(self, "subscription_url")

    @subscription_url.setter
    def subscription_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_url", value)

    @property
    @pulumi.getter(name="supportsParametersUpdates")
    def supports_parameters_updates(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether a consumer, whose subaccount is subscribed to the application, can change its subscriptions parameters.
        """
        return pulumi.get(self, "supports_parameters_updates")

    @supports_parameters_updates.setter
    def supports_parameters_updates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "supports_parameters_updates", value)

    @property
    @pulumi.getter(name="supportsPlanUpdates")
    def supports_plan_updates(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether a consumer, whose subaccount is subscribed to the application, can change the subscription to a different plan that is available for this application and subaccount.
        """
        return pulumi.get(self, "supports_plan_updates")

    @supports_plan_updates.setter
    def supports_plan_updates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "supports_plan_updates", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        The tenant ID of the application provider.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


class SubaccountSubscription(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_name: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[str]] = None,
                 plan_name: Optional[pulumi.Input[str]] = None,
                 subaccount_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Subscribes a subaccount to a multitenant application.
        Custom or partner-developed applications are currently not supported.

        __Tip:__
        You must be assigned to the subaccount admin role.

        ## Example Usage

        ```python
        import pulumi
        import lechnerc77_pulumi_btp as btp

        workzone = btp.SubaccountSubscription("workzone",
            app_name="SAPLaunchpad",
            plan_name="free",
            subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
        ```

        ## Import

        terraform

        ```sh
         $ pulumi import btp:index/subaccountSubscription:SubaccountSubscription <resource_name> <subaccount_id>,<app_name>,<plan_name>
        ```

        ```sh
         $ pulumi import btp:index/subaccountSubscription:SubaccountSubscription workzone 6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f,SAPLaunchpad,free
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_name: The unique registration name of the deployed multitenant application as defined by the app developer.
        :param pulumi.Input[str] parameters: The parameters of the subscription as a valid JSON object.
        :param pulumi.Input[str] plan_name: The plan name of the application to which the consumer has subscribed.
        :param pulumi.Input[str] subaccount_id: The ID of the subaccount.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SubaccountSubscriptionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Subscribes a subaccount to a multitenant application.
        Custom or partner-developed applications are currently not supported.

        __Tip:__
        You must be assigned to the subaccount admin role.

        ## Example Usage

        ```python
        import pulumi
        import lechnerc77_pulumi_btp as btp

        workzone = btp.SubaccountSubscription("workzone",
            app_name="SAPLaunchpad",
            plan_name="free",
            subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
        ```

        ## Import

        terraform

        ```sh
         $ pulumi import btp:index/subaccountSubscription:SubaccountSubscription <resource_name> <subaccount_id>,<app_name>,<plan_name>
        ```

        ```sh
         $ pulumi import btp:index/subaccountSubscription:SubaccountSubscription workzone 6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f,SAPLaunchpad,free
        ```

        :param str resource_name: The name of the resource.
        :param SubaccountSubscriptionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SubaccountSubscriptionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_name: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input[str]] = None,
                 plan_name: Optional[pulumi.Input[str]] = None,
                 subaccount_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SubaccountSubscriptionArgs.__new__(SubaccountSubscriptionArgs)

            if app_name is None and not opts.urn:
                raise TypeError("Missing required property 'app_name'")
            __props__.__dict__["app_name"] = app_name
            __props__.__dict__["parameters"] = parameters
            if plan_name is None and not opts.urn:
                raise TypeError("Missing required property 'plan_name'")
            __props__.__dict__["plan_name"] = plan_name
            if subaccount_id is None and not opts.urn:
                raise TypeError("Missing required property 'subaccount_id'")
            __props__.__dict__["subaccount_id"] = subaccount_id
            __props__.__dict__["additional_plan_features"] = None
            __props__.__dict__["app_id"] = None
            __props__.__dict__["authentication_provider"] = None
            __props__.__dict__["category"] = None
            __props__.__dict__["commercial_app_name"] = None
            __props__.__dict__["created_date"] = None
            __props__.__dict__["customer_developed"] = None
            __props__.__dict__["description"] = None
            __props__.__dict__["display_name"] = None
            __props__.__dict__["formation_solution_name"] = None
            __props__.__dict__["globalaccount_id"] = None
            __props__.__dict__["labels"] = None
            __props__.__dict__["last_modified"] = None
            __props__.__dict__["platform_entity_id"] = None
            __props__.__dict__["quota"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["subscribed_subaccount_id"] = None
            __props__.__dict__["subscribed_tenant_id"] = None
            __props__.__dict__["subscription_url"] = None
            __props__.__dict__["supports_parameters_updates"] = None
            __props__.__dict__["supports_plan_updates"] = None
            __props__.__dict__["tenant_id"] = None
        super(SubaccountSubscription, __self__).__init__(
            'btp:index/subaccountSubscription:SubaccountSubscription',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            additional_plan_features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            app_id: Optional[pulumi.Input[str]] = None,
            app_name: Optional[pulumi.Input[str]] = None,
            authentication_provider: Optional[pulumi.Input[str]] = None,
            category: Optional[pulumi.Input[str]] = None,
            commercial_app_name: Optional[pulumi.Input[str]] = None,
            created_date: Optional[pulumi.Input[str]] = None,
            customer_developed: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            formation_solution_name: Optional[pulumi.Input[str]] = None,
            globalaccount_id: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
            last_modified: Optional[pulumi.Input[str]] = None,
            parameters: Optional[pulumi.Input[str]] = None,
            plan_name: Optional[pulumi.Input[str]] = None,
            platform_entity_id: Optional[pulumi.Input[str]] = None,
            quota: Optional[pulumi.Input[int]] = None,
            state: Optional[pulumi.Input[str]] = None,
            subaccount_id: Optional[pulumi.Input[str]] = None,
            subscribed_subaccount_id: Optional[pulumi.Input[str]] = None,
            subscribed_tenant_id: Optional[pulumi.Input[str]] = None,
            subscription_url: Optional[pulumi.Input[str]] = None,
            supports_parameters_updates: Optional[pulumi.Input[bool]] = None,
            supports_plan_updates: Optional[pulumi.Input[bool]] = None,
            tenant_id: Optional[pulumi.Input[str]] = None) -> 'SubaccountSubscription':
        """
        Get an existing SubaccountSubscription resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] additional_plan_features: The list of features specific to this plan.
        :param pulumi.Input[str] app_id: The ID returned by XSUAA after the app provider has performed a bind of the multitenant application to an XSUAA service instance.
        :param pulumi.Input[str] app_name: The unique registration name of the deployed multitenant application as defined by the app developer.
        :param pulumi.Input[str] authentication_provider: The authentication provider of the multitenant application. * XSUAA is the SAP Authorization and Trust Management service that defines scopes and permissions for users as tenants at the global account level. * IAS is Identity Authentication Service that defines scopes and permissions for users in zones (common data isolation systems across systems, SaaS tenants, and services).
        :param pulumi.Input[str] category: The technical name of the category defined by the app developer to which the multitenant application is grouped in customer-facing UIs.
        :param pulumi.Input[str] commercial_app_name: The commercial name of the deployed multitenant application as defined by the app developer.
        :param pulumi.Input[str] created_date: The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param pulumi.Input[bool] customer_developed: Shows whether the application was developed by a customer. If not, then the application is developed by the cloud operator, such as SAP.
        :param pulumi.Input[str] description: The description of the multitenant application for customer-facing UIs.
        :param pulumi.Input[str] display_name: The display name of the application for customer-facing UIs.
        :param pulumi.Input[str] formation_solution_name: The name of the formations solution associated with the multitenant application.
        :param pulumi.Input[str] globalaccount_id: The ID of the associated global account.
        :param pulumi.Input[Mapping[str, pulumi.Input[Sequence[pulumi.Input[str]]]]] labels: The set of words or phrases assigned to the multitenant application subscription.
        :param pulumi.Input[str] last_modified: The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        :param pulumi.Input[str] parameters: The parameters of the subscription as a valid JSON object.
        :param pulumi.Input[str] plan_name: The plan name of the application to which the consumer has subscribed.
        :param pulumi.Input[str] platform_entity_id: The ID of the landscape-specific environment.
        :param pulumi.Input[int] quota: The total amount the subscribed subaccount is entitled to consume.
        :param pulumi.Input[str] state: The subscription state of the subaccount regarding the multitenant application.
        :param pulumi.Input[str] subaccount_id: The ID of the subaccount.
        :param pulumi.Input[str] subscribed_subaccount_id: The ID of the subaccount, which is subscribed to the multitenant application.
        :param pulumi.Input[str] subscribed_tenant_id: The ID of the tenant, which is subscribed to a multitenant application.
        :param pulumi.Input[str] subscription_url: The URL for app users to launch the subscribed application.
        :param pulumi.Input[bool] supports_parameters_updates: Specifies whether a consumer, whose subaccount is subscribed to the application, can change its subscriptions parameters.
        :param pulumi.Input[bool] supports_plan_updates: Specifies whether a consumer, whose subaccount is subscribed to the application, can change the subscription to a different plan that is available for this application and subaccount.
        :param pulumi.Input[str] tenant_id: The tenant ID of the application provider.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SubaccountSubscriptionState.__new__(_SubaccountSubscriptionState)

        __props__.__dict__["additional_plan_features"] = additional_plan_features
        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["app_name"] = app_name
        __props__.__dict__["authentication_provider"] = authentication_provider
        __props__.__dict__["category"] = category
        __props__.__dict__["commercial_app_name"] = commercial_app_name
        __props__.__dict__["created_date"] = created_date
        __props__.__dict__["customer_developed"] = customer_developed
        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["formation_solution_name"] = formation_solution_name
        __props__.__dict__["globalaccount_id"] = globalaccount_id
        __props__.__dict__["labels"] = labels
        __props__.__dict__["last_modified"] = last_modified
        __props__.__dict__["parameters"] = parameters
        __props__.__dict__["plan_name"] = plan_name
        __props__.__dict__["platform_entity_id"] = platform_entity_id
        __props__.__dict__["quota"] = quota
        __props__.__dict__["state"] = state
        __props__.__dict__["subaccount_id"] = subaccount_id
        __props__.__dict__["subscribed_subaccount_id"] = subscribed_subaccount_id
        __props__.__dict__["subscribed_tenant_id"] = subscribed_tenant_id
        __props__.__dict__["subscription_url"] = subscription_url
        __props__.__dict__["supports_parameters_updates"] = supports_parameters_updates
        __props__.__dict__["supports_plan_updates"] = supports_plan_updates
        __props__.__dict__["tenant_id"] = tenant_id
        return SubaccountSubscription(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="additionalPlanFeatures")
    def additional_plan_features(self) -> pulumi.Output[Sequence[str]]:
        """
        The list of features specific to this plan.
        """
        return pulumi.get(self, "additional_plan_features")

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[str]:
        """
        The ID returned by XSUAA after the app provider has performed a bind of the multitenant application to an XSUAA service instance.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> pulumi.Output[str]:
        """
        The unique registration name of the deployed multitenant application as defined by the app developer.
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter(name="authenticationProvider")
    def authentication_provider(self) -> pulumi.Output[str]:
        """
        The authentication provider of the multitenant application. * XSUAA is the SAP Authorization and Trust Management service that defines scopes and permissions for users as tenants at the global account level. * IAS is Identity Authentication Service that defines scopes and permissions for users in zones (common data isolation systems across systems, SaaS tenants, and services).
        """
        return pulumi.get(self, "authentication_provider")

    @property
    @pulumi.getter
    def category(self) -> pulumi.Output[str]:
        """
        The technical name of the category defined by the app developer to which the multitenant application is grouped in customer-facing UIs.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="commercialAppName")
    def commercial_app_name(self) -> pulumi.Output[str]:
        """
        The commercial name of the deployed multitenant application as defined by the app developer.
        """
        return pulumi.get(self, "commercial_app_name")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> pulumi.Output[str]:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter(name="customerDeveloped")
    def customer_developed(self) -> pulumi.Output[bool]:
        """
        Shows whether the application was developed by a customer. If not, then the application is developed by the cloud operator, such as SAP.
        """
        return pulumi.get(self, "customer_developed")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the multitenant application for customer-facing UIs.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The display name of the application for customer-facing UIs.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="formationSolutionName")
    def formation_solution_name(self) -> pulumi.Output[str]:
        """
        The name of the formations solution associated with the multitenant application.
        """
        return pulumi.get(self, "formation_solution_name")

    @property
    @pulumi.getter(name="globalaccountId")
    def globalaccount_id(self) -> pulumi.Output[str]:
        """
        The ID of the associated global account.
        """
        return pulumi.get(self, "globalaccount_id")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, Sequence[str]]]:
        """
        The set of words or phrases assigned to the multitenant application subscription.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> pulumi.Output[str]:
        """
        The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Output[str]:
        """
        The parameters of the subscription as a valid JSON object.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> pulumi.Output[str]:
        """
        The plan name of the application to which the consumer has subscribed.
        """
        return pulumi.get(self, "plan_name")

    @property
    @pulumi.getter(name="platformEntityId")
    def platform_entity_id(self) -> pulumi.Output[str]:
        """
        The ID of the landscape-specific environment.
        """
        return pulumi.get(self, "platform_entity_id")

    @property
    @pulumi.getter
    def quota(self) -> pulumi.Output[int]:
        """
        The total amount the subscribed subaccount is entitled to consume.
        """
        return pulumi.get(self, "quota")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The subscription state of the subaccount regarding the multitenant application.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subaccountId")
    def subaccount_id(self) -> pulumi.Output[str]:
        """
        The ID of the subaccount.
        """
        return pulumi.get(self, "subaccount_id")

    @property
    @pulumi.getter(name="subscribedSubaccountId")
    def subscribed_subaccount_id(self) -> pulumi.Output[str]:
        """
        The ID of the subaccount, which is subscribed to the multitenant application.
        """
        return pulumi.get(self, "subscribed_subaccount_id")

    @property
    @pulumi.getter(name="subscribedTenantId")
    def subscribed_tenant_id(self) -> pulumi.Output[str]:
        """
        The ID of the tenant, which is subscribed to a multitenant application.
        """
        return pulumi.get(self, "subscribed_tenant_id")

    @property
    @pulumi.getter(name="subscriptionUrl")
    def subscription_url(self) -> pulumi.Output[str]:
        """
        The URL for app users to launch the subscribed application.
        """
        return pulumi.get(self, "subscription_url")

    @property
    @pulumi.getter(name="supportsParametersUpdates")
    def supports_parameters_updates(self) -> pulumi.Output[bool]:
        """
        Specifies whether a consumer, whose subaccount is subscribed to the application, can change its subscriptions parameters.
        """
        return pulumi.get(self, "supports_parameters_updates")

    @property
    @pulumi.getter(name="supportsPlanUpdates")
    def supports_plan_updates(self) -> pulumi.Output[bool]:
        """
        Specifies whether a consumer, whose subaccount is subscribed to the application, can change the subscription to a different plan that is available for this application and subaccount.
        """
        return pulumi.get(self, "supports_plan_updates")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[str]:
        """
        The tenant ID of the application provider.
        """
        return pulumi.get(self, "tenant_id")

