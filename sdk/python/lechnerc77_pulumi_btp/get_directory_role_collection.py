# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetDirectoryRoleCollectionResult',
    'AwaitableGetDirectoryRoleCollectionResult',
    'get_directory_role_collection',
    'get_directory_role_collection_output',
]

@pulumi.output_type
class GetDirectoryRoleCollectionResult:
    """
    A collection of values returned by getDirectoryRoleCollection.
    """
    def __init__(__self__, description=None, directory_id=None, id=None, name=None, read_only=None, roles=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if directory_id and not isinstance(directory_id, str):
            raise TypeError("Expected argument 'directory_id' to be a str")
        pulumi.set(__self__, "directory_id", directory_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if read_only and not isinstance(read_only, bool):
            raise TypeError("Expected argument 'read_only' to be a bool")
        pulumi.set(__self__, "read_only", read_only)
        if roles and not isinstance(roles, list):
            raise TypeError("Expected argument 'roles' to be a list")
        pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the role collection.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="directoryId")
    def directory_id(self) -> str:
        """
        The ID of the directory.
        """
        return pulumi.get(self, "directory_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the directory.
        """
        warnings.warn("""Use the `directory_id` attribute instead""", DeprecationWarning)
        pulumi.log.warn("""id is deprecated: Use the `directory_id` attribute instead""")

        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the role collection.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        """
        Shows whether the role collection is read-only.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def roles(self) -> Sequence['outputs.GetDirectoryRoleCollectionRoleResult']:
        return pulumi.get(self, "roles")


class AwaitableGetDirectoryRoleCollectionResult(GetDirectoryRoleCollectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDirectoryRoleCollectionResult(
            description=self.description,
            directory_id=self.directory_id,
            id=self.id,
            name=self.name,
            read_only=self.read_only,
            roles=self.roles)


def get_directory_role_collection(directory_id: Optional[str] = None,
                                  name: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDirectoryRoleCollectionResult:
    """
    Gets details about a specific directory role collection.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    directory_admin = btp.get_directory_role_collection(directory_id="dd005d8b-1fee-4e6b-b6ff-cb9a197b7fe0",
        name="Directory Administrator")
    ```


    :param str directory_id: The ID of the directory.
    :param str name: The name of the role collection.
    """
    __args__ = dict()
    __args__['directoryId'] = directory_id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('btp:index/getDirectoryRoleCollection:getDirectoryRoleCollection', __args__, opts=opts, typ=GetDirectoryRoleCollectionResult).value

    return AwaitableGetDirectoryRoleCollectionResult(
        description=pulumi.get(__ret__, 'description'),
        directory_id=pulumi.get(__ret__, 'directory_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        read_only=pulumi.get(__ret__, 'read_only'),
        roles=pulumi.get(__ret__, 'roles'))


@_utilities.lift_output_func(get_directory_role_collection)
def get_directory_role_collection_output(directory_id: Optional[pulumi.Input[str]] = None,
                                         name: Optional[pulumi.Input[str]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDirectoryRoleCollectionResult]:
    """
    Gets details about a specific directory role collection.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    directory_admin = btp.get_directory_role_collection(directory_id="dd005d8b-1fee-4e6b-b6ff-cb9a197b7fe0",
        name="Directory Administrator")
    ```


    :param str directory_id: The ID of the directory.
    :param str name: The name of the role collection.
    """
    ...
