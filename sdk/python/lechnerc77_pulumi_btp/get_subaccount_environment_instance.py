# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSubaccountEnvironmentInstanceResult',
    'AwaitableGetSubaccountEnvironmentInstanceResult',
    'get_subaccount_environment_instance',
    'get_subaccount_environment_instance_output',
]

@pulumi.output_type
class GetSubaccountEnvironmentInstanceResult:
    """
    A collection of values returned by getSubaccountEnvironmentInstance.
    """
    def __init__(__self__, broker_id=None, created_date=None, custom_labels=None, dashboard_url=None, description=None, environment_type=None, id=None, labels=None, landscape_label=None, last_modified=None, name=None, operation=None, parameters=None, plan_id=None, plan_name=None, platform_id=None, service_id=None, service_name=None, state=None, subaccount_id=None, tenant_id=None, type=None):
        if broker_id and not isinstance(broker_id, str):
            raise TypeError("Expected argument 'broker_id' to be a str")
        pulumi.set(__self__, "broker_id", broker_id)
        if created_date and not isinstance(created_date, str):
            raise TypeError("Expected argument 'created_date' to be a str")
        pulumi.set(__self__, "created_date", created_date)
        if custom_labels and not isinstance(custom_labels, dict):
            raise TypeError("Expected argument 'custom_labels' to be a dict")
        pulumi.set(__self__, "custom_labels", custom_labels)
        if dashboard_url and not isinstance(dashboard_url, str):
            raise TypeError("Expected argument 'dashboard_url' to be a str")
        pulumi.set(__self__, "dashboard_url", dashboard_url)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if environment_type and not isinstance(environment_type, str):
            raise TypeError("Expected argument 'environment_type' to be a str")
        pulumi.set(__self__, "environment_type", environment_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, str):
            raise TypeError("Expected argument 'labels' to be a str")
        pulumi.set(__self__, "labels", labels)
        if landscape_label and not isinstance(landscape_label, str):
            raise TypeError("Expected argument 'landscape_label' to be a str")
        pulumi.set(__self__, "landscape_label", landscape_label)
        if last_modified and not isinstance(last_modified, str):
            raise TypeError("Expected argument 'last_modified' to be a str")
        pulumi.set(__self__, "last_modified", last_modified)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operation and not isinstance(operation, str):
            raise TypeError("Expected argument 'operation' to be a str")
        pulumi.set(__self__, "operation", operation)
        if parameters and not isinstance(parameters, str):
            raise TypeError("Expected argument 'parameters' to be a str")
        pulumi.set(__self__, "parameters", parameters)
        if plan_id and not isinstance(plan_id, str):
            raise TypeError("Expected argument 'plan_id' to be a str")
        pulumi.set(__self__, "plan_id", plan_id)
        if plan_name and not isinstance(plan_name, str):
            raise TypeError("Expected argument 'plan_name' to be a str")
        pulumi.set(__self__, "plan_name", plan_name)
        if platform_id and not isinstance(platform_id, str):
            raise TypeError("Expected argument 'platform_id' to be a str")
        pulumi.set(__self__, "platform_id", platform_id)
        if service_id and not isinstance(service_id, str):
            raise TypeError("Expected argument 'service_id' to be a str")
        pulumi.set(__self__, "service_id", service_id)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if subaccount_id and not isinstance(subaccount_id, str):
            raise TypeError("Expected argument 'subaccount_id' to be a str")
        pulumi.set(__self__, "subaccount_id", subaccount_id)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="brokerId")
    def broker_id(self) -> str:
        """
        The ID of the associated environment broker.
        """
        return pulumi.get(self, "broker_id")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter(name="customLabels")
    def custom_labels(self) -> Mapping[str, Sequence[str]]:
        return pulumi.get(self, "custom_labels")

    @property
    @pulumi.getter(name="dashboardUrl")
    def dashboard_url(self) -> str:
        """
        The URL of the service dashboard, which is a web-based management user interface for the service instances.
        """
        return pulumi.get(self, "dashboard_url")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the environment instance.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> str:
        """
        The type of the environment instance that is used.
        """
        return pulumi.get(self, "environment_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the environment instance.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> str:
        """
        The set of words or phrases assigned to the environment instance.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="landscapeLabel")
    def landscape_label(self) -> str:
        """
        The name of the landscape within the logged-in region on which the environment instance is created.
        """
        return pulumi.get(self, "landscape_label")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the environment instance.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operation(self) -> str:
        """
        An identifier that represents the last operation. This ID is returned by the environment brokers.
        """
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def parameters(self) -> str:
        """
        The configuration parameters for the environment instance.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> str:
        """
        The ID of the service plan for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "plan_id")

    @property
    @pulumi.getter(name="planName")
    def plan_name(self) -> str:
        """
        The name of the service plan for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "plan_name")

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> str:
        """
        The ID of the platform for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "platform_id")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        """
        The ID of the service for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        The name of the service for the environment instance in the corresponding service broker's catalog.
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The current state of the environment instance. Possible values are:
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subaccountId")
    def subaccount_id(self) -> str:
        """
        The ID of the subaccount.
        """
        return pulumi.get(self, "subaccount_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


class AwaitableGetSubaccountEnvironmentInstanceResult(GetSubaccountEnvironmentInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubaccountEnvironmentInstanceResult(
            broker_id=self.broker_id,
            created_date=self.created_date,
            custom_labels=self.custom_labels,
            dashboard_url=self.dashboard_url,
            description=self.description,
            environment_type=self.environment_type,
            id=self.id,
            labels=self.labels,
            landscape_label=self.landscape_label,
            last_modified=self.last_modified,
            name=self.name,
            operation=self.operation,
            parameters=self.parameters,
            plan_id=self.plan_id,
            plan_name=self.plan_name,
            platform_id=self.platform_id,
            service_id=self.service_id,
            service_name=self.service_name,
            state=self.state,
            subaccount_id=self.subaccount_id,
            tenant_id=self.tenant_id,
            type=self.type)


def get_subaccount_environment_instance(id: Optional[str] = None,
                                        subaccount_id: Optional[str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubaccountEnvironmentInstanceResult:
    """
    Gets the details of a specific environment instance in a subaccount.

    __Tip:__
    You must be assigned to the subaccount admin or viewer role.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    cloudfoundry = btp.get_subaccount_environment_instance(id="6D079379-6442-464A-90EB-65FAC05B176F",
        subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    ```


    :param str id: The ID of the environment instance.
    :param str subaccount_id: The ID of the subaccount.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['subaccountId'] = subaccount_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('btp:index/getSubaccountEnvironmentInstance:getSubaccountEnvironmentInstance', __args__, opts=opts, typ=GetSubaccountEnvironmentInstanceResult).value

    return AwaitableGetSubaccountEnvironmentInstanceResult(
        broker_id=pulumi.get(__ret__, 'broker_id'),
        created_date=pulumi.get(__ret__, 'created_date'),
        custom_labels=pulumi.get(__ret__, 'custom_labels'),
        dashboard_url=pulumi.get(__ret__, 'dashboard_url'),
        description=pulumi.get(__ret__, 'description'),
        environment_type=pulumi.get(__ret__, 'environment_type'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        landscape_label=pulumi.get(__ret__, 'landscape_label'),
        last_modified=pulumi.get(__ret__, 'last_modified'),
        name=pulumi.get(__ret__, 'name'),
        operation=pulumi.get(__ret__, 'operation'),
        parameters=pulumi.get(__ret__, 'parameters'),
        plan_id=pulumi.get(__ret__, 'plan_id'),
        plan_name=pulumi.get(__ret__, 'plan_name'),
        platform_id=pulumi.get(__ret__, 'platform_id'),
        service_id=pulumi.get(__ret__, 'service_id'),
        service_name=pulumi.get(__ret__, 'service_name'),
        state=pulumi.get(__ret__, 'state'),
        subaccount_id=pulumi.get(__ret__, 'subaccount_id'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_subaccount_environment_instance)
def get_subaccount_environment_instance_output(id: Optional[pulumi.Input[str]] = None,
                                               subaccount_id: Optional[pulumi.Input[str]] = None,
                                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSubaccountEnvironmentInstanceResult]:
    """
    Gets the details of a specific environment instance in a subaccount.

    __Tip:__
    You must be assigned to the subaccount admin or viewer role.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    cloudfoundry = btp.get_subaccount_environment_instance(id="6D079379-6442-464A-90EB-65FAC05B176F",
        subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    ```


    :param str id: The ID of the environment instance.
    :param str subaccount_id: The ID of the subaccount.
    """
    ...
