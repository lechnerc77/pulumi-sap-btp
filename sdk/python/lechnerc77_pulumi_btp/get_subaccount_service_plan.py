# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSubaccountServicePlanResult',
    'AwaitableGetSubaccountServicePlanResult',
    'get_subaccount_service_plan',
    'get_subaccount_service_plan_output',
]

@pulumi.output_type
class GetSubaccountServicePlanResult:
    """
    A collection of values returned by getSubaccountServicePlan.
    """
    def __init__(__self__, bindable=None, catalog_id=None, catalog_name=None, created_date=None, description=None, free=None, id=None, last_modified=None, name=None, offering_name=None, ready=None, serviceoffering_id=None, subaccount_id=None):
        if bindable and not isinstance(bindable, bool):
            raise TypeError("Expected argument 'bindable' to be a bool")
        pulumi.set(__self__, "bindable", bindable)
        if catalog_id and not isinstance(catalog_id, str):
            raise TypeError("Expected argument 'catalog_id' to be a str")
        pulumi.set(__self__, "catalog_id", catalog_id)
        if catalog_name and not isinstance(catalog_name, str):
            raise TypeError("Expected argument 'catalog_name' to be a str")
        pulumi.set(__self__, "catalog_name", catalog_name)
        if created_date and not isinstance(created_date, str):
            raise TypeError("Expected argument 'created_date' to be a str")
        pulumi.set(__self__, "created_date", created_date)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if free and not isinstance(free, bool):
            raise TypeError("Expected argument 'free' to be a bool")
        pulumi.set(__self__, "free", free)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_modified and not isinstance(last_modified, str):
            raise TypeError("Expected argument 'last_modified' to be a str")
        pulumi.set(__self__, "last_modified", last_modified)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if offering_name and not isinstance(offering_name, str):
            raise TypeError("Expected argument 'offering_name' to be a str")
        pulumi.set(__self__, "offering_name", offering_name)
        if ready and not isinstance(ready, bool):
            raise TypeError("Expected argument 'ready' to be a bool")
        pulumi.set(__self__, "ready", ready)
        if serviceoffering_id and not isinstance(serviceoffering_id, str):
            raise TypeError("Expected argument 'serviceoffering_id' to be a str")
        pulumi.set(__self__, "serviceoffering_id", serviceoffering_id)
        if subaccount_id and not isinstance(subaccount_id, str):
            raise TypeError("Expected argument 'subaccount_id' to be a str")
        pulumi.set(__self__, "subaccount_id", subaccount_id)

    @property
    @pulumi.getter
    def bindable(self) -> bool:
        """
        Shows whether the service plan is bindable.
        """
        return pulumi.get(self, "bindable")

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> str:
        """
        The ID of the service plan in the service broker catalog.
        """
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> str:
        """
        The name of the associated service broker catalog.
        """
        return pulumi.get(self, "catalog_name")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the service plan.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def free(self) -> bool:
        """
        Shows whether the service plan is free.
        """
        return pulumi.get(self, "free")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the service plan.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        """
        The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the service plan.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="offeringName")
    def offering_name(self) -> str:
        """
        The name of the service offering of the plan.
        """
        return pulumi.get(self, "offering_name")

    @property
    @pulumi.getter
    def ready(self) -> bool:
        """
        Shows whether the service plan is ready.
        """
        return pulumi.get(self, "ready")

    @property
    @pulumi.getter(name="serviceofferingId")
    def serviceoffering_id(self) -> str:
        """
        The ID of the service offering.
        """
        return pulumi.get(self, "serviceoffering_id")

    @property
    @pulumi.getter(name="subaccountId")
    def subaccount_id(self) -> str:
        """
        The ID of the subaccount.
        """
        return pulumi.get(self, "subaccount_id")


class AwaitableGetSubaccountServicePlanResult(GetSubaccountServicePlanResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubaccountServicePlanResult(
            bindable=self.bindable,
            catalog_id=self.catalog_id,
            catalog_name=self.catalog_name,
            created_date=self.created_date,
            description=self.description,
            free=self.free,
            id=self.id,
            last_modified=self.last_modified,
            name=self.name,
            offering_name=self.offering_name,
            ready=self.ready,
            serviceoffering_id=self.serviceoffering_id,
            subaccount_id=self.subaccount_id)


def get_subaccount_service_plan(id: Optional[str] = None,
                                name: Optional[str] = None,
                                offering_name: Optional[str] = None,
                                subaccount_id: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubaccountServicePlanResult:
    """
    Gets details about a specific service plan such as its name, description, and metadata.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    by_id = btp.get_subaccount_service_plan(id="b50d1b0b-2059-4f21-a014-2ea87752eb48",
        subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    by_name = btp.get_subaccount_service_plan(name="free",
        offering_name="alert-notification",
        subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    ```


    :param str id: The ID of the service plan.
    :param str name: The name of the service plan.
    :param str offering_name: The name of the service offering of the plan.
    :param str subaccount_id: The ID of the subaccount.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['offeringName'] = offering_name
    __args__['subaccountId'] = subaccount_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('btp:index/getSubaccountServicePlan:getSubaccountServicePlan', __args__, opts=opts, typ=GetSubaccountServicePlanResult).value

    return AwaitableGetSubaccountServicePlanResult(
        bindable=pulumi.get(__ret__, 'bindable'),
        catalog_id=pulumi.get(__ret__, 'catalog_id'),
        catalog_name=pulumi.get(__ret__, 'catalog_name'),
        created_date=pulumi.get(__ret__, 'created_date'),
        description=pulumi.get(__ret__, 'description'),
        free=pulumi.get(__ret__, 'free'),
        id=pulumi.get(__ret__, 'id'),
        last_modified=pulumi.get(__ret__, 'last_modified'),
        name=pulumi.get(__ret__, 'name'),
        offering_name=pulumi.get(__ret__, 'offering_name'),
        ready=pulumi.get(__ret__, 'ready'),
        serviceoffering_id=pulumi.get(__ret__, 'serviceoffering_id'),
        subaccount_id=pulumi.get(__ret__, 'subaccount_id'))


@_utilities.lift_output_func(get_subaccount_service_plan)
def get_subaccount_service_plan_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                                       name: Optional[pulumi.Input[Optional[str]]] = None,
                                       offering_name: Optional[pulumi.Input[Optional[str]]] = None,
                                       subaccount_id: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSubaccountServicePlanResult]:
    """
    Gets details about a specific service plan such as its name, description, and metadata.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    by_id = btp.get_subaccount_service_plan(id="b50d1b0b-2059-4f21-a014-2ea87752eb48",
        subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    by_name = btp.get_subaccount_service_plan(name="free",
        offering_name="alert-notification",
        subaccount_id="6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f")
    ```


    :param str id: The ID of the service plan.
    :param str name: The name of the service plan.
    :param str offering_name: The name of the service offering of the plan.
    :param str subaccount_id: The ID of the subaccount.
    """
    ...
