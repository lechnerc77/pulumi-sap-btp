# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetGlobalaccountRoleResult',
    'AwaitableGetGlobalaccountRoleResult',
    'get_globalaccount_role',
    'get_globalaccount_role_output',
]

@pulumi.output_type
class GetGlobalaccountRoleResult:
    """
    A collection of values returned by getGlobalaccountRole.
    """
    def __init__(__self__, app_id=None, description=None, id=None, name=None, read_only=None, role_template_name=None, scopes=None):
        if app_id and not isinstance(app_id, str):
            raise TypeError("Expected argument 'app_id' to be a str")
        pulumi.set(__self__, "app_id", app_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if read_only and not isinstance(read_only, bool):
            raise TypeError("Expected argument 'read_only' to be a bool")
        pulumi.set(__self__, "read_only", read_only)
        if role_template_name and not isinstance(role_template_name, str):
            raise TypeError("Expected argument 'role_template_name' to be a str")
        pulumi.set(__self__, "role_template_name", role_template_name)
        if scopes and not isinstance(scopes, list):
            raise TypeError("Expected argument 'scopes' to be a list")
        pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> str:
        """
        The ID of the xsuaa application.
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the role.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the global account
        """
        warnings.warn("""Use the `btp_globalaccount` datasource instead""", DeprecationWarning)
        pulumi.log.warn("""id is deprecated: Use the `btp_globalaccount` datasource instead""")

        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the role.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> bool:
        """
        Shows whether the role can be modified or not.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter(name="roleTemplateName")
    def role_template_name(self) -> str:
        """
        The name of the role template.
        """
        return pulumi.get(self, "role_template_name")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence['outputs.GetGlobalaccountRoleScopeResult']:
        """
        The scopes available with this role.
        """
        return pulumi.get(self, "scopes")


class AwaitableGetGlobalaccountRoleResult(GetGlobalaccountRoleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGlobalaccountRoleResult(
            app_id=self.app_id,
            description=self.description,
            id=self.id,
            name=self.name,
            read_only=self.read_only,
            role_template_name=self.role_template_name,
            scopes=self.scopes)


def get_globalaccount_role(app_id: Optional[str] = None,
                           name: Optional[str] = None,
                           role_template_name: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGlobalaccountRoleResult:
    """
    Gets details about a specific global account role.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    user_role_auditor = btp.get_globalaccount_role(app_id="xsuaa!t1",
        name="User and Role Auditor",
        role_template_name="xsuaa_auditor")
    ```


    :param str app_id: The ID of the xsuaa application.
    :param str name: The name of the role.
    :param str role_template_name: The name of the role template.
    """
    __args__ = dict()
    __args__['appId'] = app_id
    __args__['name'] = name
    __args__['roleTemplateName'] = role_template_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('btp:index/getGlobalaccountRole:getGlobalaccountRole', __args__, opts=opts, typ=GetGlobalaccountRoleResult).value

    return AwaitableGetGlobalaccountRoleResult(
        app_id=pulumi.get(__ret__, 'app_id'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        read_only=pulumi.get(__ret__, 'read_only'),
        role_template_name=pulumi.get(__ret__, 'role_template_name'),
        scopes=pulumi.get(__ret__, 'scopes'))


@_utilities.lift_output_func(get_globalaccount_role)
def get_globalaccount_role_output(app_id: Optional[pulumi.Input[str]] = None,
                                  name: Optional[pulumi.Input[str]] = None,
                                  role_template_name: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGlobalaccountRoleResult]:
    """
    Gets details about a specific global account role.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    user_role_auditor = btp.get_globalaccount_role(app_id="xsuaa!t1",
        name="User and Role Auditor",
        role_template_name="xsuaa_auditor")
    ```


    :param str app_id: The ID of the xsuaa application.
    :param str name: The name of the role.
    :param str role_template_name: The name of the role template.
    """
    ...
