# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetDirectoryResult',
    'AwaitableGetDirectoryResult',
    'get_directory',
    'get_directory_output',
]

@pulumi.output_type
class GetDirectoryResult:
    """
    A collection of values returned by getDirectory.
    """
    def __init__(__self__, created_by=None, created_date=None, description=None, features=None, id=None, labels=None, last_modified=None, name=None, parent_id=None, state=None, subdomain=None):
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if created_date and not isinstance(created_date, str):
            raise TypeError("Expected argument 'created_date' to be a str")
        pulumi.set(__self__, "created_date", created_date)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if features and not isinstance(features, list):
            raise TypeError("Expected argument 'features' to be a list")
        pulumi.set(__self__, "features", features)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if last_modified and not isinstance(last_modified, str):
            raise TypeError("Expected argument 'last_modified' to be a str")
        pulumi.set(__self__, "last_modified", last_modified)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if parent_id and not isinstance(parent_id, str):
            raise TypeError("Expected argument 'parent_id' to be a str")
        pulumi.set(__self__, "parent_id", parent_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if subdomain and not isinstance(subdomain, str):
            raise TypeError("Expected argument 'subdomain' to be a str")
        pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> str:
        """
        The details of the user that created the directory.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        """
        The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the directory.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def features(self) -> Sequence[str]:
        """
        The features that are enabled for the directory. Possible values are:
        """
        return pulumi.get(self, "features")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the directory.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, Sequence[str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> str:
        return pulumi.get(self, "last_modified")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> str:
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def subdomain(self) -> str:
        return pulumi.get(self, "subdomain")


class AwaitableGetDirectoryResult(GetDirectoryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDirectoryResult(
            created_by=self.created_by,
            created_date=self.created_date,
            description=self.description,
            features=self.features,
            id=self.id,
            labels=self.labels,
            last_modified=self.last_modified,
            name=self.name,
            parent_id=self.parent_id,
            state=self.state,
            subdomain=self.subdomain)


def get_directory(id: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDirectoryResult:
    """
    Gets the details about a directory.

    __Tip:__
    You must be assigned to the global account admin role, or the directory admin if the directory is configured to manage its authorizations.

    __Further documentation:__
    <https://help.sap.com/docs/btp/sap-business-technology-platform/account-model>

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    by_id = btp.get_directory(id="dd005d8b-1fee-4e6b-b6ff-cb9a197b7fe0")
    ```


    :param str id: The ID of the directory.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('btp:index/getDirectory:getDirectory', __args__, opts=opts, typ=GetDirectoryResult).value

    return AwaitableGetDirectoryResult(
        created_by=pulumi.get(__ret__, 'created_by'),
        created_date=pulumi.get(__ret__, 'created_date'),
        description=pulumi.get(__ret__, 'description'),
        features=pulumi.get(__ret__, 'features'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        last_modified=pulumi.get(__ret__, 'last_modified'),
        name=pulumi.get(__ret__, 'name'),
        parent_id=pulumi.get(__ret__, 'parent_id'),
        state=pulumi.get(__ret__, 'state'),
        subdomain=pulumi.get(__ret__, 'subdomain'))


@_utilities.lift_output_func(get_directory)
def get_directory_output(id: Optional[pulumi.Input[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDirectoryResult]:
    """
    Gets the details about a directory.

    __Tip:__
    You must be assigned to the global account admin role, or the directory admin if the directory is configured to manage its authorizations.

    __Further documentation:__
    <https://help.sap.com/docs/btp/sap-business-technology-platform/account-model>

    ## Example Usage

    ```python
    import pulumi
    import pulumi_btp as btp

    by_id = btp.get_directory(id="dd005d8b-1fee-4e6b-b6ff-cb9a197b7fe0")
    ```


    :param str id: The ID of the directory.
    """
    ...
