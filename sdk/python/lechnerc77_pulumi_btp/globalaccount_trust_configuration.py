# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['GlobalaccountTrustConfigurationArgs', 'GlobalaccountTrustConfiguration']

@pulumi.input_type
class GlobalaccountTrustConfigurationArgs:
    def __init__(__self__, *,
                 identity_provider: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a GlobalaccountTrustConfiguration resource.
        :param pulumi.Input[str] identity_provider: The name of the Identity Authentication tenant that you want to connect to the global account.
        :param pulumi.Input[str] description: Description of the trust configuration.
        :param pulumi.Input[str] domain: The tenant's domain which should be used for user logon.
        :param pulumi.Input[str] name: The display name of the trust configuration.
        :param pulumi.Input[str] origin: The origin of the identity provider.
        """
        pulumi.set(__self__, "identity_provider", identity_provider)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)

    @property
    @pulumi.getter(name="identityProvider")
    def identity_provider(self) -> pulumi.Input[str]:
        """
        The name of the Identity Authentication tenant that you want to connect to the global account.
        """
        return pulumi.get(self, "identity_provider")

    @identity_provider.setter
    def identity_provider(self, value: pulumi.Input[str]):
        pulumi.set(self, "identity_provider", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the trust configuration.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The tenant's domain which should be used for user logon.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the trust configuration.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[str]]:
        """
        The origin of the identity provider.
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin", value)


@pulumi.input_type
class _GlobalaccountTrustConfigurationState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 identity_provider: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering GlobalaccountTrustConfiguration resources.
        :param pulumi.Input[str] description: Description of the trust configuration.
        :param pulumi.Input[str] domain: The tenant's domain which should be used for user logon.
        :param pulumi.Input[str] identity_provider: The name of the Identity Authentication tenant that you want to connect to the global account.
        :param pulumi.Input[str] name: The display name of the trust configuration.
        :param pulumi.Input[str] origin: The origin of the identity provider.
        :param pulumi.Input[str] protocol: The protocol used to establish trust with the identity provider.
        :param pulumi.Input[bool] read_only: Shows whether the trust configuration can be modified.
        :param pulumi.Input[str] status: Determines whether the identity provider is currently 'active' or 'inactive'.
        :param pulumi.Input[str] type: The trust type.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if identity_provider is not None:
            pulumi.set(__self__, "identity_provider", identity_provider)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the trust configuration.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The tenant's domain which should be used for user logon.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="identityProvider")
    def identity_provider(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Identity Authentication tenant that you want to connect to the global account.
        """
        return pulumi.get(self, "identity_provider")

    @identity_provider.setter
    def identity_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_provider", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the trust configuration.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[str]]:
        """
        The origin of the identity provider.
        """
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        The protocol used to establish trust with the identity provider.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Shows whether the trust configuration can be modified.
        """
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Determines whether the identity provider is currently 'active' or 'inactive'.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The trust type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class GlobalaccountTrustConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 identity_provider: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Establishes trust from a global account to an Identity Authentication tenant.

        __Further documentation:__
        <https://help.sap.com/docs/btp/sap-business-technology-platform/trust-and-federation-with-identity-providers>

        ## Example Usage

        ```python
        import pulumi
        import lechnerc77_pulumi_btp as btp

        # create a new simple trust configuration for a global account
        simple = btp.GlobalaccountTrustConfiguration("simple", identity_provider="terraformint.accounts400.ondemand.com")
        # create a new fully customized trust configuration for a global account
        fully_customized = btp.GlobalaccountTrustConfiguration("fullyCustomized",
            description="my-description",
            identity_provider="terraformint.accounts400.ondemand.com",
            origin="my-own-origin-platform")
        ```

        ## Import

        terraform

        ```sh
         $ pulumi import btp:index/globalaccountTrustConfiguration:GlobalaccountTrustConfiguration terraform importbtp_globalaccount_trust_configuration.<resource_name> <origin>
        ```

        ```sh
         $ pulumi import btp:index/globalaccountTrustConfiguration:GlobalaccountTrustConfiguration trust sap.custom
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the trust configuration.
        :param pulumi.Input[str] domain: The tenant's domain which should be used for user logon.
        :param pulumi.Input[str] identity_provider: The name of the Identity Authentication tenant that you want to connect to the global account.
        :param pulumi.Input[str] name: The display name of the trust configuration.
        :param pulumi.Input[str] origin: The origin of the identity provider.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GlobalaccountTrustConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Establishes trust from a global account to an Identity Authentication tenant.

        __Further documentation:__
        <https://help.sap.com/docs/btp/sap-business-technology-platform/trust-and-federation-with-identity-providers>

        ## Example Usage

        ```python
        import pulumi
        import lechnerc77_pulumi_btp as btp

        # create a new simple trust configuration for a global account
        simple = btp.GlobalaccountTrustConfiguration("simple", identity_provider="terraformint.accounts400.ondemand.com")
        # create a new fully customized trust configuration for a global account
        fully_customized = btp.GlobalaccountTrustConfiguration("fullyCustomized",
            description="my-description",
            identity_provider="terraformint.accounts400.ondemand.com",
            origin="my-own-origin-platform")
        ```

        ## Import

        terraform

        ```sh
         $ pulumi import btp:index/globalaccountTrustConfiguration:GlobalaccountTrustConfiguration terraform importbtp_globalaccount_trust_configuration.<resource_name> <origin>
        ```

        ```sh
         $ pulumi import btp:index/globalaccountTrustConfiguration:GlobalaccountTrustConfiguration trust sap.custom
        ```

        :param str resource_name: The name of the resource.
        :param GlobalaccountTrustConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GlobalaccountTrustConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 identity_provider: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GlobalaccountTrustConfigurationArgs.__new__(GlobalaccountTrustConfigurationArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["domain"] = domain
            if identity_provider is None and not opts.urn:
                raise TypeError("Missing required property 'identity_provider'")
            __props__.__dict__["identity_provider"] = identity_provider
            __props__.__dict__["name"] = name
            __props__.__dict__["origin"] = origin
            __props__.__dict__["protocol"] = None
            __props__.__dict__["read_only"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["type"] = None
        super(GlobalaccountTrustConfiguration, __self__).__init__(
            'btp:index/globalaccountTrustConfiguration:GlobalaccountTrustConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            identity_provider: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            origin: Optional[pulumi.Input[str]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            read_only: Optional[pulumi.Input[bool]] = None,
            status: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'GlobalaccountTrustConfiguration':
        """
        Get an existing GlobalaccountTrustConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the trust configuration.
        :param pulumi.Input[str] domain: The tenant's domain which should be used for user logon.
        :param pulumi.Input[str] identity_provider: The name of the Identity Authentication tenant that you want to connect to the global account.
        :param pulumi.Input[str] name: The display name of the trust configuration.
        :param pulumi.Input[str] origin: The origin of the identity provider.
        :param pulumi.Input[str] protocol: The protocol used to establish trust with the identity provider.
        :param pulumi.Input[bool] read_only: Shows whether the trust configuration can be modified.
        :param pulumi.Input[str] status: Determines whether the identity provider is currently 'active' or 'inactive'.
        :param pulumi.Input[str] type: The trust type.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GlobalaccountTrustConfigurationState.__new__(_GlobalaccountTrustConfigurationState)

        __props__.__dict__["description"] = description
        __props__.__dict__["domain"] = domain
        __props__.__dict__["identity_provider"] = identity_provider
        __props__.__dict__["name"] = name
        __props__.__dict__["origin"] = origin
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["read_only"] = read_only
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        return GlobalaccountTrustConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description of the trust configuration.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        The tenant's domain which should be used for user logon.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="identityProvider")
    def identity_provider(self) -> pulumi.Output[str]:
        """
        The name of the Identity Authentication tenant that you want to connect to the global account.
        """
        return pulumi.get(self, "identity_provider")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The display name of the trust configuration.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def origin(self) -> pulumi.Output[str]:
        """
        The origin of the identity provider.
        """
        return pulumi.get(self, "origin")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        The protocol used to establish trust with the identity provider.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> pulumi.Output[bool]:
        """
        Shows whether the trust configuration can be modified.
        """
        return pulumi.get(self, "read_only")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Determines whether the identity provider is currently 'active' or 'inactive'.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The trust type.
        """
        return pulumi.get(self, "type")

