// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PulumiBtp.Btp
{
    /// <summary>
    /// Assigns the entitlement plan of a service, multitenant application, or environment, to a directory. Note that some environments, such as Cloud Foundry, are available by default to all global accounts and their directorys, and therefore are not made available as entitlements.
    /// 
    /// __Tip:__
    /// You must be assigned to the global account admin or viewer role.
    /// 
    /// __Further documentation:__
    /// &lt;https://help.sap.com/docs/btp/sap-business-technology-platform/entitlements-and-quotas&gt;
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Btp = PulumiBtp.Btp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // entitle service plan without quota in a directory
    ///     var alertNotificationService = new Btp.DirectoryEntitlement("alertNotificationService", new()
    ///     {
    ///         DirectoryId = "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
    ///         PlanName = "free",
    ///         ServiceName = "alert-notification",
    ///     });
    /// 
    ///     // entitle service plan with distribution and auto assignment in a directory
    ///     var uasReporting = new Btp.DirectoryEntitlement("uasReporting", new()
    ///     {
    ///         AutoAssign = true,
    ///         DirectoryId = "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
    ///         Distribute = true,
    ///         PlanName = "free",
    ///         ServiceName = "alert-notification",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// terraform
    /// 
    /// ```sh
    ///  $ pulumi import btp:index/directoryEntitlement:DirectoryEntitlement &lt;resource_name&gt; &lt;subaccount_id&gt;,&lt;service_name&gt;,&lt;plan_name&gt;
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import btp:index/directoryEntitlement:DirectoryEntitlement alert_notification_service 6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f,alert-notification,free
    /// ```
    /// </summary>
    [BtpResourceType("btp:index/directoryEntitlement:DirectoryEntitlement")]
    public partial class DirectoryEntitlement : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The quota assigned to the directory.
        /// </summary>
        [Output("amount")]
        public Output<int> Amount { get; private set; } = null!;

        /// <summary>
        /// Determines whether the plans of entitlements that have a numeric quota with the amount specified in `auto_distribute_amount` are automatically allocated to any new subaccount that is added to the directory in the future. For entitlements without a numeric quota, it shows if the plan are assigned to any new subaccount that is added to the directory in the future (`auto_distribute_amount` is not needed). If the `distribute` parameter is set, the same assignment is also made to all subaccounts currently in the directory. Entitlements are subject to available quota in the directory.
        /// </summary>
        [Output("autoAssign")]
        public Output<bool> AutoAssign { get; private set; } = null!;

        /// <summary>
        /// The quota of the specified plan automatically allocated to any new subaccount that is created in the future in the directory. When applying this option, `auto_assign` and/or `distribute` must also be set. Applies only to entitlements that have a numeric quota.
        /// </summary>
        [Output("autoDistributeAmount")]
        public Output<int> AutoDistributeAmount { get; private set; } = null!;

        /// <summary>
        /// The current state of the entitlement. Possible values are:
        /// </summary>
        [Output("category")]
        public Output<string> Category { get; private set; } = null!;

        /// <summary>
        /// The ID of the directory.
        /// </summary>
        [Output("directoryId")]
        public Output<string> DirectoryId { get; private set; } = null!;

        /// <summary>
        /// Defines the assignment of the plan with the quota specified in `auto_distribute_amount` to subaccounts currently located in the specified directory. For entitlements without a numeric quota, the plan is assigned to the subaccounts currently located in the directory (`auto_distribute_amount` is not needed). When applying this option, `auto_assign` must also be set.
        /// </summary>
        [Output("distribute")]
        public Output<bool> Distribute { get; private set; } = null!;

        /// <summary>
        /// The ID of the entitled service plan.
        /// </summary>
        [Output("planId")]
        public Output<string> PlanId { get; private set; } = null!;

        /// <summary>
        /// The name of the entitled service plan.
        /// </summary>
        [Output("planName")]
        public Output<string> PlanName { get; private set; } = null!;

        /// <summary>
        /// The name of the entitled service.
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;


        /// <summary>
        /// Create a DirectoryEntitlement resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DirectoryEntitlement(string name, DirectoryEntitlementArgs args, CustomResourceOptions? options = null)
            : base("btp:index/directoryEntitlement:DirectoryEntitlement", name, args ?? new DirectoryEntitlementArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DirectoryEntitlement(string name, Input<string> id, DirectoryEntitlementState? state = null, CustomResourceOptions? options = null)
            : base("btp:index/directoryEntitlement:DirectoryEntitlement", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lechnerc77/pulumi-btp",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DirectoryEntitlement resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DirectoryEntitlement Get(string name, Input<string> id, DirectoryEntitlementState? state = null, CustomResourceOptions? options = null)
        {
            return new DirectoryEntitlement(name, id, state, options);
        }
    }

    public sealed class DirectoryEntitlementArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The quota assigned to the directory.
        /// </summary>
        [Input("amount")]
        public Input<int>? Amount { get; set; }

        /// <summary>
        /// Determines whether the plans of entitlements that have a numeric quota with the amount specified in `auto_distribute_amount` are automatically allocated to any new subaccount that is added to the directory in the future. For entitlements without a numeric quota, it shows if the plan are assigned to any new subaccount that is added to the directory in the future (`auto_distribute_amount` is not needed). If the `distribute` parameter is set, the same assignment is also made to all subaccounts currently in the directory. Entitlements are subject to available quota in the directory.
        /// </summary>
        [Input("autoAssign")]
        public Input<bool>? AutoAssign { get; set; }

        /// <summary>
        /// The quota of the specified plan automatically allocated to any new subaccount that is created in the future in the directory. When applying this option, `auto_assign` and/or `distribute` must also be set. Applies only to entitlements that have a numeric quota.
        /// </summary>
        [Input("autoDistributeAmount")]
        public Input<int>? AutoDistributeAmount { get; set; }

        /// <summary>
        /// The ID of the directory.
        /// </summary>
        [Input("directoryId", required: true)]
        public Input<string> DirectoryId { get; set; } = null!;

        /// <summary>
        /// Defines the assignment of the plan with the quota specified in `auto_distribute_amount` to subaccounts currently located in the specified directory. For entitlements without a numeric quota, the plan is assigned to the subaccounts currently located in the directory (`auto_distribute_amount` is not needed). When applying this option, `auto_assign` must also be set.
        /// </summary>
        [Input("distribute")]
        public Input<bool>? Distribute { get; set; }

        /// <summary>
        /// The name of the entitled service plan.
        /// </summary>
        [Input("planName", required: true)]
        public Input<string> PlanName { get; set; } = null!;

        /// <summary>
        /// The name of the entitled service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public DirectoryEntitlementArgs()
        {
        }
        public static new DirectoryEntitlementArgs Empty => new DirectoryEntitlementArgs();
    }

    public sealed class DirectoryEntitlementState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The quota assigned to the directory.
        /// </summary>
        [Input("amount")]
        public Input<int>? Amount { get; set; }

        /// <summary>
        /// Determines whether the plans of entitlements that have a numeric quota with the amount specified in `auto_distribute_amount` are automatically allocated to any new subaccount that is added to the directory in the future. For entitlements without a numeric quota, it shows if the plan are assigned to any new subaccount that is added to the directory in the future (`auto_distribute_amount` is not needed). If the `distribute` parameter is set, the same assignment is also made to all subaccounts currently in the directory. Entitlements are subject to available quota in the directory.
        /// </summary>
        [Input("autoAssign")]
        public Input<bool>? AutoAssign { get; set; }

        /// <summary>
        /// The quota of the specified plan automatically allocated to any new subaccount that is created in the future in the directory. When applying this option, `auto_assign` and/or `distribute` must also be set. Applies only to entitlements that have a numeric quota.
        /// </summary>
        [Input("autoDistributeAmount")]
        public Input<int>? AutoDistributeAmount { get; set; }

        /// <summary>
        /// The current state of the entitlement. Possible values are:
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        /// <summary>
        /// The ID of the directory.
        /// </summary>
        [Input("directoryId")]
        public Input<string>? DirectoryId { get; set; }

        /// <summary>
        /// Defines the assignment of the plan with the quota specified in `auto_distribute_amount` to subaccounts currently located in the specified directory. For entitlements without a numeric quota, the plan is assigned to the subaccounts currently located in the directory (`auto_distribute_amount` is not needed). When applying this option, `auto_assign` must also be set.
        /// </summary>
        [Input("distribute")]
        public Input<bool>? Distribute { get; set; }

        /// <summary>
        /// The ID of the entitled service plan.
        /// </summary>
        [Input("planId")]
        public Input<string>? PlanId { get; set; }

        /// <summary>
        /// The name of the entitled service plan.
        /// </summary>
        [Input("planName")]
        public Input<string>? PlanName { get; set; }

        /// <summary>
        /// The name of the entitled service.
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        public DirectoryEntitlementState()
        {
        }
        public static new DirectoryEntitlementState Empty => new DirectoryEntitlementState();
    }
}
