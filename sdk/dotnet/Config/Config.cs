// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace PulumiBtp.Btp
{
    public static class Config
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("btp");

        private static readonly __Value<string?> _cliServerUrl = new __Value<string?>(() => __config.Get("cliServerUrl"));
        /// <summary>
        /// The URL of the BTP CLI server (e.g. `https://cli.btp.cloud.sap`).
        /// </summary>
        public static string? CliServerUrl
        {
            get => _cliServerUrl.Get();
            set => _cliServerUrl.Set(value);
        }

        private static readonly __Value<string?> _globalaccount = new __Value<string?>(() => __config.Get("globalaccount"));
        /// <summary>
        /// The subdomain of the global account in which you want to manage resources. To be found in the cockpit, in the global
        /// account view.
        /// </summary>
        public static string? Globalaccount
        {
            get => _globalaccount.Get();
            set => _globalaccount.Set(value);
        }

        private static readonly __Value<string?> _idp = new __Value<string?>(() => __config.Get("idp"));
        /// <summary>
        /// The identity provider to be used for authentication (default: SAP ID service with origin `sap.default`).
        /// </summary>
        public static string? Idp
        {
            get => _idp.Get();
            set => _idp.Set(value);
        }

        private static readonly __Value<string?> _idtoken = new __Value<string?>(() => __config.Get("idtoken"));
        /// <summary>
        /// A valid id token. To be provided instead of 'username' and 'password'. This can also be sourced from the `BTP_IDTOKEN`
        /// environment variable. (SAP-internal usage only)
        /// </summary>
        public static string? Idtoken
        {
            get => _idtoken.Get();
            set => _idtoken.Set(value);
        }

        private static readonly __Value<string?> _password = new __Value<string?>(() => __config.Get("password"));
        /// <summary>
        /// Your password. Note that two-factor authentication is not supported. This can also be sourced from the `BTP_PASSWORD`
        /// environment variable.
        /// </summary>
        public static string? Password
        {
            get => _password.Get();
            set => _password.Set(value);
        }

        private static readonly __Value<string?> _tlsClientCertificate = new __Value<string?>(() => __config.Get("tlsClientCertificate"));
        /// <summary>
        /// PEM encoded certificate (only required for x509 auth).
        /// </summary>
        public static string? TlsClientCertificate
        {
            get => _tlsClientCertificate.Get();
            set => _tlsClientCertificate.Set(value);
        }

        private static readonly __Value<string?> _tlsClientKey = new __Value<string?>(() => __config.Get("tlsClientKey"));
        /// <summary>
        /// PEM encoded private key (only required for x509 auth).
        /// </summary>
        public static string? TlsClientKey
        {
            get => _tlsClientKey.Get();
            set => _tlsClientKey.Set(value);
        }

        private static readonly __Value<string?> _tlsIdpUrl = new __Value<string?>(() => __config.Get("tlsIdpUrl"));
        /// <summary>
        /// The URL of the identity provider to be used for authentication (only required for x509 auth).
        /// </summary>
        public static string? TlsIdpUrl
        {
            get => _tlsIdpUrl.Get();
            set => _tlsIdpUrl.Set(value);
        }

        private static readonly __Value<string?> _username = new __Value<string?>(() => __config.Get("username"));
        /// <summary>
        /// Your user name, usually an e-mail address. This can also be sourced from the `BTP_USERNAME` environment variable.
        /// </summary>
        public static string? Username
        {
            get => _username.Get();
            set => _username.Set(value);
        }

    }
}
