// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PulumiBtp.Btp
{
    /// <summary>
    /// The provider type for the btp package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [BtpResourceType("pulumi:providers:btp")]
    public partial class Provider : global::Pulumi.ProviderResource
    {
        /// <summary>
        /// The URL of the BTP CLI server (e.g. `https://cli.btp.cloud.sap`).
        /// </summary>
        [Output("cliServerUrl")]
        public Output<string?> CliServerUrl { get; private set; } = null!;

        /// <summary>
        /// The subdomain of the global account in which you want to manage resources. To be found in the cockpit, in the global
        /// account view.
        /// </summary>
        [Output("globalaccount")]
        public Output<string> Globalaccount { get; private set; } = null!;

        /// <summary>
        /// The identity provider to be used for authentication (only required for custom idp).
        /// </summary>
        [Output("idp")]
        public Output<string?> Idp { get; private set; } = null!;

        /// <summary>
        /// A valid id token. To be provided instead of 'username' and 'password'. This can also be sourced from the `BTP_IDTOKEN`
        /// environment variable. (SAP-internal usage only)
        /// </summary>
        [Output("idtoken")]
        public Output<string?> Idtoken { get; private set; } = null!;

        /// <summary>
        /// Your password. Note that two-factor authentication is not supported. This can also be sourced from the `BTP_PASSWORD`
        /// environment variable.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// PEM encoded certificate (only required for x509 auth).
        /// </summary>
        [Output("tlsClientCertificate")]
        public Output<string?> TlsClientCertificate { get; private set; } = null!;

        /// <summary>
        /// PEM encoded private key (only required for x509 auth).
        /// </summary>
        [Output("tlsClientKey")]
        public Output<string?> TlsClientKey { get; private set; } = null!;

        /// <summary>
        /// The URL of the identity provider to be used for authentication (only required for x509 auth).
        /// </summary>
        [Output("tlsIdpUrl")]
        public Output<string?> TlsIdpUrl { get; private set; } = null!;

        /// <summary>
        /// Your user name, usually an e-mail address. This can also be sourced from the `BTP_USERNAME` environment variable.
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs args, CustomResourceOptions? options = null)
            : base("btp", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lechnerc77/pulumi-btp",
                AdditionalSecretOutputs =
                {
                    "idtoken",
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The URL of the BTP CLI server (e.g. `https://cli.btp.cloud.sap`).
        /// </summary>
        [Input("cliServerUrl")]
        public Input<string>? CliServerUrl { get; set; }

        /// <summary>
        /// The subdomain of the global account in which you want to manage resources. To be found in the cockpit, in the global
        /// account view.
        /// </summary>
        [Input("globalaccount", required: true)]
        public Input<string> Globalaccount { get; set; } = null!;

        /// <summary>
        /// The identity provider to be used for authentication (only required for custom idp).
        /// </summary>
        [Input("idp")]
        public Input<string>? Idp { get; set; }

        [Input("idtoken")]
        private Input<string>? _idtoken;

        /// <summary>
        /// A valid id token. To be provided instead of 'username' and 'password'. This can also be sourced from the `BTP_IDTOKEN`
        /// environment variable. (SAP-internal usage only)
        /// </summary>
        public Input<string>? Idtoken
        {
            get => _idtoken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _idtoken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Your password. Note that two-factor authentication is not supported. This can also be sourced from the `BTP_PASSWORD`
        /// environment variable.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// PEM encoded certificate (only required for x509 auth).
        /// </summary>
        [Input("tlsClientCertificate")]
        public Input<string>? TlsClientCertificate { get; set; }

        /// <summary>
        /// PEM encoded private key (only required for x509 auth).
        /// </summary>
        [Input("tlsClientKey")]
        public Input<string>? TlsClientKey { get; set; }

        /// <summary>
        /// The URL of the identity provider to be used for authentication (only required for x509 auth).
        /// </summary>
        [Input("tlsIdpUrl")]
        public Input<string>? TlsIdpUrl { get; set; }

        /// <summary>
        /// Your user name, usually an e-mail address. This can also be sourced from the `BTP_USERNAME` environment variable.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ProviderArgs()
        {
        }
        public static new ProviderArgs Empty => new ProviderArgs();
    }
}
