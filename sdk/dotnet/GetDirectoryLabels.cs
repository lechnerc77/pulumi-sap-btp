// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PulumiBtp.Btp
{
    public static class GetDirectoryLabels
    {
        /// <summary>
        /// Gets all the user-defined labels that are currently assigned to a specific directory.
        /// 
        /// __Tip:__
        /// You must be assigned to the global account admin or viewer role. These roles assignments are not needed for directories of which you are the directory admin.
        /// 
        /// __Further documentation:__
        /// &lt;https://help.sap.com/docs/btp/sap-business-technology-platform/account-model&gt;
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Btp = Pulumi.Btp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Btp.GetDirectoryLabels.Invoke(new()
        ///     {
        ///         DirectoryId = "dd005d8b-1fee-4e6b-b6ff-cb9a197b7fe0",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDirectoryLabelsResult> InvokeAsync(GetDirectoryLabelsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDirectoryLabelsResult>("btp:index/getDirectoryLabels:getDirectoryLabels", args ?? new GetDirectoryLabelsArgs(), options.WithDefaults());

        /// <summary>
        /// Gets all the user-defined labels that are currently assigned to a specific directory.
        /// 
        /// __Tip:__
        /// You must be assigned to the global account admin or viewer role. These roles assignments are not needed for directories of which you are the directory admin.
        /// 
        /// __Further documentation:__
        /// &lt;https://help.sap.com/docs/btp/sap-business-technology-platform/account-model&gt;
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Btp = Pulumi.Btp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Btp.GetDirectoryLabels.Invoke(new()
        ///     {
        ///         DirectoryId = "dd005d8b-1fee-4e6b-b6ff-cb9a197b7fe0",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDirectoryLabelsResult> Invoke(GetDirectoryLabelsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDirectoryLabelsResult>("btp:index/getDirectoryLabels:getDirectoryLabels", args ?? new GetDirectoryLabelsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDirectoryLabelsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the directory.
        /// </summary>
        [Input("directoryId", required: true)]
        public string DirectoryId { get; set; } = null!;

        public GetDirectoryLabelsArgs()
        {
        }
        public static new GetDirectoryLabelsArgs Empty => new GetDirectoryLabelsArgs();
    }

    public sealed class GetDirectoryLabelsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the directory.
        /// </summary>
        [Input("directoryId", required: true)]
        public Input<string> DirectoryId { get; set; } = null!;

        public GetDirectoryLabelsInvokeArgs()
        {
        }
        public static new GetDirectoryLabelsInvokeArgs Empty => new GetDirectoryLabelsInvokeArgs();
    }


    [OutputType]
    public sealed class GetDirectoryLabelsResult
    {
        /// <summary>
        /// The ID of the directory.
        /// </summary>
        public readonly string DirectoryId;
        /// <summary>
        /// The ID of the directory.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Contains the label values
        /// </summary>
        public readonly ImmutableDictionary<string, ImmutableArray<string>> Values;

        [OutputConstructor]
        private GetDirectoryLabelsResult(
            string directoryId,

            string id,

            ImmutableDictionary<string, ImmutableArray<string>> values)
        {
            DirectoryId = directoryId;
            Id = id;
            Values = values;
        }
    }
}
