// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PulumiBtp.Btp
{
    public static class GetGlobalaccount
    {
        /// <summary>
        /// Gets details about a global account.
        /// 
        /// __Tip:__
        /// You must be assigned to the global account admin or viewer role.
        /// 
        /// __Further documentation:__
        /// &lt;https://help.sap.com/docs/btp/sap-business-technology-platform/account-model&gt;
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Btp = Pulumi.Btp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Btp.GetGlobalaccount.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetGlobalaccountResult> InvokeAsync(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGlobalaccountResult>("btp:index/getGlobalaccount:getGlobalaccount", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// Gets details about a global account.
        /// 
        /// __Tip:__
        /// You must be assigned to the global account admin or viewer role.
        /// 
        /// __Further documentation:__
        /// &lt;https://help.sap.com/docs/btp/sap-business-technology-platform/account-model&gt;
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Btp = Pulumi.Btp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Btp.GetGlobalaccount.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetGlobalaccountResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGlobalaccountResult>("btp:index/getGlobalaccount:getGlobalaccount", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetGlobalaccountResult
    {
        /// <summary>
        /// The type of the commercial contract that was signed.
        /// </summary>
        public readonly string CommercialModel;
        /// <summary>
        /// Shows whether the customer of the global account pays only for services that they actually use (consumption-based) or pays for subscribed services at a fixed cost irrespective of consumption (subscription-based).
        /// </summary>
        public readonly bool ConsumptionBased;
        /// <summary>
        /// The status of the customer contract and its associated root global account. Possible values are:
        /// </summary>
        public readonly string ContractStatus;
        public readonly string CostobjectId;
        public readonly string CostobjectType;
        public readonly string CreatedDate;
        public readonly string CrmCustomerId;
        public readonly string CrmTenantId;
        public readonly string Description;
        public readonly string ExpiryDate;
        public readonly string GeoAccess;
        public readonly string Id;
        public readonly string LastModified;
        public readonly string LicenseType;
        public readonly string Name;
        public readonly string Origin;
        public readonly string RenewalDate;
        public readonly string ServiceId;
        public readonly string State;
        public readonly string Subdomain;
        public readonly string Usage;

        [OutputConstructor]
        private GetGlobalaccountResult(
            string commercialModel,

            bool consumptionBased,

            string contractStatus,

            string costobjectId,

            string costobjectType,

            string createdDate,

            string crmCustomerId,

            string crmTenantId,

            string description,

            string expiryDate,

            string geoAccess,

            string id,

            string lastModified,

            string licenseType,

            string name,

            string origin,

            string renewalDate,

            string serviceId,

            string state,

            string subdomain,

            string usage)
        {
            CommercialModel = commercialModel;
            ConsumptionBased = consumptionBased;
            ContractStatus = contractStatus;
            CostobjectId = costobjectId;
            CostobjectType = costobjectType;
            CreatedDate = createdDate;
            CrmCustomerId = crmCustomerId;
            CrmTenantId = crmTenantId;
            Description = description;
            ExpiryDate = expiryDate;
            GeoAccess = geoAccess;
            Id = id;
            LastModified = lastModified;
            LicenseType = licenseType;
            Name = name;
            Origin = origin;
            RenewalDate = renewalDate;
            ServiceId = serviceId;
            State = state;
            Subdomain = subdomain;
            Usage = usage;
        }
    }
}
