// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PulumiBtp.Btp.Outputs
{

    [OutputType]
    public sealed class GetSubaccountSubscriptionsValueResult
    {
        /// <summary>
        /// The list of features specific to this plan.
        /// </summary>
        public readonly ImmutableArray<string> AdditionalPlanFeatures;
        /// <summary>
        /// The ID returned by XSUAA after the app provider has performed a bind of the multitenant application to a XSUAA service instance.
        /// </summary>
        public readonly string AppId;
        /// <summary>
        /// The unique registration name of the deployed multitenant application as defined by the app developer.
        /// </summary>
        public readonly string AppName;
        /// <summary>
        /// The authentication provider of the multitenant application. * XSUAA is the SAP Authorization and Trust Management service that defines scopes and permissions for users as tenants at the global account level. * IAS is Identity Authentication Service that defines scopes and permissions for users in zones (common data isolation systems across systems, SaaS tenants, and services).
        /// </summary>
        public readonly string AuthenticationProvider;
        /// <summary>
        /// The state of the automation solution.
        /// </summary>
        public readonly string AutomationState;
        /// <summary>
        /// The message that describes the automation solution state.
        /// </summary>
        public readonly string AutomationStateMessage;
        /// <summary>
        /// The technical name of the category defined by the app developer to which the multitenant application is grouped in customer-facing UIs.
        /// </summary>
        public readonly string Category;
        /// <summary>
        /// The display name of the category for customer-facing UIs.
        /// </summary>
        public readonly string CategoryDisplayName;
        /// <summary>
        /// The commercial name of the deployed multitenant application as defined by the app developer.
        /// </summary>
        public readonly string CommercialAppName;
        /// <summary>
        /// The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        /// </summary>
        public readonly string CreatedDate;
        /// <summary>
        /// Shows whether the application was developed by a customer. If not, then the application is developed by the cloud operator, such as SAP.
        /// </summary>
        public readonly bool CustomerDeveloped;
        /// <summary>
        /// The description of the multitenant application.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The display name of the application for customer-facing UIs.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The name of the formations solution associated with the multitenant application.
        /// </summary>
        public readonly string FormationSolutionName;
        /// <summary>
        /// The ID of the associated global account.
        /// </summary>
        public readonly string GlobalaccountId;
        /// <summary>
        /// The technical ID generated by XSUAA for a multitenant application when a consumer subscribes to the application.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The application's incident-tracking component provided in metadata for customer-facing UIs.
        /// </summary>
        public readonly string IncidentTrackingComponent;
        /// <summary>
        /// The set of words or phrases assigned to the multitenant application subscription.
        /// </summary>
        public readonly ImmutableDictionary<string, ImmutableArray<string>> Labels;
        /// <summary>
        /// The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        /// </summary>
        public readonly string LastModified;
        /// <summary>
        /// The description of the plan for customer-facing UIs.
        /// </summary>
        public readonly string PlanDescription;
        /// <summary>
        /// The plan name of the application to which the consumer has subscribed.
        /// </summary>
        public readonly string PlanName;
        /// <summary>
        /// The ID of the landscape-specific environment.
        /// </summary>
        public readonly string PlatformEntityId;
        /// <summary>
        /// The total amount the subscribed subaccount is entitled to consume.
        /// </summary>
        public readonly int Quota;
        /// <summary>
        /// The short description of the multitenant application for customer-facing UIs.
        /// </summary>
        public readonly string ShortDescription;
        /// <summary>
        /// The subscription state of the subaccount regarding the multitenant application.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The ID of the subaccount which is subscribed to the multitenant application.
        /// </summary>
        public readonly string SubscribedSubaccountId;
        /// <summary>
        /// The ID of the tenant which is subscribed to a multitenant application.
        /// </summary>
        public readonly string SubscribedTenantId;
        /// <summary>
        /// The URL for app users to launch the subscribed application.
        /// </summary>
        public readonly string SubscriptionUrl;
        /// <summary>
        /// Specifies whether a consumer, whose subaccount is subscribed to the application, can change its subscriptions parameters.
        /// </summary>
        public readonly bool SupportsParametersUpdates;
        /// <summary>
        /// Specifies whether a consumer, whose subaccount is subscribed to the application, can change the subscription to a different plan that is available for this application and subaccount.
        /// </summary>
        public readonly bool SupportsPlanUpdates;
        /// <summary>
        /// The tenant ID of the application provider.
        /// </summary>
        public readonly string TenantId;

        [OutputConstructor]
        private GetSubaccountSubscriptionsValueResult(
            ImmutableArray<string> additionalPlanFeatures,

            string appId,

            string appName,

            string authenticationProvider,

            string automationState,

            string automationStateMessage,

            string category,

            string categoryDisplayName,

            string commercialAppName,

            string createdDate,

            bool customerDeveloped,

            string description,

            string displayName,

            string formationSolutionName,

            string globalaccountId,

            string id,

            string incidentTrackingComponent,

            ImmutableDictionary<string, ImmutableArray<string>> labels,

            string lastModified,

            string planDescription,

            string planName,

            string platformEntityId,

            int quota,

            string shortDescription,

            string state,

            string subscribedSubaccountId,

            string subscribedTenantId,

            string subscriptionUrl,

            bool supportsParametersUpdates,

            bool supportsPlanUpdates,

            string tenantId)
        {
            AdditionalPlanFeatures = additionalPlanFeatures;
            AppId = appId;
            AppName = appName;
            AuthenticationProvider = authenticationProvider;
            AutomationState = automationState;
            AutomationStateMessage = automationStateMessage;
            Category = category;
            CategoryDisplayName = categoryDisplayName;
            CommercialAppName = commercialAppName;
            CreatedDate = createdDate;
            CustomerDeveloped = customerDeveloped;
            Description = description;
            DisplayName = displayName;
            FormationSolutionName = formationSolutionName;
            GlobalaccountId = globalaccountId;
            Id = id;
            IncidentTrackingComponent = incidentTrackingComponent;
            Labels = labels;
            LastModified = lastModified;
            PlanDescription = planDescription;
            PlanName = planName;
            PlatformEntityId = platformEntityId;
            Quota = quota;
            ShortDescription = shortDescription;
            State = state;
            SubscribedSubaccountId = subscribedSubaccountId;
            SubscribedTenantId = subscribedTenantId;
            SubscriptionUrl = subscriptionUrl;
            SupportsParametersUpdates = supportsParametersUpdates;
            SupportsPlanUpdates = supportsPlanUpdates;
            TenantId = tenantId;
        }
    }
}
