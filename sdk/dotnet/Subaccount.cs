// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PulumiBtp.Btp
{
    /// <summary>
    /// Creates a subaccount in a global account or directory.
    /// 
    /// __Tip:__
    /// You must be assigned to the global account or directory admin role.
    /// 
    /// __Further documentation:__
    /// &lt;https://help.sap.com/docs/btp/sap-business-technology-platform/account-model&gt;
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Threading.Tasks;
    /// using Pulumi;
    /// using Btp = Pulumi.Btp;
    /// using Btp = PulumiBtp.Btp;
    /// 
    /// return await Deployment.RunAsync(async() =&gt; 
    /// {
    ///     // create a subaccount in eu30 region (GCP)
    ///     var myProject = new Btp.Subaccount("myProject", new()
    ///     {
    ///         Subdomain = "my-project",
    ///         Region = "eu30",
    ///     });
    /// 
    ///     // create a subaccount in every Azure region which has support for cloud foundry
    ///     var all = await Btp.GetRegions.InvokeAsync();
    /// 
    ///     // create the subaccounts by iterating over the regions with the defined constraints
    ///     var myProjectOnAzure = new List&lt;Btp.Subaccount&gt;();
    ///     foreach (var range in .Select(pair =&gt; new { pair.Key, pair.Value }))
    ///     {
    ///         myProjectOnAzure.Add(new Btp.Subaccount($"myProjectOnAzure-{range.Key}", new()
    ///         {
    ///             Subdomain = $"my-project-{range.Key}",
    ///             Region = range.Key,
    ///         }));
    ///     }
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// terraform
    /// 
    /// ```sh
    ///  $ pulumi import btp:index/subaccount:Subaccount &lt;resource_name&gt; &lt;subaccount_id&gt;
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import btp:index/subaccount:Subaccount my_project 6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f
    /// ```
    /// </summary>
    [BtpResourceType("btp:index/subaccount:Subaccount")]
    public partial class Subaccount : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Shows whether the subaccount can use beta services and applications.
        /// </summary>
        [Output("betaEnabled")]
        public Output<bool> BetaEnabled { get; private set; } = null!;

        /// <summary>
        /// The details of the user that created the subaccount.
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        /// </summary>
        [Output("createdDate")]
        public Output<string> CreatedDate { get; private set; } = null!;

        /// <summary>
        /// A description of the subaccount for customer-facing UIs.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The set of words or phrases assigned to the subaccount.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, ImmutableArray<string>>?> Labels { get; private set; } = null!;

        /// <summary>
        /// The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        /// </summary>
        [Output("lastModified")]
        public Output<string> LastModified { get; private set; } = null!;

        /// <summary>
        /// A descriptive name of the subaccount for customer-facing UIs.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The features of parent entity of the subaccount.
        /// </summary>
        [Output("parentFeatures")]
        public Output<ImmutableArray<string>> ParentFeatures { get; private set; } = null!;

        /// <summary>
        /// The ID of the subaccountâ€™s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
        /// </summary>
        [Output("parentId")]
        public Output<string> ParentId { get; private set; } = null!;

        /// <summary>
        /// The region in which the subaccount was created.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The current state of the subaccount. Possible values are: | state | description | | --- | --- | | `OK` | The CRUD
        /// operation or series of operations completed successfully. | | `STARTED` | CRUD operation on the subaccount has started.
        /// | | `CANCELED` | The operation or processing was canceled by the operator. | | `PROCESSING` | A series of operations
        /// related to the subaccount are in progress. | | `PROCESSING_FAILED` | The processing operations failed. | | `CREATING` |
        /// Creating the subaccount is in progress. | | `CREATION_FAILED` | The creation operation failed, and the subaccount was
        /// not created or was created but cannot be used. | | `UPDATING` | Updating the subaccount is in progress. | |
        /// `UPDATE_FAILED` | The update operation failed, and the subaccount was not updated. | | `UPDATE_DIRECTORY_TYPE_FAILED` |
        /// The update of the directory type failed. | | `UPDATE_ACCOUNT_TYPE_FAILED` | The update of the account type failed. | |
        /// `DELETING` | Deleting the subaccount is in progress. | | `DELETION_FAILED` | The deletion of the subaccount failed, and
        /// the subaccount was not deleted. | | `MOVING` | Moving the subaccount is in progress. | | `MOVE_FAILED` | The moving of
        /// the subaccount failed. | | `MOVING_TO_OTHER_GA` | Moving the subaccount to another global account is in progress. | |
        /// `MOVE_TO_OTHER_GA_FAILED` | Moving the subaccount to another global account failed. | | `PENDING_REVIEW` | The
        /// processing operation has been stopped for reviewing and can be restarted by the operator. | | `MIGRATING` | Migrating
        /// the subaccount from Neo to Cloud Foundry. | | `MIGRATED` | The migration of the subaccount completed. | |
        /// `MIGRATION_FAILED` | The migration of the subaccount failed and the subaccount was not migrated. | |
        /// `ROLLBACK_MIGRATION_PROCESSING` | The migration of the subaccount was rolled back and the subaccount is not migrated. |
        /// | `SUSPENSION_FAILED` | The suspension operations failed. |
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The subdomain that becomes part of the path used to access the authorization tenant of the subaccount. Must be unique within the defined region and cannot be changed after the subaccount has been created.
        /// </summary>
        [Output("subdomain")]
        public Output<string> Subdomain { get; private set; } = null!;

        /// <summary>
        /// Shows whether the subaccount is used for production purposes. This flag can help your cloud operator to take appropriate action when handling incidents that are related to mission-critical accounts in production systems. Do not apply for subaccounts that are used for nonproduction purposes, such as development, testing, and demos. Applying this setting this does not modify the subaccount. Possible values are:
        /// </summary>
        [Output("usage")]
        public Output<string> Usage { get; private set; } = null!;


        /// <summary>
        /// Create a Subaccount resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Subaccount(string name, SubaccountArgs args, CustomResourceOptions? options = null)
            : base("btp:index/subaccount:Subaccount", name, args ?? new SubaccountArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Subaccount(string name, Input<string> id, SubaccountState? state = null, CustomResourceOptions? options = null)
            : base("btp:index/subaccount:Subaccount", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lechnerc77/pulumi-btp",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Subaccount resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Subaccount Get(string name, Input<string> id, SubaccountState? state = null, CustomResourceOptions? options = null)
        {
            return new Subaccount(name, id, state, options);
        }
    }

    public sealed class SubaccountArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Shows whether the subaccount can use beta services and applications.
        /// </summary>
        [Input("betaEnabled")]
        public Input<bool>? BetaEnabled { get; set; }

        /// <summary>
        /// A description of the subaccount for customer-facing UIs.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<ImmutableArray<string>>? _labels;

        /// <summary>
        /// The set of words or phrases assigned to the subaccount.
        /// </summary>
        public InputMap<ImmutableArray<string>> Labels
        {
            get => _labels ?? (_labels = new InputMap<ImmutableArray<string>>());
            set => _labels = value;
        }

        /// <summary>
        /// A descriptive name of the subaccount for customer-facing UIs.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the subaccountâ€™s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
        /// </summary>
        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        /// <summary>
        /// The region in which the subaccount was created.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// The subdomain that becomes part of the path used to access the authorization tenant of the subaccount. Must be unique within the defined region and cannot be changed after the subaccount has been created.
        /// </summary>
        [Input("subdomain", required: true)]
        public Input<string> Subdomain { get; set; } = null!;

        /// <summary>
        /// Shows whether the subaccount is used for production purposes. This flag can help your cloud operator to take appropriate action when handling incidents that are related to mission-critical accounts in production systems. Do not apply for subaccounts that are used for nonproduction purposes, such as development, testing, and demos. Applying this setting this does not modify the subaccount. Possible values are:
        /// </summary>
        [Input("usage")]
        public Input<string>? Usage { get; set; }

        public SubaccountArgs()
        {
        }
        public static new SubaccountArgs Empty => new SubaccountArgs();
    }

    public sealed class SubaccountState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Shows whether the subaccount can use beta services and applications.
        /// </summary>
        [Input("betaEnabled")]
        public Input<bool>? BetaEnabled { get; set; }

        /// <summary>
        /// The details of the user that created the subaccount.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        /// </summary>
        [Input("createdDate")]
        public Input<string>? CreatedDate { get; set; }

        /// <summary>
        /// A description of the subaccount for customer-facing UIs.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<ImmutableArray<string>>? _labels;

        /// <summary>
        /// The set of words or phrases assigned to the subaccount.
        /// </summary>
        public InputMap<ImmutableArray<string>> Labels
        {
            get => _labels ?? (_labels = new InputMap<ImmutableArray<string>>());
            set => _labels = value;
        }

        /// <summary>
        /// The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        /// </summary>
        [Input("lastModified")]
        public Input<string>? LastModified { get; set; }

        /// <summary>
        /// A descriptive name of the subaccount for customer-facing UIs.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parentFeatures")]
        private InputList<string>? _parentFeatures;

        /// <summary>
        /// The features of parent entity of the subaccount.
        /// </summary>
        public InputList<string> ParentFeatures
        {
            get => _parentFeatures ?? (_parentFeatures = new InputList<string>());
            set => _parentFeatures = value;
        }

        /// <summary>
        /// The ID of the subaccountâ€™s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
        /// </summary>
        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        /// <summary>
        /// The region in which the subaccount was created.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The current state of the subaccount. Possible values are: | state | description | | --- | --- | | `OK` | The CRUD
        /// operation or series of operations completed successfully. | | `STARTED` | CRUD operation on the subaccount has started.
        /// | | `CANCELED` | The operation or processing was canceled by the operator. | | `PROCESSING` | A series of operations
        /// related to the subaccount are in progress. | | `PROCESSING_FAILED` | The processing operations failed. | | `CREATING` |
        /// Creating the subaccount is in progress. | | `CREATION_FAILED` | The creation operation failed, and the subaccount was
        /// not created or was created but cannot be used. | | `UPDATING` | Updating the subaccount is in progress. | |
        /// `UPDATE_FAILED` | The update operation failed, and the subaccount was not updated. | | `UPDATE_DIRECTORY_TYPE_FAILED` |
        /// The update of the directory type failed. | | `UPDATE_ACCOUNT_TYPE_FAILED` | The update of the account type failed. | |
        /// `DELETING` | Deleting the subaccount is in progress. | | `DELETION_FAILED` | The deletion of the subaccount failed, and
        /// the subaccount was not deleted. | | `MOVING` | Moving the subaccount is in progress. | | `MOVE_FAILED` | The moving of
        /// the subaccount failed. | | `MOVING_TO_OTHER_GA` | Moving the subaccount to another global account is in progress. | |
        /// `MOVE_TO_OTHER_GA_FAILED` | Moving the subaccount to another global account failed. | | `PENDING_REVIEW` | The
        /// processing operation has been stopped for reviewing and can be restarted by the operator. | | `MIGRATING` | Migrating
        /// the subaccount from Neo to Cloud Foundry. | | `MIGRATED` | The migration of the subaccount completed. | |
        /// `MIGRATION_FAILED` | The migration of the subaccount failed and the subaccount was not migrated. | |
        /// `ROLLBACK_MIGRATION_PROCESSING` | The migration of the subaccount was rolled back and the subaccount is not migrated. |
        /// | `SUSPENSION_FAILED` | The suspension operations failed. |
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The subdomain that becomes part of the path used to access the authorization tenant of the subaccount. Must be unique within the defined region and cannot be changed after the subaccount has been created.
        /// </summary>
        [Input("subdomain")]
        public Input<string>? Subdomain { get; set; }

        /// <summary>
        /// Shows whether the subaccount is used for production purposes. This flag can help your cloud operator to take appropriate action when handling incidents that are related to mission-critical accounts in production systems. Do not apply for subaccounts that are used for nonproduction purposes, such as development, testing, and demos. Applying this setting this does not modify the subaccount. Possible values are:
        /// </summary>
        [Input("usage")]
        public Input<string>? Usage { get; set; }

        public SubaccountState()
        {
        }
        public static new SubaccountState Empty => new SubaccountState();
    }
}
