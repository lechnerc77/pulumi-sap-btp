// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PulumiBtp.Btp
{
    public static class GetSubaccountUser
    {
        /// <summary>
        /// Shows registered users in a subaccount. Users belong to one of the identity providers (IdPs) of the subaccount.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Btp = Pulumi.Btp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var someone = Btp.GetSubaccountUser.Invoke(new()
        ///     {
        ///         SubaccountId = "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
        ///         UserName = "john.doe@mycompany.com",
        ///     });
        /// 
        ///     var someoneElse = Btp.GetSubaccountUser.Invoke(new()
        ///     {
        ///         Origin = "my-custom-idp",
        ///         SubaccountId = "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
        ///         UserName = "jane.doe@mycompany.com",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSubaccountUserResult> InvokeAsync(GetSubaccountUserArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubaccountUserResult>("btp:index/getSubaccountUser:getSubaccountUser", args ?? new GetSubaccountUserArgs(), options.WithDefaults());

        /// <summary>
        /// Shows registered users in a subaccount. Users belong to one of the identity providers (IdPs) of the subaccount.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Btp = Pulumi.Btp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var someone = Btp.GetSubaccountUser.Invoke(new()
        ///     {
        ///         SubaccountId = "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
        ///         UserName = "john.doe@mycompany.com",
        ///     });
        /// 
        ///     var someoneElse = Btp.GetSubaccountUser.Invoke(new()
        ///     {
        ///         Origin = "my-custom-idp",
        ///         SubaccountId = "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
        ///         UserName = "jane.doe@mycompany.com",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSubaccountUserResult> Invoke(GetSubaccountUserInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubaccountUserResult>("btp:index/getSubaccountUser:getSubaccountUser", args ?? new GetSubaccountUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubaccountUserArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The identity provider that hosts the user. Only needed for custom identity provider.
        /// </summary>
        [Input("origin")]
        public string? Origin { get; set; }

        /// <summary>
        /// The ID of the subaccount.
        /// </summary>
        [Input("subaccountId", required: true)]
        public string SubaccountId { get; set; } = null!;

        /// <summary>
        /// The username of the user.
        /// </summary>
        [Input("userName", required: true)]
        public string UserName { get; set; } = null!;

        public GetSubaccountUserArgs()
        {
        }
        public static new GetSubaccountUserArgs Empty => new GetSubaccountUserArgs();
    }

    public sealed class GetSubaccountUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The identity provider that hosts the user. Only needed for custom identity provider.
        /// </summary>
        [Input("origin")]
        public Input<string>? Origin { get; set; }

        /// <summary>
        /// The ID of the subaccount.
        /// </summary>
        [Input("subaccountId", required: true)]
        public Input<string> SubaccountId { get; set; } = null!;

        /// <summary>
        /// The username of the user.
        /// </summary>
        [Input("userName", required: true)]
        public Input<string> UserName { get; set; } = null!;

        public GetSubaccountUserInvokeArgs()
        {
        }
        public static new GetSubaccountUserInvokeArgs Empty => new GetSubaccountUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubaccountUserResult
    {
        /// <summary>
        /// Shows if the account is still in use.
        /// </summary>
        public readonly bool Active;
        /// <summary>
        /// The e-mail address of the user.
        /// </summary>
        public readonly string Email;
        /// <summary>
        /// The last name of the user.
        /// </summary>
        public readonly string FamilyName;
        /// <summary>
        /// The given name of the user.
        /// </summary>
        public readonly string GivenName;
        /// <summary>
        /// The ID of the user.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The identity provider that hosts the user. Only needed for custom identity provider.
        /// </summary>
        public readonly string Origin;
        /// <summary>
        /// The set of role collections, which are assigned to the user.
        /// </summary>
        public readonly ImmutableArray<string> RoleCollections;
        /// <summary>
        /// The ID of the subaccount.
        /// </summary>
        public readonly string SubaccountId;
        /// <summary>
        /// The username of the user.
        /// </summary>
        public readonly string UserName;
        /// <summary>
        /// The verification status of the user.
        /// </summary>
        public readonly bool Verified;

        [OutputConstructor]
        private GetSubaccountUserResult(
            bool active,

            string email,

            string familyName,

            string givenName,

            string id,

            string origin,

            ImmutableArray<string> roleCollections,

            string subaccountId,

            string userName,

            bool verified)
        {
            Active = active;
            Email = email;
            FamilyName = familyName;
            GivenName = givenName;
            Id = id;
            Origin = origin;
            RoleCollections = roleCollections;
            SubaccountId = subaccountId;
            UserName = userName;
            Verified = verified;
        }
    }
}
