// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PulumiBtp.Btp
{
    /// <summary>
    /// Assigns a user to a role collection on a directory level.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Btp = PulumiBtp.Btp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // assign a single user to a role collection on directory level
    ///     var jd = new Btp.DirectoryRoleCollectionAssignment("jd", new()
    ///     {
    ///         DirectoryId = "ddfc2206-5f11-48ed-a1ec-29010af70050",
    ///         RoleCollectionName = "Directory Viewer",
    ///         UserName = "john.doe@mycompany.com",
    ///     });
    /// 
    ///     // assign a group to a role collection on directory level
    ///     var directoryViewerGroup = new Btp.DirectoryRoleCollectionAssignment("directoryViewerGroup", new()
    ///     {
    ///         DirectoryId = "ddfc2206-5f11-48ed-a1ec-29010af70050",
    ///         GroupName = "directory-viewer-group",
    ///         RoleCollectionName = "Directory Viewer",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [BtpResourceType("btp:index/directoryRoleCollectionAssignment:DirectoryRoleCollectionAssignment")]
    public partial class DirectoryRoleCollectionAssignment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the attribute to assign.
        /// </summary>
        [Output("attributeName")]
        public Output<string?> AttributeName { get; private set; } = null!;

        /// <summary>
        /// The value of the attribute to assign.
        /// </summary>
        [Output("attributeValue")]
        public Output<string?> AttributeValue { get; private set; } = null!;

        /// <summary>
        /// The ID of the directory.
        /// </summary>
        [Output("directoryId")]
        public Output<string> DirectoryId { get; private set; } = null!;

        /// <summary>
        /// The name of the group to assign.
        /// </summary>
        [Output("groupName")]
        public Output<string?> GroupName { get; private set; } = null!;

        /// <summary>
        /// The identity provider that hosts the user or a group. Only needed for custom identity provider.
        /// </summary>
        [Output("origin")]
        public Output<string> Origin { get; private set; } = null!;

        /// <summary>
        /// The name of the role collection.
        /// </summary>
        [Output("roleCollectionName")]
        public Output<string> RoleCollectionName { get; private set; } = null!;

        /// <summary>
        /// The username of the user to assign.
        /// </summary>
        [Output("userName")]
        public Output<string?> UserName { get; private set; } = null!;


        /// <summary>
        /// Create a DirectoryRoleCollectionAssignment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DirectoryRoleCollectionAssignment(string name, DirectoryRoleCollectionAssignmentArgs args, CustomResourceOptions? options = null)
            : base("btp:index/directoryRoleCollectionAssignment:DirectoryRoleCollectionAssignment", name, args ?? new DirectoryRoleCollectionAssignmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DirectoryRoleCollectionAssignment(string name, Input<string> id, DirectoryRoleCollectionAssignmentState? state = null, CustomResourceOptions? options = null)
            : base("btp:index/directoryRoleCollectionAssignment:DirectoryRoleCollectionAssignment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lechnerc77/pulumi-btp",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DirectoryRoleCollectionAssignment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DirectoryRoleCollectionAssignment Get(string name, Input<string> id, DirectoryRoleCollectionAssignmentState? state = null, CustomResourceOptions? options = null)
        {
            return new DirectoryRoleCollectionAssignment(name, id, state, options);
        }
    }

    public sealed class DirectoryRoleCollectionAssignmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the attribute to assign.
        /// </summary>
        [Input("attributeName")]
        public Input<string>? AttributeName { get; set; }

        /// <summary>
        /// The value of the attribute to assign.
        /// </summary>
        [Input("attributeValue")]
        public Input<string>? AttributeValue { get; set; }

        /// <summary>
        /// The ID of the directory.
        /// </summary>
        [Input("directoryId", required: true)]
        public Input<string> DirectoryId { get; set; } = null!;

        /// <summary>
        /// The name of the group to assign.
        /// </summary>
        [Input("groupName")]
        public Input<string>? GroupName { get; set; }

        /// <summary>
        /// The identity provider that hosts the user or a group. Only needed for custom identity provider.
        /// </summary>
        [Input("origin")]
        public Input<string>? Origin { get; set; }

        /// <summary>
        /// The name of the role collection.
        /// </summary>
        [Input("roleCollectionName", required: true)]
        public Input<string> RoleCollectionName { get; set; } = null!;

        /// <summary>
        /// The username of the user to assign.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        public DirectoryRoleCollectionAssignmentArgs()
        {
        }
        public static new DirectoryRoleCollectionAssignmentArgs Empty => new DirectoryRoleCollectionAssignmentArgs();
    }

    public sealed class DirectoryRoleCollectionAssignmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the attribute to assign.
        /// </summary>
        [Input("attributeName")]
        public Input<string>? AttributeName { get; set; }

        /// <summary>
        /// The value of the attribute to assign.
        /// </summary>
        [Input("attributeValue")]
        public Input<string>? AttributeValue { get; set; }

        /// <summary>
        /// The ID of the directory.
        /// </summary>
        [Input("directoryId")]
        public Input<string>? DirectoryId { get; set; }

        /// <summary>
        /// The name of the group to assign.
        /// </summary>
        [Input("groupName")]
        public Input<string>? GroupName { get; set; }

        /// <summary>
        /// The identity provider that hosts the user or a group. Only needed for custom identity provider.
        /// </summary>
        [Input("origin")]
        public Input<string>? Origin { get; set; }

        /// <summary>
        /// The name of the role collection.
        /// </summary>
        [Input("roleCollectionName")]
        public Input<string>? RoleCollectionName { get; set; }

        /// <summary>
        /// The username of the user to assign.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        public DirectoryRoleCollectionAssignmentState()
        {
        }
        public static new DirectoryRoleCollectionAssignmentState Empty => new DirectoryRoleCollectionAssignmentState();
    }
}
