// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PulumiBtp.Btp
{
    public static class GetGlobalaccountRole
    {
        /// <summary>
        /// Gets details about a specific global account role.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Btp = Pulumi.Btp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var userRoleAuditor = Btp.GetGlobalaccountRole.Invoke(new()
        ///     {
        ///         AppId = "xsuaa!t1",
        ///         Name = "User and Role Auditor",
        ///         RoleTemplateName = "xsuaa_auditor",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetGlobalaccountRoleResult> InvokeAsync(GetGlobalaccountRoleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGlobalaccountRoleResult>("btp:index/getGlobalaccountRole:getGlobalaccountRole", args ?? new GetGlobalaccountRoleArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details about a specific global account role.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Btp = Pulumi.Btp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var userRoleAuditor = Btp.GetGlobalaccountRole.Invoke(new()
        ///     {
        ///         AppId = "xsuaa!t1",
        ///         Name = "User and Role Auditor",
        ///         RoleTemplateName = "xsuaa_auditor",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetGlobalaccountRoleResult> Invoke(GetGlobalaccountRoleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGlobalaccountRoleResult>("btp:index/getGlobalaccountRole:getGlobalaccountRole", args ?? new GetGlobalaccountRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGlobalaccountRoleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the xsuaa application.
        /// </summary>
        [Input("appId", required: true)]
        public string AppId { get; set; } = null!;

        /// <summary>
        /// The name of the role.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The name of the role template.
        /// </summary>
        [Input("roleTemplateName", required: true)]
        public string RoleTemplateName { get; set; } = null!;

        public GetGlobalaccountRoleArgs()
        {
        }
        public static new GetGlobalaccountRoleArgs Empty => new GetGlobalaccountRoleArgs();
    }

    public sealed class GetGlobalaccountRoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the xsuaa application.
        /// </summary>
        [Input("appId", required: true)]
        public Input<string> AppId { get; set; } = null!;

        /// <summary>
        /// The name of the role.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The name of the role template.
        /// </summary>
        [Input("roleTemplateName", required: true)]
        public Input<string> RoleTemplateName { get; set; } = null!;

        public GetGlobalaccountRoleInvokeArgs()
        {
        }
        public static new GetGlobalaccountRoleInvokeArgs Empty => new GetGlobalaccountRoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetGlobalaccountRoleResult
    {
        /// <summary>
        /// The ID of the xsuaa application.
        /// </summary>
        public readonly string AppId;
        /// <summary>
        /// The description of the role.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The ID of the global account
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the role.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Shows whether the role can be modified or not.
        /// </summary>
        public readonly bool ReadOnly;
        /// <summary>
        /// The name of the role template.
        /// </summary>
        public readonly string RoleTemplateName;
        /// <summary>
        /// The scopes available with this role.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGlobalaccountRoleScopeResult> Scopes;

        [OutputConstructor]
        private GetGlobalaccountRoleResult(
            string appId,

            string description,

            string id,

            string name,

            bool readOnly,

            string roleTemplateName,

            ImmutableArray<Outputs.GetGlobalaccountRoleScopeResult> scopes)
        {
            AppId = appId;
            Description = description;
            Id = id;
            Name = name;
            ReadOnly = readOnly;
            RoleTemplateName = roleTemplateName;
            Scopes = scopes;
        }
    }
}
