// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PulumiBtp.Btp
{
    public static class GetSubaccountTrustConfiguration
    {
        /// <summary>
        /// Gets details about a trust configuration.
        /// 
        /// __Tip:__
        /// You must be viewer or administrator of the subaccount.
        /// 
        /// __Further documentation:__
        /// &lt;https://help.sap.com/docs/btp/sap-btp-neo-environment/platform-identity-provider&gt;
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Btp = Pulumi.Btp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Btp.GetSubaccountTrustConfiguration.Invoke(new()
        ///     {
        ///         Origin = "sap.default",
        ///         SubaccountId = "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
        ///     });
        /// 
        ///     var custom = Btp.GetSubaccountTrustConfiguration.Invoke(new()
        ///     {
        ///         Origin = "terraformint-platform",
        ///         SubaccountId = "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSubaccountTrustConfigurationResult> InvokeAsync(GetSubaccountTrustConfigurationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubaccountTrustConfigurationResult>("btp:index/getSubaccountTrustConfiguration:getSubaccountTrustConfiguration", args ?? new GetSubaccountTrustConfigurationArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details about a trust configuration.
        /// 
        /// __Tip:__
        /// You must be viewer or administrator of the subaccount.
        /// 
        /// __Further documentation:__
        /// &lt;https://help.sap.com/docs/btp/sap-btp-neo-environment/platform-identity-provider&gt;
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Btp = Pulumi.Btp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Btp.GetSubaccountTrustConfiguration.Invoke(new()
        ///     {
        ///         Origin = "sap.default",
        ///         SubaccountId = "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
        ///     });
        /// 
        ///     var custom = Btp.GetSubaccountTrustConfiguration.Invoke(new()
        ///     {
        ///         Origin = "terraformint-platform",
        ///         SubaccountId = "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSubaccountTrustConfigurationResult> Invoke(GetSubaccountTrustConfigurationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubaccountTrustConfigurationResult>("btp:index/getSubaccountTrustConfiguration:getSubaccountTrustConfiguration", args ?? new GetSubaccountTrustConfigurationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubaccountTrustConfigurationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The origin of the identity provider.
        /// </summary>
        [Input("origin", required: true)]
        public string Origin { get; set; } = null!;

        /// <summary>
        /// The ID of the subaccount.
        /// </summary>
        [Input("subaccountId", required: true)]
        public string SubaccountId { get; set; } = null!;

        public GetSubaccountTrustConfigurationArgs()
        {
        }
        public static new GetSubaccountTrustConfigurationArgs Empty => new GetSubaccountTrustConfigurationArgs();
    }

    public sealed class GetSubaccountTrustConfigurationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The origin of the identity provider.
        /// </summary>
        [Input("origin", required: true)]
        public Input<string> Origin { get; set; } = null!;

        /// <summary>
        /// The ID of the subaccount.
        /// </summary>
        [Input("subaccountId", required: true)]
        public Input<string> SubaccountId { get; set; } = null!;

        public GetSubaccountTrustConfigurationInvokeArgs()
        {
        }
        public static new GetSubaccountTrustConfigurationInvokeArgs Empty => new GetSubaccountTrustConfigurationInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubaccountTrustConfigurationResult
    {
        /// <summary>
        /// Shows whether any user from the tenant can log in. If not set, only the ones who already have a shadow user can log in.
        /// </summary>
        public readonly bool AutoCreateShadowUsers;
        /// <summary>
        /// Shows whether end users can choose the trust configuration for login. If not set, the trust configuration can remain active, however only application users that explicitly specify the origin key can use if for login.
        /// </summary>
        public readonly bool AvailableForUserLogon;
        /// <summary>
        /// The description of the trust configuration.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The tenant's domain which should be used for user logon.
        /// </summary>
        public readonly string Domain;
        /// <summary>
        /// The origin of the identity provider.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the Identity Authentication tenant the subaccount is connected to.
        /// </summary>
        public readonly string IdentityProvider;
        /// <summary>
        /// Short string that helps users to identify the link for login.
        /// </summary>
        public readonly string LinkText;
        /// <summary>
        /// The display name of the trust configuration.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The origin of the identity provider.
        /// </summary>
        public readonly string Origin;
        /// <summary>
        /// The protocol used to establish trust with the identity provider.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// Shows whether the trust configuration can be modified.
        /// </summary>
        public readonly bool ReadOnly;
        /// <summary>
        /// Shows whether the identity provider is currently 'active' or 'inactive'.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The ID of the subaccount.
        /// </summary>
        public readonly string SubaccountId;
        /// <summary>
        /// The trust type.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetSubaccountTrustConfigurationResult(
            bool autoCreateShadowUsers,

            bool availableForUserLogon,

            string description,

            string domain,

            string id,

            string identityProvider,

            string linkText,

            string name,

            string origin,

            string protocol,

            bool readOnly,

            string status,

            string subaccountId,

            string type)
        {
            AutoCreateShadowUsers = autoCreateShadowUsers;
            AvailableForUserLogon = availableForUserLogon;
            Description = description;
            Domain = domain;
            Id = id;
            IdentityProvider = identityProvider;
            LinkText = linkText;
            Name = name;
            Origin = origin;
            Protocol = protocol;
            ReadOnly = readOnly;
            Status = status;
            SubaccountId = subaccountId;
            Type = type;
        }
    }
}
