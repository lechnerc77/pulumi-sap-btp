// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PulumiBtp.Btp
{
    public static class GetSubaccountSubscription
    {
        /// <summary>
        /// Gets details of a specific multitenant application to which a subaccount is entitled to subscribe. If this application is in a different global account than the current one, you need to specify its plan with '--plan'.
        /// 
        /// __Tip:__
        /// You must be assigned to the subaccount admin or viewer role.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Btp = Pulumi.Btp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var contentAgentUiFree = Btp.GetSubaccountSubscription.Invoke(new()
        ///     {
        ///         AppName = "content-agent-ui",
        ///         PlanName = "free",
        ///         SubaccountId = "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSubaccountSubscriptionResult> InvokeAsync(GetSubaccountSubscriptionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubaccountSubscriptionResult>("btp:index/getSubaccountSubscription:getSubaccountSubscription", args ?? new GetSubaccountSubscriptionArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details of a specific multitenant application to which a subaccount is entitled to subscribe. If this application is in a different global account than the current one, you need to specify its plan with '--plan'.
        /// 
        /// __Tip:__
        /// You must be assigned to the subaccount admin or viewer role.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Btp = Pulumi.Btp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var contentAgentUiFree = Btp.GetSubaccountSubscription.Invoke(new()
        ///     {
        ///         AppName = "content-agent-ui",
        ///         PlanName = "free",
        ///         SubaccountId = "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSubaccountSubscriptionResult> Invoke(GetSubaccountSubscriptionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubaccountSubscriptionResult>("btp:index/getSubaccountSubscription:getSubaccountSubscription", args ?? new GetSubaccountSubscriptionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubaccountSubscriptionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique registration name of the deployed multitenant application as defined by the app developer.
        /// </summary>
        [Input("appName", required: true)]
        public string AppName { get; set; } = null!;

        /// <summary>
        /// The plan name of the application to which the consumer has subscribed.
        /// </summary>
        [Input("planName", required: true)]
        public string PlanName { get; set; } = null!;

        /// <summary>
        /// The ID of the subaccount.
        /// </summary>
        [Input("subaccountId", required: true)]
        public string SubaccountId { get; set; } = null!;

        public GetSubaccountSubscriptionArgs()
        {
        }
        public static new GetSubaccountSubscriptionArgs Empty => new GetSubaccountSubscriptionArgs();
    }

    public sealed class GetSubaccountSubscriptionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique registration name of the deployed multitenant application as defined by the app developer.
        /// </summary>
        [Input("appName", required: true)]
        public Input<string> AppName { get; set; } = null!;

        /// <summary>
        /// The plan name of the application to which the consumer has subscribed.
        /// </summary>
        [Input("planName", required: true)]
        public Input<string> PlanName { get; set; } = null!;

        /// <summary>
        /// The ID of the subaccount.
        /// </summary>
        [Input("subaccountId", required: true)]
        public Input<string> SubaccountId { get; set; } = null!;

        public GetSubaccountSubscriptionInvokeArgs()
        {
        }
        public static new GetSubaccountSubscriptionInvokeArgs Empty => new GetSubaccountSubscriptionInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubaccountSubscriptionResult
    {
        /// <summary>
        /// The list of features specific to this plan.
        /// </summary>
        public readonly ImmutableArray<string> AdditionalPlanFeatures;
        /// <summary>
        /// The ID returned by XSUAA after the app provider has performed a bind of the multitenant application to a XSUAA service instance.
        /// </summary>
        public readonly string AppId;
        /// <summary>
        /// The unique registration name of the deployed multitenant application as defined by the app developer.
        /// </summary>
        public readonly string AppName;
        /// <summary>
        /// The authentication provider of the multitenant application. * XSUAA is the SAP Authorization and Trust Management service that defines scopes and permissions for users as tenants at the global account level. * IAS is Identity Authentication Service that defines scopes and permissions for users in zones (common data isolation systems across systems, SaaS tenants, and services).
        /// </summary>
        public readonly string AuthenticationProvider;
        /// <summary>
        /// The technical name of the category defined by the app developer to which the multitenant application is grouped in customer-facing UIs.
        /// </summary>
        public readonly string Category;
        /// <summary>
        /// The commercial name of the deployed multitenant application as defined by the app developer.
        /// </summary>
        public readonly string CommercialAppName;
        /// <summary>
        /// The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        /// </summary>
        public readonly string CreatedDate;
        /// <summary>
        /// Shows whether the application was developed by a customer. If not, then the application is developed by the cloud operator, such as SAP.
        /// </summary>
        public readonly bool CustomerDeveloped;
        /// <summary>
        /// The description of the multitenant application.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The display name of the application for customer-facing UIs.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The name of the formations solution associated with the multitenant application.
        /// </summary>
        public readonly string FormationSolutionName;
        /// <summary>
        /// The ID of the associated global account.
        /// </summary>
        public readonly string GlobalaccountId;
        /// <summary>
        /// The technical ID generated by XSUAA for a multitenant application when a consumer subscribes to the application.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The set of words or phrases assigned to the multitenant application subscription.
        /// </summary>
        public readonly ImmutableDictionary<string, ImmutableArray<string>> Labels;
        /// <summary>
        /// The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        /// </summary>
        public readonly string LastModified;
        /// <summary>
        /// The parameters of the subscription as a valid JSON object.
        /// </summary>
        public readonly string Parameters;
        /// <summary>
        /// The plan name of the application to which the consumer has subscribed.
        /// </summary>
        public readonly string PlanName;
        /// <summary>
        /// The ID of the landscape-specific environment.
        /// </summary>
        public readonly string PlatformEntityId;
        /// <summary>
        /// The total amount the subscribed subaccount is entitled to consume.
        /// </summary>
        public readonly int Quota;
        /// <summary>
        /// The subscription state of the subaccount regarding the multitenant application.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The ID of the subaccount.
        /// </summary>
        public readonly string SubaccountId;
        /// <summary>
        /// The ID of the subaccount which is subscribed to the multitenant application.
        /// </summary>
        public readonly string SubscribedSubaccountId;
        /// <summary>
        /// The ID of the tenant which is subscribed to a multitenant application.
        /// </summary>
        public readonly string SubscribedTenantId;
        /// <summary>
        /// The URL for app users to launch the subscribed application.
        /// </summary>
        public readonly string SubscriptionUrl;
        /// <summary>
        /// Specifies whether a consumer, whose subaccount is subscribed to the application, can change its subscriptions parameters.
        /// </summary>
        public readonly bool SupportsParametersUpdates;
        /// <summary>
        /// Specifies whether a consumer, whose subaccount is subscribed to the application, can change the subscription to a different plan that is available for this application and subaccount.
        /// </summary>
        public readonly bool SupportsPlanUpdates;
        /// <summary>
        /// The tenant ID of the application provider.
        /// </summary>
        public readonly string TenantId;

        [OutputConstructor]
        private GetSubaccountSubscriptionResult(
            ImmutableArray<string> additionalPlanFeatures,

            string appId,

            string appName,

            string authenticationProvider,

            string category,

            string commercialAppName,

            string createdDate,

            bool customerDeveloped,

            string description,

            string displayName,

            string formationSolutionName,

            string globalaccountId,

            string id,

            ImmutableDictionary<string, ImmutableArray<string>> labels,

            string lastModified,

            string parameters,

            string planName,

            string platformEntityId,

            int quota,

            string state,

            string subaccountId,

            string subscribedSubaccountId,

            string subscribedTenantId,

            string subscriptionUrl,

            bool supportsParametersUpdates,

            bool supportsPlanUpdates,

            string tenantId)
        {
            AdditionalPlanFeatures = additionalPlanFeatures;
            AppId = appId;
            AppName = appName;
            AuthenticationProvider = authenticationProvider;
            Category = category;
            CommercialAppName = commercialAppName;
            CreatedDate = createdDate;
            CustomerDeveloped = customerDeveloped;
            Description = description;
            DisplayName = displayName;
            FormationSolutionName = formationSolutionName;
            GlobalaccountId = globalaccountId;
            Id = id;
            Labels = labels;
            LastModified = lastModified;
            Parameters = parameters;
            PlanName = planName;
            PlatformEntityId = platformEntityId;
            Quota = quota;
            State = state;
            SubaccountId = subaccountId;
            SubscribedSubaccountId = subscribedSubaccountId;
            SubscribedTenantId = subscribedTenantId;
            SubscriptionUrl = subscriptionUrl;
            SupportsParametersUpdates = supportsParametersUpdates;
            SupportsPlanUpdates = supportsPlanUpdates;
            TenantId = tenantId;
        }
    }
}
