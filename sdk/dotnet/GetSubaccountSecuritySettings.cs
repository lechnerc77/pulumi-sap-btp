// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PulumiBtp.Btp
{
    public static class GetSubaccountSecuritySettings
    {
        /// <summary>
        /// Gets the security settings of a subaccount.
        /// 
        /// __Tip:__
        /// You must be viewer or administrator of the subaccount.
        /// 
        /// __Further documentation:__
        /// &lt;https://help.sap.com/docs/btp/sap-business-technology-platform/configure-trusted-domains-for-sap-authorization-and-trust-management-service&gt;
        /// &lt;https://help.sap.com/docs/btp/sap-business-technology-platform/configure-token-policy-for-sap-authorization-and-trust-management-service&gt;
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Btp = Pulumi.Btp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subaccount = Btp.GetSubaccountSecuritySettings.Invoke(new()
        ///     {
        ///         SubaccountId = "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSubaccountSecuritySettingsResult> InvokeAsync(GetSubaccountSecuritySettingsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubaccountSecuritySettingsResult>("btp:index/getSubaccountSecuritySettings:getSubaccountSecuritySettings", args ?? new GetSubaccountSecuritySettingsArgs(), options.WithDefaults());

        /// <summary>
        /// Gets the security settings of a subaccount.
        /// 
        /// __Tip:__
        /// You must be viewer or administrator of the subaccount.
        /// 
        /// __Further documentation:__
        /// &lt;https://help.sap.com/docs/btp/sap-business-technology-platform/configure-trusted-domains-for-sap-authorization-and-trust-management-service&gt;
        /// &lt;https://help.sap.com/docs/btp/sap-business-technology-platform/configure-token-policy-for-sap-authorization-and-trust-management-service&gt;
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Btp = Pulumi.Btp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subaccount = Btp.GetSubaccountSecuritySettings.Invoke(new()
        ///     {
        ///         SubaccountId = "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSubaccountSecuritySettingsResult> Invoke(GetSubaccountSecuritySettingsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubaccountSecuritySettingsResult>("btp:index/getSubaccountSecuritySettings:getSubaccountSecuritySettings", args ?? new GetSubaccountSecuritySettingsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubaccountSecuritySettingsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the subaccount.
        /// </summary>
        [Input("subaccountId", required: true)]
        public string SubaccountId { get; set; } = null!;

        public GetSubaccountSecuritySettingsArgs()
        {
        }
        public static new GetSubaccountSecuritySettingsArgs Empty => new GetSubaccountSecuritySettingsArgs();
    }

    public sealed class GetSubaccountSecuritySettingsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the subaccount.
        /// </summary>
        [Input("subaccountId", required: true)]
        public Input<string> SubaccountId { get; set; } = null!;

        public GetSubaccountSecuritySettingsInvokeArgs()
        {
        }
        public static new GetSubaccountSecuritySettingsInvokeArgs Empty => new GetSubaccountSecuritySettingsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubaccountSecuritySettingsResult
    {
        /// <summary>
        /// The validity of the access token.
        /// </summary>
        public readonly int AccessTokenValidity;
        /// <summary>
        /// Set of domains that are allowed to be used for user authentication.
        /// </summary>
        public readonly ImmutableArray<string> CustomEmailDomains;
        /// <summary>
        /// The subaccount's default identity provider for business application users.
        /// </summary>
        public readonly string DefaultIdentityProvider;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The validity of the refresh token.
        /// </summary>
        public readonly int RefreshTokenValidity;
        /// <summary>
        /// The ID of the subaccount.
        /// </summary>
        public readonly string SubaccountId;
        /// <summary>
        /// If set to true, users with the same email are treated as same users.
        /// </summary>
        public readonly bool TreatUsersWithSameEmailAsSameUser;

        [OutputConstructor]
        private GetSubaccountSecuritySettingsResult(
            int accessTokenValidity,

            ImmutableArray<string> customEmailDomains,

            string defaultIdentityProvider,

            string id,

            int refreshTokenValidity,

            string subaccountId,

            bool treatUsersWithSameEmailAsSameUser)
        {
            AccessTokenValidity = accessTokenValidity;
            CustomEmailDomains = customEmailDomains;
            DefaultIdentityProvider = defaultIdentityProvider;
            Id = id;
            RefreshTokenValidity = refreshTokenValidity;
            SubaccountId = subaccountId;
            TreatUsersWithSameEmailAsSameUser = treatUsersWithSameEmailAsSameUser;
        }
    }
}
