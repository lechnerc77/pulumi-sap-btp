// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PulumiBtp.Btp
{
    public static class GetDirectoryEntitlements
    {
        /// <summary>
        /// Gets all the entitlements and quota assignments for a directory.
        /// 
        /// To view all the resources that a directory and its subdirectories and subaccounts are entitled to use, the following condition must be met:
        /// * The directory must be a directory that is configured to manage its own entitlements.
        /// * You must be assigned to either the global account admin or global account viewers role.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Btp = Pulumi.Btp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Btp.GetDirectoryEntitlements.Invoke(new()
        ///     {
        ///         DirectoryId = "dd005d8b-1fee-4e6b-b6ff-cb9a197b7fe0",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDirectoryEntitlementsResult> InvokeAsync(GetDirectoryEntitlementsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDirectoryEntitlementsResult>("btp:index/getDirectoryEntitlements:getDirectoryEntitlements", args ?? new GetDirectoryEntitlementsArgs(), options.WithDefaults());

        /// <summary>
        /// Gets all the entitlements and quota assignments for a directory.
        /// 
        /// To view all the resources that a directory and its subdirectories and subaccounts are entitled to use, the following condition must be met:
        /// * The directory must be a directory that is configured to manage its own entitlements.
        /// * You must be assigned to either the global account admin or global account viewers role.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Btp = Pulumi.Btp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all = Btp.GetDirectoryEntitlements.Invoke(new()
        ///     {
        ///         DirectoryId = "dd005d8b-1fee-4e6b-b6ff-cb9a197b7fe0",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDirectoryEntitlementsResult> Invoke(GetDirectoryEntitlementsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDirectoryEntitlementsResult>("btp:index/getDirectoryEntitlements:getDirectoryEntitlements", args ?? new GetDirectoryEntitlementsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDirectoryEntitlementsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the directory.
        /// </summary>
        [Input("directoryId", required: true)]
        public string DirectoryId { get; set; } = null!;

        public GetDirectoryEntitlementsArgs()
        {
        }
        public static new GetDirectoryEntitlementsArgs Empty => new GetDirectoryEntitlementsArgs();
    }

    public sealed class GetDirectoryEntitlementsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the directory.
        /// </summary>
        [Input("directoryId", required: true)]
        public Input<string> DirectoryId { get; set; } = null!;

        public GetDirectoryEntitlementsInvokeArgs()
        {
        }
        public static new GetDirectoryEntitlementsInvokeArgs Empty => new GetDirectoryEntitlementsInvokeArgs();
    }


    [OutputType]
    public sealed class GetDirectoryEntitlementsResult
    {
        /// <summary>
        /// The ID of the directory.
        /// </summary>
        public readonly string DirectoryId;
        /// <summary>
        /// The ID of the directory.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, Outputs.GetDirectoryEntitlementsValuesResult> Values;

        [OutputConstructor]
        private GetDirectoryEntitlementsResult(
            string directoryId,

            string id,

            ImmutableDictionary<string, Outputs.GetDirectoryEntitlementsValuesResult> values)
        {
            DirectoryId = directoryId;
            Id = id;
            Values = values;
        }
    }
}
