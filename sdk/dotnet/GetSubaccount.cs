// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PulumiBtp.Btp
{
    public static class GetSubaccount
    {
        /// <summary>
        /// Gets details about a subaccount.
        /// 
        /// __Tip:__
        /// You must be assigned to the admin or viewer role of the global account, directory, or subaccount.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Btp = Pulumi.Btp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myAccount = Btp.GetSubaccount.Invoke(new()
        ///     {
        ///         Id = "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSubaccountResult> InvokeAsync(GetSubaccountArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubaccountResult>("btp:index/getSubaccount:getSubaccount", args ?? new GetSubaccountArgs(), options.WithDefaults());

        /// <summary>
        /// Gets details about a subaccount.
        /// 
        /// __Tip:__
        /// You must be assigned to the admin or viewer role of the global account, directory, or subaccount.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Btp = Pulumi.Btp;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myAccount = Btp.GetSubaccount.Invoke(new()
        ///     {
        ///         Id = "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSubaccountResult> Invoke(GetSubaccountInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubaccountResult>("btp:index/getSubaccount:getSubaccount", args ?? new GetSubaccountInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubaccountArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the subaccount.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetSubaccountArgs()
        {
        }
        public static new GetSubaccountArgs Empty => new GetSubaccountArgs();
    }

    public sealed class GetSubaccountInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the subaccount.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetSubaccountInvokeArgs()
        {
        }
        public static new GetSubaccountInvokeArgs Empty => new GetSubaccountInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubaccountResult
    {
        /// <summary>
        /// Shows whether the subaccount can use beta services and applications.
        /// </summary>
        public readonly bool BetaEnabled;
        /// <summary>
        /// The details of the user that created the subaccount.
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        /// </summary>
        public readonly string CreatedDate;
        /// <summary>
        /// The description of the subaccount.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The ID of the subaccount.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Set of words or phrases assigned to the subaccount.
        /// </summary>
        public readonly ImmutableDictionary<string, ImmutableArray<string>> Labels;
        /// <summary>
        /// The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        /// </summary>
        public readonly string LastModified;
        /// <summary>
        /// A descriptive name of the subaccount for customer-facing UIs.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The features of parent entity of the subaccount.
        /// </summary>
        public readonly ImmutableArray<string> ParentFeatures;
        /// <summary>
        /// The ID of the subaccountâ€™s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
        /// </summary>
        public readonly string ParentId;
        /// <summary>
        /// The region in which the subaccount was created.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The current state of the subaccount. Possible values are:
        /// </summary>
        public readonly string State;
        public readonly string Subdomain;
        public readonly string Usage;

        [OutputConstructor]
        private GetSubaccountResult(
            bool betaEnabled,

            string createdBy,

            string createdDate,

            string description,

            string id,

            ImmutableDictionary<string, ImmutableArray<string>> labels,

            string lastModified,

            string name,

            ImmutableArray<string> parentFeatures,

            string parentId,

            string region,

            string state,

            string subdomain,

            string usage)
        {
            BetaEnabled = betaEnabled;
            CreatedBy = createdBy;
            CreatedDate = createdDate;
            Description = description;
            Id = id;
            Labels = labels;
            LastModified = lastModified;
            Name = name;
            ParentFeatures = parentFeatures;
            ParentId = parentId;
            Region = region;
            State = state;
            Subdomain = subdomain;
            Usage = usage;
        }
    }
}
