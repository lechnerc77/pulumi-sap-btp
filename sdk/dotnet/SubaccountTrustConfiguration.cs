// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PulumiBtp.Btp
{
    /// <summary>
    /// Establishes trust from a subaccount to an Identity Authentication tenant.
    /// 
    /// __Further documentation:__
    /// &lt;https://help.sap.com/docs/btp/sap-business-technology-platform/trust-and-federation-with-identity-providers&gt;
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Btp = PulumiBtp.Btp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // create a new simple trust configuration for a subaccount
    ///     // for a Custom Identity Provider for Applications
    ///     var simple = new Btp.SubaccountTrustConfiguration("simple", new()
    ///     {
    ///         IdentityProvider = "terraformint.accounts400.ondemand.com",
    ///         SubaccountId = "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
    ///     });
    /// 
    ///     // create a new fully customized trust configuration for a subaccount 
    ///     // for a Custom Identity Provider for Applications
    ///     var fullyCustomized = new Btp.SubaccountTrustConfiguration("fullyCustomized", new()
    ///     {
    ///         Description = "my-description",
    ///         IdentityProvider = "terraformint.accounts400.ondemand.com",
    ///         SubaccountId = "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// terraform
    /// 
    /// ```sh
    ///  $ pulumi import btp:index/subaccountTrustConfiguration:SubaccountTrustConfiguration terraform importbtp_subaccount_trust_configuration.&lt;resource_name&gt; &lt;subaccount_id&gt;,&lt;origin&gt;
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import btp:index/subaccountTrustConfiguration:SubaccountTrustConfiguration trust 6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f,sap.custom
    /// ```
    /// </summary>
    [BtpResourceType("btp:index/subaccountTrustConfiguration:SubaccountTrustConfiguration")]
    public partial class SubaccountTrustConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Determines that any user from the tenant can log in. If not set, only the ones who already have a shadow user can log in.
        /// </summary>
        [Output("autoCreateShadowUsers")]
        public Output<bool> AutoCreateShadowUsers { get; private set; } = null!;

        /// <summary>
        /// Determines that end users can choose the trust configuration for login. If not set, the trust configuration can remain active, however only application users that explicitly specify the origin key can use if for login.
        /// </summary>
        [Output("availableForUserLogon")]
        public Output<bool> AvailableForUserLogon { get; private set; } = null!;

        /// <summary>
        /// Description of the trust configuration.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The tenant's domain which should be used for user logon.
        /// </summary>
        [Output("domain")]
        public Output<string?> Domain { get; private set; } = null!;

        /// <summary>
        /// The name of the Identity Authentication tenant that you want to connect to the subaccount.
        /// </summary>
        [Output("identityProvider")]
        public Output<string> IdentityProvider { get; private set; } = null!;

        /// <summary>
        /// Short string that helps users to identify the link for login.
        /// </summary>
        [Output("linkText")]
        public Output<string> LinkText { get; private set; } = null!;

        /// <summary>
        /// The display name of the trust configuration.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The origin of the identity provider.
        /// </summary>
        [Output("origin")]
        public Output<string> Origin { get; private set; } = null!;

        /// <summary>
        /// The protocol used to establish trust with the identity provider.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// Shows whether the trust configuration can be modified.
        /// </summary>
        [Output("readOnly")]
        public Output<bool> ReadOnly { get; private set; } = null!;

        /// <summary>
        /// Determines whether the identity provider is currently 'active' or 'inactive'.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The ID of the subaccount.
        /// </summary>
        [Output("subaccountId")]
        public Output<string> SubaccountId { get; private set; } = null!;

        /// <summary>
        /// The trust type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a SubaccountTrustConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SubaccountTrustConfiguration(string name, SubaccountTrustConfigurationArgs args, CustomResourceOptions? options = null)
            : base("btp:index/subaccountTrustConfiguration:SubaccountTrustConfiguration", name, args ?? new SubaccountTrustConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SubaccountTrustConfiguration(string name, Input<string> id, SubaccountTrustConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("btp:index/subaccountTrustConfiguration:SubaccountTrustConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lechnerc77/pulumi-btp",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SubaccountTrustConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SubaccountTrustConfiguration Get(string name, Input<string> id, SubaccountTrustConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new SubaccountTrustConfiguration(name, id, state, options);
        }
    }

    public sealed class SubaccountTrustConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines that any user from the tenant can log in. If not set, only the ones who already have a shadow user can log in.
        /// </summary>
        [Input("autoCreateShadowUsers")]
        public Input<bool>? AutoCreateShadowUsers { get; set; }

        /// <summary>
        /// Determines that end users can choose the trust configuration for login. If not set, the trust configuration can remain active, however only application users that explicitly specify the origin key can use if for login.
        /// </summary>
        [Input("availableForUserLogon")]
        public Input<bool>? AvailableForUserLogon { get; set; }

        /// <summary>
        /// Description of the trust configuration.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The tenant's domain which should be used for user logon.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// The name of the Identity Authentication tenant that you want to connect to the subaccount.
        /// </summary>
        [Input("identityProvider", required: true)]
        public Input<string> IdentityProvider { get; set; } = null!;

        /// <summary>
        /// Short string that helps users to identify the link for login.
        /// </summary>
        [Input("linkText")]
        public Input<string>? LinkText { get; set; }

        /// <summary>
        /// The display name of the trust configuration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Determines whether the identity provider is currently 'active' or 'inactive'.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The ID of the subaccount.
        /// </summary>
        [Input("subaccountId", required: true)]
        public Input<string> SubaccountId { get; set; } = null!;

        public SubaccountTrustConfigurationArgs()
        {
        }
        public static new SubaccountTrustConfigurationArgs Empty => new SubaccountTrustConfigurationArgs();
    }

    public sealed class SubaccountTrustConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines that any user from the tenant can log in. If not set, only the ones who already have a shadow user can log in.
        /// </summary>
        [Input("autoCreateShadowUsers")]
        public Input<bool>? AutoCreateShadowUsers { get; set; }

        /// <summary>
        /// Determines that end users can choose the trust configuration for login. If not set, the trust configuration can remain active, however only application users that explicitly specify the origin key can use if for login.
        /// </summary>
        [Input("availableForUserLogon")]
        public Input<bool>? AvailableForUserLogon { get; set; }

        /// <summary>
        /// Description of the trust configuration.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The tenant's domain which should be used for user logon.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// The name of the Identity Authentication tenant that you want to connect to the subaccount.
        /// </summary>
        [Input("identityProvider")]
        public Input<string>? IdentityProvider { get; set; }

        /// <summary>
        /// Short string that helps users to identify the link for login.
        /// </summary>
        [Input("linkText")]
        public Input<string>? LinkText { get; set; }

        /// <summary>
        /// The display name of the trust configuration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The origin of the identity provider.
        /// </summary>
        [Input("origin")]
        public Input<string>? Origin { get; set; }

        /// <summary>
        /// The protocol used to establish trust with the identity provider.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// Shows whether the trust configuration can be modified.
        /// </summary>
        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        /// <summary>
        /// Determines whether the identity provider is currently 'active' or 'inactive'.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The ID of the subaccount.
        /// </summary>
        [Input("subaccountId")]
        public Input<string>? SubaccountId { get; set; }

        /// <summary>
        /// The trust type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public SubaccountTrustConfigurationState()
        {
        }
        public static new SubaccountTrustConfigurationState Empty => new SubaccountTrustConfigurationState();
    }
}
