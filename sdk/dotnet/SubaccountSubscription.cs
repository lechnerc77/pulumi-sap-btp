// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PulumiBtp.Btp
{
    /// <summary>
    /// Subscribes a subaccount to a multitenant application.
    /// Custom or partner-developed applications are currently not supported.
    /// 
    /// __Tip:__
    /// You must be assigned to the subaccount admin role.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Btp = PulumiBtp.Btp;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var workzone = new Btp.SubaccountSubscription("workzone", new()
    ///     {
    ///         AppName = "SAPLaunchpad",
    ///         PlanName = "free",
    ///         SubaccountId = "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// terraform
    /// 
    /// ```sh
    ///  $ pulumi import btp:index/subaccountSubscription:SubaccountSubscription &lt;resource_name&gt; &lt;subaccount_id&gt;,&lt;app_name&gt;,&lt;plan_name&gt;
    /// ```
    /// 
    /// ```sh
    ///  $ pulumi import btp:index/subaccountSubscription:SubaccountSubscription workzone 6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f,SAPLaunchpad,free
    /// ```
    /// </summary>
    [BtpResourceType("btp:index/subaccountSubscription:SubaccountSubscription")]
    public partial class SubaccountSubscription : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The list of features specific to this plan.
        /// </summary>
        [Output("additionalPlanFeatures")]
        public Output<ImmutableArray<string>> AdditionalPlanFeatures { get; private set; } = null!;

        /// <summary>
        /// The ID returned by XSUAA after the app provider has performed a bind of the multitenant application to an XSUAA service instance.
        /// </summary>
        [Output("appId")]
        public Output<string> AppId { get; private set; } = null!;

        /// <summary>
        /// The unique registration name of the deployed multitenant application as defined by the app developer.
        /// </summary>
        [Output("appName")]
        public Output<string> AppName { get; private set; } = null!;

        /// <summary>
        /// The authentication provider of the multitenant application. * XSUAA is the SAP Authorization and Trust Management service that defines scopes and permissions for users as tenants at the global account level. * IAS is Identity Authentication Service that defines scopes and permissions for users in zones (common data isolation systems across systems, SaaS tenants, and services).
        /// </summary>
        [Output("authenticationProvider")]
        public Output<string> AuthenticationProvider { get; private set; } = null!;

        /// <summary>
        /// The technical name of the category defined by the app developer to which the multitenant application is grouped in customer-facing UIs.
        /// </summary>
        [Output("category")]
        public Output<string> Category { get; private set; } = null!;

        /// <summary>
        /// The commercial name of the deployed multitenant application as defined by the app developer.
        /// </summary>
        [Output("commercialAppName")]
        public Output<string> CommercialAppName { get; private set; } = null!;

        /// <summary>
        /// The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        /// </summary>
        [Output("createdDate")]
        public Output<string> CreatedDate { get; private set; } = null!;

        /// <summary>
        /// Shows whether the application was developed by a customer. If not, then the application is developed by the cloud operator, such as SAP.
        /// </summary>
        [Output("customerDeveloped")]
        public Output<bool> CustomerDeveloped { get; private set; } = null!;

        /// <summary>
        /// The description of the multitenant application for customer-facing UIs.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The display name of the application for customer-facing UIs.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// The name of the formations solution associated with the multitenant application.
        /// </summary>
        [Output("formationSolutionName")]
        public Output<string> FormationSolutionName { get; private set; } = null!;

        /// <summary>
        /// The ID of the associated global account.
        /// </summary>
        [Output("globalaccountId")]
        public Output<string> GlobalaccountId { get; private set; } = null!;

        /// <summary>
        /// The set of words or phrases assigned to the multitenant application subscription.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, ImmutableArray<string>>> Labels { get; private set; } = null!;

        /// <summary>
        /// The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        /// </summary>
        [Output("lastModified")]
        public Output<string> LastModified { get; private set; } = null!;

        /// <summary>
        /// The parameters of the subscription as a valid JSON object.
        /// </summary>
        [Output("parameters")]
        public Output<string> Parameters { get; private set; } = null!;

        /// <summary>
        /// The plan name of the application to which the consumer has subscribed.
        /// </summary>
        [Output("planName")]
        public Output<string> PlanName { get; private set; } = null!;

        /// <summary>
        /// The ID of the landscape-specific environment.
        /// </summary>
        [Output("platformEntityId")]
        public Output<string> PlatformEntityId { get; private set; } = null!;

        /// <summary>
        /// The total amount the subscribed subaccount is entitled to consume.
        /// </summary>
        [Output("quota")]
        public Output<int> Quota { get; private set; } = null!;

        /// <summary>
        /// The subscription state of the subaccount regarding the multitenant application.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The ID of the subaccount.
        /// </summary>
        [Output("subaccountId")]
        public Output<string> SubaccountId { get; private set; } = null!;

        /// <summary>
        /// The ID of the subaccount, which is subscribed to the multitenant application.
        /// </summary>
        [Output("subscribedSubaccountId")]
        public Output<string> SubscribedSubaccountId { get; private set; } = null!;

        /// <summary>
        /// The ID of the tenant, which is subscribed to a multitenant application.
        /// </summary>
        [Output("subscribedTenantId")]
        public Output<string> SubscribedTenantId { get; private set; } = null!;

        /// <summary>
        /// The URL for app users to launch the subscribed application.
        /// </summary>
        [Output("subscriptionUrl")]
        public Output<string> SubscriptionUrl { get; private set; } = null!;

        /// <summary>
        /// Specifies whether a consumer, whose subaccount is subscribed to the application, can change its subscriptions parameters.
        /// </summary>
        [Output("supportsParametersUpdates")]
        public Output<bool> SupportsParametersUpdates { get; private set; } = null!;

        /// <summary>
        /// Specifies whether a consumer, whose subaccount is subscribed to the application, can change the subscription to a different plan that is available for this application and subaccount.
        /// </summary>
        [Output("supportsPlanUpdates")]
        public Output<bool> SupportsPlanUpdates { get; private set; } = null!;

        /// <summary>
        /// The tenant ID of the application provider.
        /// </summary>
        [Output("tenantId")]
        public Output<string> TenantId { get; private set; } = null!;


        /// <summary>
        /// Create a SubaccountSubscription resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SubaccountSubscription(string name, SubaccountSubscriptionArgs args, CustomResourceOptions? options = null)
            : base("btp:index/subaccountSubscription:SubaccountSubscription", name, args ?? new SubaccountSubscriptionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SubaccountSubscription(string name, Input<string> id, SubaccountSubscriptionState? state = null, CustomResourceOptions? options = null)
            : base("btp:index/subaccountSubscription:SubaccountSubscription", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lechnerc77/pulumi-btp",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SubaccountSubscription resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SubaccountSubscription Get(string name, Input<string> id, SubaccountSubscriptionState? state = null, CustomResourceOptions? options = null)
        {
            return new SubaccountSubscription(name, id, state, options);
        }
    }

    public sealed class SubaccountSubscriptionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique registration name of the deployed multitenant application as defined by the app developer.
        /// </summary>
        [Input("appName", required: true)]
        public Input<string> AppName { get; set; } = null!;

        /// <summary>
        /// The parameters of the subscription as a valid JSON object.
        /// </summary>
        [Input("parameters")]
        public Input<string>? Parameters { get; set; }

        /// <summary>
        /// The plan name of the application to which the consumer has subscribed.
        /// </summary>
        [Input("planName", required: true)]
        public Input<string> PlanName { get; set; } = null!;

        /// <summary>
        /// The ID of the subaccount.
        /// </summary>
        [Input("subaccountId", required: true)]
        public Input<string> SubaccountId { get; set; } = null!;

        public SubaccountSubscriptionArgs()
        {
        }
        public static new SubaccountSubscriptionArgs Empty => new SubaccountSubscriptionArgs();
    }

    public sealed class SubaccountSubscriptionState : global::Pulumi.ResourceArgs
    {
        [Input("additionalPlanFeatures")]
        private InputList<string>? _additionalPlanFeatures;

        /// <summary>
        /// The list of features specific to this plan.
        /// </summary>
        public InputList<string> AdditionalPlanFeatures
        {
            get => _additionalPlanFeatures ?? (_additionalPlanFeatures = new InputList<string>());
            set => _additionalPlanFeatures = value;
        }

        /// <summary>
        /// The ID returned by XSUAA after the app provider has performed a bind of the multitenant application to an XSUAA service instance.
        /// </summary>
        [Input("appId")]
        public Input<string>? AppId { get; set; }

        /// <summary>
        /// The unique registration name of the deployed multitenant application as defined by the app developer.
        /// </summary>
        [Input("appName")]
        public Input<string>? AppName { get; set; }

        /// <summary>
        /// The authentication provider of the multitenant application. * XSUAA is the SAP Authorization and Trust Management service that defines scopes and permissions for users as tenants at the global account level. * IAS is Identity Authentication Service that defines scopes and permissions for users in zones (common data isolation systems across systems, SaaS tenants, and services).
        /// </summary>
        [Input("authenticationProvider")]
        public Input<string>? AuthenticationProvider { get; set; }

        /// <summary>
        /// The technical name of the category defined by the app developer to which the multitenant application is grouped in customer-facing UIs.
        /// </summary>
        [Input("category")]
        public Input<string>? Category { get; set; }

        /// <summary>
        /// The commercial name of the deployed multitenant application as defined by the app developer.
        /// </summary>
        [Input("commercialAppName")]
        public Input<string>? CommercialAppName { get; set; }

        /// <summary>
        /// The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        /// </summary>
        [Input("createdDate")]
        public Input<string>? CreatedDate { get; set; }

        /// <summary>
        /// Shows whether the application was developed by a customer. If not, then the application is developed by the cloud operator, such as SAP.
        /// </summary>
        [Input("customerDeveloped")]
        public Input<bool>? CustomerDeveloped { get; set; }

        /// <summary>
        /// The description of the multitenant application for customer-facing UIs.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of the application for customer-facing UIs.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// The name of the formations solution associated with the multitenant application.
        /// </summary>
        [Input("formationSolutionName")]
        public Input<string>? FormationSolutionName { get; set; }

        /// <summary>
        /// The ID of the associated global account.
        /// </summary>
        [Input("globalaccountId")]
        public Input<string>? GlobalaccountId { get; set; }

        [Input("labels")]
        private InputMap<ImmutableArray<string>>? _labels;

        /// <summary>
        /// The set of words or phrases assigned to the multitenant application subscription.
        /// </summary>
        public InputMap<ImmutableArray<string>> Labels
        {
            get => _labels ?? (_labels = new InputMap<ImmutableArray<string>>());
            set => _labels = value;
        }

        /// <summary>
        /// The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
        /// </summary>
        [Input("lastModified")]
        public Input<string>? LastModified { get; set; }

        /// <summary>
        /// The parameters of the subscription as a valid JSON object.
        /// </summary>
        [Input("parameters")]
        public Input<string>? Parameters { get; set; }

        /// <summary>
        /// The plan name of the application to which the consumer has subscribed.
        /// </summary>
        [Input("planName")]
        public Input<string>? PlanName { get; set; }

        /// <summary>
        /// The ID of the landscape-specific environment.
        /// </summary>
        [Input("platformEntityId")]
        public Input<string>? PlatformEntityId { get; set; }

        /// <summary>
        /// The total amount the subscribed subaccount is entitled to consume.
        /// </summary>
        [Input("quota")]
        public Input<int>? Quota { get; set; }

        /// <summary>
        /// The subscription state of the subaccount regarding the multitenant application.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The ID of the subaccount.
        /// </summary>
        [Input("subaccountId")]
        public Input<string>? SubaccountId { get; set; }

        /// <summary>
        /// The ID of the subaccount, which is subscribed to the multitenant application.
        /// </summary>
        [Input("subscribedSubaccountId")]
        public Input<string>? SubscribedSubaccountId { get; set; }

        /// <summary>
        /// The ID of the tenant, which is subscribed to a multitenant application.
        /// </summary>
        [Input("subscribedTenantId")]
        public Input<string>? SubscribedTenantId { get; set; }

        /// <summary>
        /// The URL for app users to launch the subscribed application.
        /// </summary>
        [Input("subscriptionUrl")]
        public Input<string>? SubscriptionUrl { get; set; }

        /// <summary>
        /// Specifies whether a consumer, whose subaccount is subscribed to the application, can change its subscriptions parameters.
        /// </summary>
        [Input("supportsParametersUpdates")]
        public Input<bool>? SupportsParametersUpdates { get; set; }

        /// <summary>
        /// Specifies whether a consumer, whose subaccount is subscribed to the application, can change the subscription to a different plan that is available for this application and subaccount.
        /// </summary>
        [Input("supportsPlanUpdates")]
        public Input<bool>? SupportsPlanUpdates { get; set; }

        /// <summary>
        /// The tenant ID of the application provider.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        public SubaccountSubscriptionState()
        {
        }
        public static new SubaccountSubscriptionState Empty => new SubaccountSubscriptionState();
    }
}
