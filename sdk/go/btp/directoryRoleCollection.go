// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package btp

import (
	"context"
	"reflect"

	"errors"
	"github.com/lechnerc77/pulumi-btp/sdk/go/btp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Creates a role collection in a directory.
//
// __Further documentation:__
// <https://help.sap.com/docs/btp/sap-business-technology-platform/role-collections-and-roles-in-global-accounts-directories-and-subaccounts>
//
// ## Import
//
// terraform
//
// ```sh
//
//	$ pulumi import btp:index/directoryRoleCollection:DirectoryRoleCollection <resource_name> '<directory_id>,<name>'
//
// ```
//
// ```sh
//
//	$ pulumi import btp:index/directoryRoleCollection:DirectoryRoleCollection directory_viewer '6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f,Directory Viewer'
//
// ```
type DirectoryRoleCollection struct {
	pulumi.CustomResourceState

	// The description of the role collection.
	Description pulumi.StringOutput `pulumi:"description"`
	// The ID of the directory.
	DirectoryId pulumi.StringOutput `pulumi:"directoryId"`
	// The name of the role collection.
	Name  pulumi.StringOutput                    `pulumi:"name"`
	Roles DirectoryRoleCollectionRoleArrayOutput `pulumi:"roles"`
}

// NewDirectoryRoleCollection registers a new resource with the given unique name, arguments, and options.
func NewDirectoryRoleCollection(ctx *pulumi.Context,
	name string, args *DirectoryRoleCollectionArgs, opts ...pulumi.ResourceOption) (*DirectoryRoleCollection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DirectoryId == nil {
		return nil, errors.New("invalid value for required argument 'DirectoryId'")
	}
	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DirectoryRoleCollection
	err := ctx.RegisterResource("btp:index/directoryRoleCollection:DirectoryRoleCollection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDirectoryRoleCollection gets an existing DirectoryRoleCollection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDirectoryRoleCollection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DirectoryRoleCollectionState, opts ...pulumi.ResourceOption) (*DirectoryRoleCollection, error) {
	var resource DirectoryRoleCollection
	err := ctx.ReadResource("btp:index/directoryRoleCollection:DirectoryRoleCollection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DirectoryRoleCollection resources.
type directoryRoleCollectionState struct {
	// The description of the role collection.
	Description *string `pulumi:"description"`
	// The ID of the directory.
	DirectoryId *string `pulumi:"directoryId"`
	// The name of the role collection.
	Name  *string                       `pulumi:"name"`
	Roles []DirectoryRoleCollectionRole `pulumi:"roles"`
}

type DirectoryRoleCollectionState struct {
	// The description of the role collection.
	Description pulumi.StringPtrInput
	// The ID of the directory.
	DirectoryId pulumi.StringPtrInput
	// The name of the role collection.
	Name  pulumi.StringPtrInput
	Roles DirectoryRoleCollectionRoleArrayInput
}

func (DirectoryRoleCollectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*directoryRoleCollectionState)(nil)).Elem()
}

type directoryRoleCollectionArgs struct {
	// The description of the role collection.
	Description *string `pulumi:"description"`
	// The ID of the directory.
	DirectoryId string `pulumi:"directoryId"`
	// The name of the role collection.
	Name  *string                       `pulumi:"name"`
	Roles []DirectoryRoleCollectionRole `pulumi:"roles"`
}

// The set of arguments for constructing a DirectoryRoleCollection resource.
type DirectoryRoleCollectionArgs struct {
	// The description of the role collection.
	Description pulumi.StringPtrInput
	// The ID of the directory.
	DirectoryId pulumi.StringInput
	// The name of the role collection.
	Name  pulumi.StringPtrInput
	Roles DirectoryRoleCollectionRoleArrayInput
}

func (DirectoryRoleCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*directoryRoleCollectionArgs)(nil)).Elem()
}

type DirectoryRoleCollectionInput interface {
	pulumi.Input

	ToDirectoryRoleCollectionOutput() DirectoryRoleCollectionOutput
	ToDirectoryRoleCollectionOutputWithContext(ctx context.Context) DirectoryRoleCollectionOutput
}

func (*DirectoryRoleCollection) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectoryRoleCollection)(nil)).Elem()
}

func (i *DirectoryRoleCollection) ToDirectoryRoleCollectionOutput() DirectoryRoleCollectionOutput {
	return i.ToDirectoryRoleCollectionOutputWithContext(context.Background())
}

func (i *DirectoryRoleCollection) ToDirectoryRoleCollectionOutputWithContext(ctx context.Context) DirectoryRoleCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryRoleCollectionOutput)
}

func (i *DirectoryRoleCollection) ToOutput(ctx context.Context) pulumix.Output[*DirectoryRoleCollection] {
	return pulumix.Output[*DirectoryRoleCollection]{
		OutputState: i.ToDirectoryRoleCollectionOutputWithContext(ctx).OutputState,
	}
}

// DirectoryRoleCollectionArrayInput is an input type that accepts DirectoryRoleCollectionArray and DirectoryRoleCollectionArrayOutput values.
// You can construct a concrete instance of `DirectoryRoleCollectionArrayInput` via:
//
//	DirectoryRoleCollectionArray{ DirectoryRoleCollectionArgs{...} }
type DirectoryRoleCollectionArrayInput interface {
	pulumi.Input

	ToDirectoryRoleCollectionArrayOutput() DirectoryRoleCollectionArrayOutput
	ToDirectoryRoleCollectionArrayOutputWithContext(context.Context) DirectoryRoleCollectionArrayOutput
}

type DirectoryRoleCollectionArray []DirectoryRoleCollectionInput

func (DirectoryRoleCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DirectoryRoleCollection)(nil)).Elem()
}

func (i DirectoryRoleCollectionArray) ToDirectoryRoleCollectionArrayOutput() DirectoryRoleCollectionArrayOutput {
	return i.ToDirectoryRoleCollectionArrayOutputWithContext(context.Background())
}

func (i DirectoryRoleCollectionArray) ToDirectoryRoleCollectionArrayOutputWithContext(ctx context.Context) DirectoryRoleCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryRoleCollectionArrayOutput)
}

func (i DirectoryRoleCollectionArray) ToOutput(ctx context.Context) pulumix.Output[[]*DirectoryRoleCollection] {
	return pulumix.Output[[]*DirectoryRoleCollection]{
		OutputState: i.ToDirectoryRoleCollectionArrayOutputWithContext(ctx).OutputState,
	}
}

// DirectoryRoleCollectionMapInput is an input type that accepts DirectoryRoleCollectionMap and DirectoryRoleCollectionMapOutput values.
// You can construct a concrete instance of `DirectoryRoleCollectionMapInput` via:
//
//	DirectoryRoleCollectionMap{ "key": DirectoryRoleCollectionArgs{...} }
type DirectoryRoleCollectionMapInput interface {
	pulumi.Input

	ToDirectoryRoleCollectionMapOutput() DirectoryRoleCollectionMapOutput
	ToDirectoryRoleCollectionMapOutputWithContext(context.Context) DirectoryRoleCollectionMapOutput
}

type DirectoryRoleCollectionMap map[string]DirectoryRoleCollectionInput

func (DirectoryRoleCollectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DirectoryRoleCollection)(nil)).Elem()
}

func (i DirectoryRoleCollectionMap) ToDirectoryRoleCollectionMapOutput() DirectoryRoleCollectionMapOutput {
	return i.ToDirectoryRoleCollectionMapOutputWithContext(context.Background())
}

func (i DirectoryRoleCollectionMap) ToDirectoryRoleCollectionMapOutputWithContext(ctx context.Context) DirectoryRoleCollectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryRoleCollectionMapOutput)
}

func (i DirectoryRoleCollectionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DirectoryRoleCollection] {
	return pulumix.Output[map[string]*DirectoryRoleCollection]{
		OutputState: i.ToDirectoryRoleCollectionMapOutputWithContext(ctx).OutputState,
	}
}

type DirectoryRoleCollectionOutput struct{ *pulumi.OutputState }

func (DirectoryRoleCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectoryRoleCollection)(nil)).Elem()
}

func (o DirectoryRoleCollectionOutput) ToDirectoryRoleCollectionOutput() DirectoryRoleCollectionOutput {
	return o
}

func (o DirectoryRoleCollectionOutput) ToDirectoryRoleCollectionOutputWithContext(ctx context.Context) DirectoryRoleCollectionOutput {
	return o
}

func (o DirectoryRoleCollectionOutput) ToOutput(ctx context.Context) pulumix.Output[*DirectoryRoleCollection] {
	return pulumix.Output[*DirectoryRoleCollection]{
		OutputState: o.OutputState,
	}
}

// The description of the role collection.
func (o DirectoryRoleCollectionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectoryRoleCollection) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The ID of the directory.
func (o DirectoryRoleCollectionOutput) DirectoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectoryRoleCollection) pulumi.StringOutput { return v.DirectoryId }).(pulumi.StringOutput)
}

// The name of the role collection.
func (o DirectoryRoleCollectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectoryRoleCollection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DirectoryRoleCollectionOutput) Roles() DirectoryRoleCollectionRoleArrayOutput {
	return o.ApplyT(func(v *DirectoryRoleCollection) DirectoryRoleCollectionRoleArrayOutput { return v.Roles }).(DirectoryRoleCollectionRoleArrayOutput)
}

type DirectoryRoleCollectionArrayOutput struct{ *pulumi.OutputState }

func (DirectoryRoleCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DirectoryRoleCollection)(nil)).Elem()
}

func (o DirectoryRoleCollectionArrayOutput) ToDirectoryRoleCollectionArrayOutput() DirectoryRoleCollectionArrayOutput {
	return o
}

func (o DirectoryRoleCollectionArrayOutput) ToDirectoryRoleCollectionArrayOutputWithContext(ctx context.Context) DirectoryRoleCollectionArrayOutput {
	return o
}

func (o DirectoryRoleCollectionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DirectoryRoleCollection] {
	return pulumix.Output[[]*DirectoryRoleCollection]{
		OutputState: o.OutputState,
	}
}

func (o DirectoryRoleCollectionArrayOutput) Index(i pulumi.IntInput) DirectoryRoleCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DirectoryRoleCollection {
		return vs[0].([]*DirectoryRoleCollection)[vs[1].(int)]
	}).(DirectoryRoleCollectionOutput)
}

type DirectoryRoleCollectionMapOutput struct{ *pulumi.OutputState }

func (DirectoryRoleCollectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DirectoryRoleCollection)(nil)).Elem()
}

func (o DirectoryRoleCollectionMapOutput) ToDirectoryRoleCollectionMapOutput() DirectoryRoleCollectionMapOutput {
	return o
}

func (o DirectoryRoleCollectionMapOutput) ToDirectoryRoleCollectionMapOutputWithContext(ctx context.Context) DirectoryRoleCollectionMapOutput {
	return o
}

func (o DirectoryRoleCollectionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DirectoryRoleCollection] {
	return pulumix.Output[map[string]*DirectoryRoleCollection]{
		OutputState: o.OutputState,
	}
}

func (o DirectoryRoleCollectionMapOutput) MapIndex(k pulumi.StringInput) DirectoryRoleCollectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DirectoryRoleCollection {
		return vs[0].(map[string]*DirectoryRoleCollection)[vs[1].(string)]
	}).(DirectoryRoleCollectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryRoleCollectionInput)(nil)).Elem(), &DirectoryRoleCollection{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryRoleCollectionArrayInput)(nil)).Elem(), DirectoryRoleCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryRoleCollectionMapInput)(nil)).Elem(), DirectoryRoleCollectionMap{})
	pulumi.RegisterOutputType(DirectoryRoleCollectionOutput{})
	pulumi.RegisterOutputType(DirectoryRoleCollectionArrayOutput{})
	pulumi.RegisterOutputType(DirectoryRoleCollectionMapOutput{})
}
