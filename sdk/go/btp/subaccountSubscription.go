// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package btp

import (
	"context"
	"reflect"

	"errors"
	"github.com/lechnerc77/pulumi-btp/sdk/go/btp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Subscribes a subaccount to a multitenant application.
// Custom or partner-developed applications are currently not supported.
//
// __Tip:__
// You must be assigned to the subaccount admin role.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lechnerc77/pulumi-btp/sdk/go/btp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := btp.NewSubaccountSubscription(ctx, "workzone", &btp.SubaccountSubscriptionArgs{
//				AppName:      pulumi.String("SAPLaunchpad"),
//				PlanName:     pulumi.String("free"),
//				SubaccountId: pulumi.String("6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// terraform
//
// ```sh
//
//	$ pulumi import btp:index/subaccountSubscription:SubaccountSubscription <resource_name> <subaccount_id>,<app_name>,<plan_name>
//
// ```
//
// ```sh
//
//	$ pulumi import btp:index/subaccountSubscription:SubaccountSubscription workzone 6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f,SAPLaunchpad,free
//
// ```
type SubaccountSubscription struct {
	pulumi.CustomResourceState

	// The list of features specific to this plan.
	AdditionalPlanFeatures pulumi.StringArrayOutput `pulumi:"additionalPlanFeatures"`
	// The ID returned by XSUAA after the app provider has performed a bind of the multitenant application to an XSUAA service instance.
	AppId pulumi.StringOutput `pulumi:"appId"`
	// The unique registration name of the deployed multitenant application as defined by the app developer.
	AppName pulumi.StringOutput `pulumi:"appName"`
	// The authentication provider of the multitenant application. * XSUAA is the SAP Authorization and Trust Management service that defines scopes and permissions for users as tenants at the global account level. * IAS is Identity Authentication Service that defines scopes and permissions for users in zones (common data isolation systems across systems, SaaS tenants, and services).
	AuthenticationProvider pulumi.StringOutput `pulumi:"authenticationProvider"`
	// The technical name of the category defined by the app developer to which the multitenant application is grouped in customer-facing UIs.
	Category pulumi.StringOutput `pulumi:"category"`
	// The commercial name of the deployed multitenant application as defined by the app developer.
	CommercialAppName pulumi.StringOutput `pulumi:"commercialAppName"`
	// The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	CreatedDate pulumi.StringOutput `pulumi:"createdDate"`
	// Shows whether the application was developed by a customer. If not, then the application is developed by the cloud operator, such as SAP.
	CustomerDeveloped pulumi.BoolOutput `pulumi:"customerDeveloped"`
	// The description of the multitenant application for customer-facing UIs.
	Description pulumi.StringOutput `pulumi:"description"`
	// The display name of the application for customer-facing UIs.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The name of the formations solution associated with the multitenant application.
	FormationSolutionName pulumi.StringOutput `pulumi:"formationSolutionName"`
	// The ID of the associated global account.
	GlobalaccountId pulumi.StringOutput `pulumi:"globalaccountId"`
	// The set of words or phrases assigned to the multitenant application subscription.
	Labels pulumi.StringArrayMapOutput `pulumi:"labels"`
	// The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	LastModified pulumi.StringOutput `pulumi:"lastModified"`
	// The parameters of the subscription as a valid JSON object.
	Parameters pulumi.StringOutput `pulumi:"parameters"`
	// The plan name of the application to which the consumer has subscribed.
	PlanName pulumi.StringOutput `pulumi:"planName"`
	// The ID of the landscape-specific environment.
	PlatformEntityId pulumi.StringOutput `pulumi:"platformEntityId"`
	// The total amount the subscribed subaccount is entitled to consume.
	Quota pulumi.IntOutput `pulumi:"quota"`
	// The subscription state of the subaccount regarding the multitenant application.
	State pulumi.StringOutput `pulumi:"state"`
	// The ID of the subaccount.
	SubaccountId pulumi.StringOutput `pulumi:"subaccountId"`
	// The ID of the subaccount, which is subscribed to the multitenant application.
	SubscribedSubaccountId pulumi.StringOutput `pulumi:"subscribedSubaccountId"`
	// The ID of the tenant, which is subscribed to a multitenant application.
	SubscribedTenantId pulumi.StringOutput `pulumi:"subscribedTenantId"`
	// The URL for app users to launch the subscribed application.
	SubscriptionUrl pulumi.StringOutput `pulumi:"subscriptionUrl"`
	// Specifies whether a consumer, whose subaccount is subscribed to the application, can change its subscriptions parameters.
	SupportsParametersUpdates pulumi.BoolOutput `pulumi:"supportsParametersUpdates"`
	// Specifies whether a consumer, whose subaccount is subscribed to the application, can change the subscription to a different plan that is available for this application and subaccount.
	SupportsPlanUpdates pulumi.BoolOutput `pulumi:"supportsPlanUpdates"`
	// The tenant ID of the application provider.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewSubaccountSubscription registers a new resource with the given unique name, arguments, and options.
func NewSubaccountSubscription(ctx *pulumi.Context,
	name string, args *SubaccountSubscriptionArgs, opts ...pulumi.ResourceOption) (*SubaccountSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppName == nil {
		return nil, errors.New("invalid value for required argument 'AppName'")
	}
	if args.PlanName == nil {
		return nil, errors.New("invalid value for required argument 'PlanName'")
	}
	if args.SubaccountId == nil {
		return nil, errors.New("invalid value for required argument 'SubaccountId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SubaccountSubscription
	err := ctx.RegisterResource("btp:index/subaccountSubscription:SubaccountSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubaccountSubscription gets an existing SubaccountSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubaccountSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubaccountSubscriptionState, opts ...pulumi.ResourceOption) (*SubaccountSubscription, error) {
	var resource SubaccountSubscription
	err := ctx.ReadResource("btp:index/subaccountSubscription:SubaccountSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubaccountSubscription resources.
type subaccountSubscriptionState struct {
	// The list of features specific to this plan.
	AdditionalPlanFeatures []string `pulumi:"additionalPlanFeatures"`
	// The ID returned by XSUAA after the app provider has performed a bind of the multitenant application to an XSUAA service instance.
	AppId *string `pulumi:"appId"`
	// The unique registration name of the deployed multitenant application as defined by the app developer.
	AppName *string `pulumi:"appName"`
	// The authentication provider of the multitenant application. * XSUAA is the SAP Authorization and Trust Management service that defines scopes and permissions for users as tenants at the global account level. * IAS is Identity Authentication Service that defines scopes and permissions for users in zones (common data isolation systems across systems, SaaS tenants, and services).
	AuthenticationProvider *string `pulumi:"authenticationProvider"`
	// The technical name of the category defined by the app developer to which the multitenant application is grouped in customer-facing UIs.
	Category *string `pulumi:"category"`
	// The commercial name of the deployed multitenant application as defined by the app developer.
	CommercialAppName *string `pulumi:"commercialAppName"`
	// The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	CreatedDate *string `pulumi:"createdDate"`
	// Shows whether the application was developed by a customer. If not, then the application is developed by the cloud operator, such as SAP.
	CustomerDeveloped *bool `pulumi:"customerDeveloped"`
	// The description of the multitenant application for customer-facing UIs.
	Description *string `pulumi:"description"`
	// The display name of the application for customer-facing UIs.
	DisplayName *string `pulumi:"displayName"`
	// The name of the formations solution associated with the multitenant application.
	FormationSolutionName *string `pulumi:"formationSolutionName"`
	// The ID of the associated global account.
	GlobalaccountId *string `pulumi:"globalaccountId"`
	// The set of words or phrases assigned to the multitenant application subscription.
	Labels map[string][]string `pulumi:"labels"`
	// The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	LastModified *string `pulumi:"lastModified"`
	// The parameters of the subscription as a valid JSON object.
	Parameters *string `pulumi:"parameters"`
	// The plan name of the application to which the consumer has subscribed.
	PlanName *string `pulumi:"planName"`
	// The ID of the landscape-specific environment.
	PlatformEntityId *string `pulumi:"platformEntityId"`
	// The total amount the subscribed subaccount is entitled to consume.
	Quota *int `pulumi:"quota"`
	// The subscription state of the subaccount regarding the multitenant application.
	State *string `pulumi:"state"`
	// The ID of the subaccount.
	SubaccountId *string `pulumi:"subaccountId"`
	// The ID of the subaccount, which is subscribed to the multitenant application.
	SubscribedSubaccountId *string `pulumi:"subscribedSubaccountId"`
	// The ID of the tenant, which is subscribed to a multitenant application.
	SubscribedTenantId *string `pulumi:"subscribedTenantId"`
	// The URL for app users to launch the subscribed application.
	SubscriptionUrl *string `pulumi:"subscriptionUrl"`
	// Specifies whether a consumer, whose subaccount is subscribed to the application, can change its subscriptions parameters.
	SupportsParametersUpdates *bool `pulumi:"supportsParametersUpdates"`
	// Specifies whether a consumer, whose subaccount is subscribed to the application, can change the subscription to a different plan that is available for this application and subaccount.
	SupportsPlanUpdates *bool `pulumi:"supportsPlanUpdates"`
	// The tenant ID of the application provider.
	TenantId *string `pulumi:"tenantId"`
}

type SubaccountSubscriptionState struct {
	// The list of features specific to this plan.
	AdditionalPlanFeatures pulumi.StringArrayInput
	// The ID returned by XSUAA after the app provider has performed a bind of the multitenant application to an XSUAA service instance.
	AppId pulumi.StringPtrInput
	// The unique registration name of the deployed multitenant application as defined by the app developer.
	AppName pulumi.StringPtrInput
	// The authentication provider of the multitenant application. * XSUAA is the SAP Authorization and Trust Management service that defines scopes and permissions for users as tenants at the global account level. * IAS is Identity Authentication Service that defines scopes and permissions for users in zones (common data isolation systems across systems, SaaS tenants, and services).
	AuthenticationProvider pulumi.StringPtrInput
	// The technical name of the category defined by the app developer to which the multitenant application is grouped in customer-facing UIs.
	Category pulumi.StringPtrInput
	// The commercial name of the deployed multitenant application as defined by the app developer.
	CommercialAppName pulumi.StringPtrInput
	// The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	CreatedDate pulumi.StringPtrInput
	// Shows whether the application was developed by a customer. If not, then the application is developed by the cloud operator, such as SAP.
	CustomerDeveloped pulumi.BoolPtrInput
	// The description of the multitenant application for customer-facing UIs.
	Description pulumi.StringPtrInput
	// The display name of the application for customer-facing UIs.
	DisplayName pulumi.StringPtrInput
	// The name of the formations solution associated with the multitenant application.
	FormationSolutionName pulumi.StringPtrInput
	// The ID of the associated global account.
	GlobalaccountId pulumi.StringPtrInput
	// The set of words or phrases assigned to the multitenant application subscription.
	Labels pulumi.StringArrayMapInput
	// The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	LastModified pulumi.StringPtrInput
	// The parameters of the subscription as a valid JSON object.
	Parameters pulumi.StringPtrInput
	// The plan name of the application to which the consumer has subscribed.
	PlanName pulumi.StringPtrInput
	// The ID of the landscape-specific environment.
	PlatformEntityId pulumi.StringPtrInput
	// The total amount the subscribed subaccount is entitled to consume.
	Quota pulumi.IntPtrInput
	// The subscription state of the subaccount regarding the multitenant application.
	State pulumi.StringPtrInput
	// The ID of the subaccount.
	SubaccountId pulumi.StringPtrInput
	// The ID of the subaccount, which is subscribed to the multitenant application.
	SubscribedSubaccountId pulumi.StringPtrInput
	// The ID of the tenant, which is subscribed to a multitenant application.
	SubscribedTenantId pulumi.StringPtrInput
	// The URL for app users to launch the subscribed application.
	SubscriptionUrl pulumi.StringPtrInput
	// Specifies whether a consumer, whose subaccount is subscribed to the application, can change its subscriptions parameters.
	SupportsParametersUpdates pulumi.BoolPtrInput
	// Specifies whether a consumer, whose subaccount is subscribed to the application, can change the subscription to a different plan that is available for this application and subaccount.
	SupportsPlanUpdates pulumi.BoolPtrInput
	// The tenant ID of the application provider.
	TenantId pulumi.StringPtrInput
}

func (SubaccountSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*subaccountSubscriptionState)(nil)).Elem()
}

type subaccountSubscriptionArgs struct {
	// The unique registration name of the deployed multitenant application as defined by the app developer.
	AppName string `pulumi:"appName"`
	// The parameters of the subscription as a valid JSON object.
	Parameters *string `pulumi:"parameters"`
	// The plan name of the application to which the consumer has subscribed.
	PlanName string `pulumi:"planName"`
	// The ID of the subaccount.
	SubaccountId string `pulumi:"subaccountId"`
}

// The set of arguments for constructing a SubaccountSubscription resource.
type SubaccountSubscriptionArgs struct {
	// The unique registration name of the deployed multitenant application as defined by the app developer.
	AppName pulumi.StringInput
	// The parameters of the subscription as a valid JSON object.
	Parameters pulumi.StringPtrInput
	// The plan name of the application to which the consumer has subscribed.
	PlanName pulumi.StringInput
	// The ID of the subaccount.
	SubaccountId pulumi.StringInput
}

func (SubaccountSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subaccountSubscriptionArgs)(nil)).Elem()
}

type SubaccountSubscriptionInput interface {
	pulumi.Input

	ToSubaccountSubscriptionOutput() SubaccountSubscriptionOutput
	ToSubaccountSubscriptionOutputWithContext(ctx context.Context) SubaccountSubscriptionOutput
}

func (*SubaccountSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**SubaccountSubscription)(nil)).Elem()
}

func (i *SubaccountSubscription) ToSubaccountSubscriptionOutput() SubaccountSubscriptionOutput {
	return i.ToSubaccountSubscriptionOutputWithContext(context.Background())
}

func (i *SubaccountSubscription) ToSubaccountSubscriptionOutputWithContext(ctx context.Context) SubaccountSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubaccountSubscriptionOutput)
}

func (i *SubaccountSubscription) ToOutput(ctx context.Context) pulumix.Output[*SubaccountSubscription] {
	return pulumix.Output[*SubaccountSubscription]{
		OutputState: i.ToSubaccountSubscriptionOutputWithContext(ctx).OutputState,
	}
}

// SubaccountSubscriptionArrayInput is an input type that accepts SubaccountSubscriptionArray and SubaccountSubscriptionArrayOutput values.
// You can construct a concrete instance of `SubaccountSubscriptionArrayInput` via:
//
//	SubaccountSubscriptionArray{ SubaccountSubscriptionArgs{...} }
type SubaccountSubscriptionArrayInput interface {
	pulumi.Input

	ToSubaccountSubscriptionArrayOutput() SubaccountSubscriptionArrayOutput
	ToSubaccountSubscriptionArrayOutputWithContext(context.Context) SubaccountSubscriptionArrayOutput
}

type SubaccountSubscriptionArray []SubaccountSubscriptionInput

func (SubaccountSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubaccountSubscription)(nil)).Elem()
}

func (i SubaccountSubscriptionArray) ToSubaccountSubscriptionArrayOutput() SubaccountSubscriptionArrayOutput {
	return i.ToSubaccountSubscriptionArrayOutputWithContext(context.Background())
}

func (i SubaccountSubscriptionArray) ToSubaccountSubscriptionArrayOutputWithContext(ctx context.Context) SubaccountSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubaccountSubscriptionArrayOutput)
}

func (i SubaccountSubscriptionArray) ToOutput(ctx context.Context) pulumix.Output[[]*SubaccountSubscription] {
	return pulumix.Output[[]*SubaccountSubscription]{
		OutputState: i.ToSubaccountSubscriptionArrayOutputWithContext(ctx).OutputState,
	}
}

// SubaccountSubscriptionMapInput is an input type that accepts SubaccountSubscriptionMap and SubaccountSubscriptionMapOutput values.
// You can construct a concrete instance of `SubaccountSubscriptionMapInput` via:
//
//	SubaccountSubscriptionMap{ "key": SubaccountSubscriptionArgs{...} }
type SubaccountSubscriptionMapInput interface {
	pulumi.Input

	ToSubaccountSubscriptionMapOutput() SubaccountSubscriptionMapOutput
	ToSubaccountSubscriptionMapOutputWithContext(context.Context) SubaccountSubscriptionMapOutput
}

type SubaccountSubscriptionMap map[string]SubaccountSubscriptionInput

func (SubaccountSubscriptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubaccountSubscription)(nil)).Elem()
}

func (i SubaccountSubscriptionMap) ToSubaccountSubscriptionMapOutput() SubaccountSubscriptionMapOutput {
	return i.ToSubaccountSubscriptionMapOutputWithContext(context.Background())
}

func (i SubaccountSubscriptionMap) ToSubaccountSubscriptionMapOutputWithContext(ctx context.Context) SubaccountSubscriptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubaccountSubscriptionMapOutput)
}

func (i SubaccountSubscriptionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SubaccountSubscription] {
	return pulumix.Output[map[string]*SubaccountSubscription]{
		OutputState: i.ToSubaccountSubscriptionMapOutputWithContext(ctx).OutputState,
	}
}

type SubaccountSubscriptionOutput struct{ *pulumi.OutputState }

func (SubaccountSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubaccountSubscription)(nil)).Elem()
}

func (o SubaccountSubscriptionOutput) ToSubaccountSubscriptionOutput() SubaccountSubscriptionOutput {
	return o
}

func (o SubaccountSubscriptionOutput) ToSubaccountSubscriptionOutputWithContext(ctx context.Context) SubaccountSubscriptionOutput {
	return o
}

func (o SubaccountSubscriptionOutput) ToOutput(ctx context.Context) pulumix.Output[*SubaccountSubscription] {
	return pulumix.Output[*SubaccountSubscription]{
		OutputState: o.OutputState,
	}
}

// The list of features specific to this plan.
func (o SubaccountSubscriptionOutput) AdditionalPlanFeatures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringArrayOutput { return v.AdditionalPlanFeatures }).(pulumi.StringArrayOutput)
}

// The ID returned by XSUAA after the app provider has performed a bind of the multitenant application to an XSUAA service instance.
func (o SubaccountSubscriptionOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// The unique registration name of the deployed multitenant application as defined by the app developer.
func (o SubaccountSubscriptionOutput) AppName() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringOutput { return v.AppName }).(pulumi.StringOutput)
}

// The authentication provider of the multitenant application. * XSUAA is the SAP Authorization and Trust Management service that defines scopes and permissions for users as tenants at the global account level. * IAS is Identity Authentication Service that defines scopes and permissions for users in zones (common data isolation systems across systems, SaaS tenants, and services).
func (o SubaccountSubscriptionOutput) AuthenticationProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringOutput { return v.AuthenticationProvider }).(pulumi.StringOutput)
}

// The technical name of the category defined by the app developer to which the multitenant application is grouped in customer-facing UIs.
func (o SubaccountSubscriptionOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

// The commercial name of the deployed multitenant application as defined by the app developer.
func (o SubaccountSubscriptionOutput) CommercialAppName() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringOutput { return v.CommercialAppName }).(pulumi.StringOutput)
}

// The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
func (o SubaccountSubscriptionOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringOutput { return v.CreatedDate }).(pulumi.StringOutput)
}

// Shows whether the application was developed by a customer. If not, then the application is developed by the cloud operator, such as SAP.
func (o SubaccountSubscriptionOutput) CustomerDeveloped() pulumi.BoolOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.BoolOutput { return v.CustomerDeveloped }).(pulumi.BoolOutput)
}

// The description of the multitenant application for customer-facing UIs.
func (o SubaccountSubscriptionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The display name of the application for customer-facing UIs.
func (o SubaccountSubscriptionOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// The name of the formations solution associated with the multitenant application.
func (o SubaccountSubscriptionOutput) FormationSolutionName() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringOutput { return v.FormationSolutionName }).(pulumi.StringOutput)
}

// The ID of the associated global account.
func (o SubaccountSubscriptionOutput) GlobalaccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringOutput { return v.GlobalaccountId }).(pulumi.StringOutput)
}

// The set of words or phrases assigned to the multitenant application subscription.
func (o SubaccountSubscriptionOutput) Labels() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringArrayMapOutput { return v.Labels }).(pulumi.StringArrayMapOutput)
}

// The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
func (o SubaccountSubscriptionOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringOutput { return v.LastModified }).(pulumi.StringOutput)
}

// The parameters of the subscription as a valid JSON object.
func (o SubaccountSubscriptionOutput) Parameters() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringOutput { return v.Parameters }).(pulumi.StringOutput)
}

// The plan name of the application to which the consumer has subscribed.
func (o SubaccountSubscriptionOutput) PlanName() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringOutput { return v.PlanName }).(pulumi.StringOutput)
}

// The ID of the landscape-specific environment.
func (o SubaccountSubscriptionOutput) PlatformEntityId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringOutput { return v.PlatformEntityId }).(pulumi.StringOutput)
}

// The total amount the subscribed subaccount is entitled to consume.
func (o SubaccountSubscriptionOutput) Quota() pulumi.IntOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.IntOutput { return v.Quota }).(pulumi.IntOutput)
}

// The subscription state of the subaccount regarding the multitenant application.
func (o SubaccountSubscriptionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The ID of the subaccount.
func (o SubaccountSubscriptionOutput) SubaccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringOutput { return v.SubaccountId }).(pulumi.StringOutput)
}

// The ID of the subaccount, which is subscribed to the multitenant application.
func (o SubaccountSubscriptionOutput) SubscribedSubaccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringOutput { return v.SubscribedSubaccountId }).(pulumi.StringOutput)
}

// The ID of the tenant, which is subscribed to a multitenant application.
func (o SubaccountSubscriptionOutput) SubscribedTenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringOutput { return v.SubscribedTenantId }).(pulumi.StringOutput)
}

// The URL for app users to launch the subscribed application.
func (o SubaccountSubscriptionOutput) SubscriptionUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringOutput { return v.SubscriptionUrl }).(pulumi.StringOutput)
}

// Specifies whether a consumer, whose subaccount is subscribed to the application, can change its subscriptions parameters.
func (o SubaccountSubscriptionOutput) SupportsParametersUpdates() pulumi.BoolOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.BoolOutput { return v.SupportsParametersUpdates }).(pulumi.BoolOutput)
}

// Specifies whether a consumer, whose subaccount is subscribed to the application, can change the subscription to a different plan that is available for this application and subaccount.
func (o SubaccountSubscriptionOutput) SupportsPlanUpdates() pulumi.BoolOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.BoolOutput { return v.SupportsPlanUpdates }).(pulumi.BoolOutput)
}

// The tenant ID of the application provider.
func (o SubaccountSubscriptionOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountSubscription) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type SubaccountSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (SubaccountSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubaccountSubscription)(nil)).Elem()
}

func (o SubaccountSubscriptionArrayOutput) ToSubaccountSubscriptionArrayOutput() SubaccountSubscriptionArrayOutput {
	return o
}

func (o SubaccountSubscriptionArrayOutput) ToSubaccountSubscriptionArrayOutputWithContext(ctx context.Context) SubaccountSubscriptionArrayOutput {
	return o
}

func (o SubaccountSubscriptionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SubaccountSubscription] {
	return pulumix.Output[[]*SubaccountSubscription]{
		OutputState: o.OutputState,
	}
}

func (o SubaccountSubscriptionArrayOutput) Index(i pulumi.IntInput) SubaccountSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubaccountSubscription {
		return vs[0].([]*SubaccountSubscription)[vs[1].(int)]
	}).(SubaccountSubscriptionOutput)
}

type SubaccountSubscriptionMapOutput struct{ *pulumi.OutputState }

func (SubaccountSubscriptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubaccountSubscription)(nil)).Elem()
}

func (o SubaccountSubscriptionMapOutput) ToSubaccountSubscriptionMapOutput() SubaccountSubscriptionMapOutput {
	return o
}

func (o SubaccountSubscriptionMapOutput) ToSubaccountSubscriptionMapOutputWithContext(ctx context.Context) SubaccountSubscriptionMapOutput {
	return o
}

func (o SubaccountSubscriptionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SubaccountSubscription] {
	return pulumix.Output[map[string]*SubaccountSubscription]{
		OutputState: o.OutputState,
	}
}

func (o SubaccountSubscriptionMapOutput) MapIndex(k pulumi.StringInput) SubaccountSubscriptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubaccountSubscription {
		return vs[0].(map[string]*SubaccountSubscription)[vs[1].(string)]
	}).(SubaccountSubscriptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubaccountSubscriptionInput)(nil)).Elem(), &SubaccountSubscription{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubaccountSubscriptionArrayInput)(nil)).Elem(), SubaccountSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubaccountSubscriptionMapInput)(nil)).Elem(), SubaccountSubscriptionMap{})
	pulumi.RegisterOutputType(SubaccountSubscriptionOutput{})
	pulumi.RegisterOutputType(SubaccountSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(SubaccountSubscriptionMapOutput{})
}
