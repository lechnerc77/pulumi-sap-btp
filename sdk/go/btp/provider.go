// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package btp

import (
	"context"
	"reflect"

	"errors"
	"github.com/lechnerc77/pulumi-btp/sdk/go/btp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// The provider type for the btp package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// The URL of the BTP CLI server (e.g. `https://cli.btp.cloud.sap`).
	CliServerUrl pulumi.StringPtrOutput `pulumi:"cliServerUrl"`
	// The subdomain of the global account in which you want to manage resources. To be found in the cockpit, in the global
	// account view.
	Globalaccount pulumi.StringOutput `pulumi:"globalaccount"`
	// The identity provider to be used for authentication (only required for custom idp).
	Idp pulumi.StringPtrOutput `pulumi:"idp"`
	// A valid id token. To be provided instead of 'username' and 'password'. This can also be sourced from the `BTP_IDTOKEN`
	// environment variable. (SAP-internal usage only)
	Idtoken pulumi.StringPtrOutput `pulumi:"idtoken"`
	// Your password. Note that two-factor authentication is not supported. This can also be sourced from the `BTP_PASSWORD`
	// environment variable.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// PEM encoded certificate (only required for x509 auth).
	TlsClientCertificate pulumi.StringPtrOutput `pulumi:"tlsClientCertificate"`
	// PEM encoded private key (only required for x509 auth).
	TlsClientKey pulumi.StringPtrOutput `pulumi:"tlsClientKey"`
	// The URL of the identity provider to be used for authentication (only required for x509 auth).
	TlsIdpUrl pulumi.StringPtrOutput `pulumi:"tlsIdpUrl"`
	// Your user name, usually an e-mail address. This can also be sourced from the `BTP_USERNAME` environment variable.
	Username pulumi.StringPtrOutput `pulumi:"username"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Globalaccount == nil {
		return nil, errors.New("invalid value for required argument 'Globalaccount'")
	}
	if args.Idtoken != nil {
		args.Idtoken = pulumi.ToSecret(args.Idtoken).(pulumi.StringPtrInput)
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"idtoken",
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:btp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// The URL of the BTP CLI server (e.g. `https://cli.btp.cloud.sap`).
	CliServerUrl *string `pulumi:"cliServerUrl"`
	// The subdomain of the global account in which you want to manage resources. To be found in the cockpit, in the global
	// account view.
	Globalaccount string `pulumi:"globalaccount"`
	// The identity provider to be used for authentication (only required for custom idp).
	Idp *string `pulumi:"idp"`
	// A valid id token. To be provided instead of 'username' and 'password'. This can also be sourced from the `BTP_IDTOKEN`
	// environment variable. (SAP-internal usage only)
	Idtoken *string `pulumi:"idtoken"`
	// Your password. Note that two-factor authentication is not supported. This can also be sourced from the `BTP_PASSWORD`
	// environment variable.
	Password *string `pulumi:"password"`
	// PEM encoded certificate (only required for x509 auth).
	TlsClientCertificate *string `pulumi:"tlsClientCertificate"`
	// PEM encoded private key (only required for x509 auth).
	TlsClientKey *string `pulumi:"tlsClientKey"`
	// The URL of the identity provider to be used for authentication (only required for x509 auth).
	TlsIdpUrl *string `pulumi:"tlsIdpUrl"`
	// Your user name, usually an e-mail address. This can also be sourced from the `BTP_USERNAME` environment variable.
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// The URL of the BTP CLI server (e.g. `https://cli.btp.cloud.sap`).
	CliServerUrl pulumi.StringPtrInput
	// The subdomain of the global account in which you want to manage resources. To be found in the cockpit, in the global
	// account view.
	Globalaccount pulumi.StringInput
	// The identity provider to be used for authentication (only required for custom idp).
	Idp pulumi.StringPtrInput
	// A valid id token. To be provided instead of 'username' and 'password'. This can also be sourced from the `BTP_IDTOKEN`
	// environment variable. (SAP-internal usage only)
	Idtoken pulumi.StringPtrInput
	// Your password. Note that two-factor authentication is not supported. This can also be sourced from the `BTP_PASSWORD`
	// environment variable.
	Password pulumi.StringPtrInput
	// PEM encoded certificate (only required for x509 auth).
	TlsClientCertificate pulumi.StringPtrInput
	// PEM encoded private key (only required for x509 auth).
	TlsClientKey pulumi.StringPtrInput
	// The URL of the identity provider to be used for authentication (only required for x509 auth).
	TlsIdpUrl pulumi.StringPtrInput
	// Your user name, usually an e-mail address. This can also be sourced from the `BTP_USERNAME` environment variable.
	Username pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

func (i *Provider) ToOutput(ctx context.Context) pulumix.Output[*Provider] {
	return pulumix.Output[*Provider]{
		OutputState: i.ToProviderOutputWithContext(ctx).OutputState,
	}
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func (o ProviderOutput) ToOutput(ctx context.Context) pulumix.Output[*Provider] {
	return pulumix.Output[*Provider]{
		OutputState: o.OutputState,
	}
}

// The URL of the BTP CLI server (e.g. `https://cli.btp.cloud.sap`).
func (o ProviderOutput) CliServerUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.CliServerUrl }).(pulumi.StringPtrOutput)
}

// The subdomain of the global account in which you want to manage resources. To be found in the cockpit, in the global
// account view.
func (o ProviderOutput) Globalaccount() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.Globalaccount }).(pulumi.StringOutput)
}

// The identity provider to be used for authentication (only required for custom idp).
func (o ProviderOutput) Idp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Idp }).(pulumi.StringPtrOutput)
}

// A valid id token. To be provided instead of 'username' and 'password'. This can also be sourced from the `BTP_IDTOKEN`
// environment variable. (SAP-internal usage only)
func (o ProviderOutput) Idtoken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Idtoken }).(pulumi.StringPtrOutput)
}

// Your password. Note that two-factor authentication is not supported. This can also be sourced from the `BTP_PASSWORD`
// environment variable.
func (o ProviderOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// PEM encoded certificate (only required for x509 auth).
func (o ProviderOutput) TlsClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.TlsClientCertificate }).(pulumi.StringPtrOutput)
}

// PEM encoded private key (only required for x509 auth).
func (o ProviderOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// The URL of the identity provider to be used for authentication (only required for x509 auth).
func (o ProviderOutput) TlsIdpUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.TlsIdpUrl }).(pulumi.StringPtrOutput)
}

// Your user name, usually an e-mail address. This can also be sourced from the `BTP_USERNAME` environment variable.
func (o ProviderOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
