// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package btp

import (
	"context"
	"reflect"

	"errors"
	"github.com/lechnerc77/pulumi-btp/sdk/go/btp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Assigns the entitlement plan of a service, multitenant application, or environment, to a directory. Note that some environments, such as Cloud Foundry, are available by default to all global accounts and their directorys, and therefore are not made available as entitlements.
//
// __Tip:__
// You must be assigned to the global account admin or viewer role.
//
// __Further documentation:__
// <https://help.sap.com/docs/btp/sap-business-technology-platform/entitlements-and-quotas>
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lechnerc77/pulumi-btp/sdk/go/btp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := btp.NewDirectoryEntitlement(ctx, "alertNotificationService", &btp.DirectoryEntitlementArgs{
//				DirectoryId: pulumi.String("6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f"),
//				PlanName:    pulumi.String("free"),
//				ServiceName: pulumi.String("alert-notification"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = btp.NewDirectoryEntitlement(ctx, "uasReporting", &btp.DirectoryEntitlementArgs{
//				AutoAssign:  pulumi.Bool(true),
//				DirectoryId: pulumi.String("6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f"),
//				Distribute:  pulumi.Bool(true),
//				PlanName:    pulumi.String("free"),
//				ServiceName: pulumi.String("alert-notification"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// terraform
//
// ```sh
//
//	$ pulumi import btp:index/directoryEntitlement:DirectoryEntitlement <resource_name> <subaccount_id>,<service_name>,<plan_name>
//
// ```
//
// ```sh
//
//	$ pulumi import btp:index/directoryEntitlement:DirectoryEntitlement alert_notification_service 6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f,alert-notification,free
//
// ```
type DirectoryEntitlement struct {
	pulumi.CustomResourceState

	// The quota assigned to the directory.
	Amount pulumi.IntOutput `pulumi:"amount"`
	// Determines whether the plans of entitlements that have a numeric quota with the amount specified in `autoDistributeAmount` are automatically allocated to any new subaccount that is added to the directory in the future. For entitlements without a numeric quota, it shows if the plan are assigned to any new subaccount that is added to the directory in the future (`autoDistributeAmount` is not needed). If the `distribute` parameter is set, the same assignment is also made to all subaccounts currently in the directory. Entitlements are subject to available quota in the directory.
	AutoAssign pulumi.BoolOutput `pulumi:"autoAssign"`
	// The quota of the specified plan automatically allocated to any new subaccount that is created in the future in the directory. When applying this option, `autoAssign` and/or `distribute` must also be set. Applies only to entitlements that have a numeric quota.
	AutoDistributeAmount pulumi.IntOutput `pulumi:"autoDistributeAmount"`
	// The current state of the entitlement. Possible values are:
	Category pulumi.StringOutput `pulumi:"category"`
	// The ID of the directory.
	DirectoryId pulumi.StringOutput `pulumi:"directoryId"`
	// Defines the assignment of the plan with the quota specified in `autoDistributeAmount` to subaccounts currently located in the specified directory. For entitlements without a numeric quota, the plan is assigned to the subaccounts currently located in the directory (`autoDistributeAmount` is not needed). When applying this option, `autoAssign` must also be set.
	Distribute pulumi.BoolOutput `pulumi:"distribute"`
	// The ID of the entitled service plan.
	PlanId pulumi.StringOutput `pulumi:"planId"`
	// The name of the entitled service plan.
	PlanName pulumi.StringOutput `pulumi:"planName"`
	// The name of the entitled service.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewDirectoryEntitlement registers a new resource with the given unique name, arguments, and options.
func NewDirectoryEntitlement(ctx *pulumi.Context,
	name string, args *DirectoryEntitlementArgs, opts ...pulumi.ResourceOption) (*DirectoryEntitlement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DirectoryId == nil {
		return nil, errors.New("invalid value for required argument 'DirectoryId'")
	}
	if args.PlanName == nil {
		return nil, errors.New("invalid value for required argument 'PlanName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DirectoryEntitlement
	err := ctx.RegisterResource("btp:index/directoryEntitlement:DirectoryEntitlement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDirectoryEntitlement gets an existing DirectoryEntitlement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDirectoryEntitlement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DirectoryEntitlementState, opts ...pulumi.ResourceOption) (*DirectoryEntitlement, error) {
	var resource DirectoryEntitlement
	err := ctx.ReadResource("btp:index/directoryEntitlement:DirectoryEntitlement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DirectoryEntitlement resources.
type directoryEntitlementState struct {
	// The quota assigned to the directory.
	Amount *int `pulumi:"amount"`
	// Determines whether the plans of entitlements that have a numeric quota with the amount specified in `autoDistributeAmount` are automatically allocated to any new subaccount that is added to the directory in the future. For entitlements without a numeric quota, it shows if the plan are assigned to any new subaccount that is added to the directory in the future (`autoDistributeAmount` is not needed). If the `distribute` parameter is set, the same assignment is also made to all subaccounts currently in the directory. Entitlements are subject to available quota in the directory.
	AutoAssign *bool `pulumi:"autoAssign"`
	// The quota of the specified plan automatically allocated to any new subaccount that is created in the future in the directory. When applying this option, `autoAssign` and/or `distribute` must also be set. Applies only to entitlements that have a numeric quota.
	AutoDistributeAmount *int `pulumi:"autoDistributeAmount"`
	// The current state of the entitlement. Possible values are:
	Category *string `pulumi:"category"`
	// The ID of the directory.
	DirectoryId *string `pulumi:"directoryId"`
	// Defines the assignment of the plan with the quota specified in `autoDistributeAmount` to subaccounts currently located in the specified directory. For entitlements without a numeric quota, the plan is assigned to the subaccounts currently located in the directory (`autoDistributeAmount` is not needed). When applying this option, `autoAssign` must also be set.
	Distribute *bool `pulumi:"distribute"`
	// The ID of the entitled service plan.
	PlanId *string `pulumi:"planId"`
	// The name of the entitled service plan.
	PlanName *string `pulumi:"planName"`
	// The name of the entitled service.
	ServiceName *string `pulumi:"serviceName"`
}

type DirectoryEntitlementState struct {
	// The quota assigned to the directory.
	Amount pulumi.IntPtrInput
	// Determines whether the plans of entitlements that have a numeric quota with the amount specified in `autoDistributeAmount` are automatically allocated to any new subaccount that is added to the directory in the future. For entitlements without a numeric quota, it shows if the plan are assigned to any new subaccount that is added to the directory in the future (`autoDistributeAmount` is not needed). If the `distribute` parameter is set, the same assignment is also made to all subaccounts currently in the directory. Entitlements are subject to available quota in the directory.
	AutoAssign pulumi.BoolPtrInput
	// The quota of the specified plan automatically allocated to any new subaccount that is created in the future in the directory. When applying this option, `autoAssign` and/or `distribute` must also be set. Applies only to entitlements that have a numeric quota.
	AutoDistributeAmount pulumi.IntPtrInput
	// The current state of the entitlement. Possible values are:
	Category pulumi.StringPtrInput
	// The ID of the directory.
	DirectoryId pulumi.StringPtrInput
	// Defines the assignment of the plan with the quota specified in `autoDistributeAmount` to subaccounts currently located in the specified directory. For entitlements without a numeric quota, the plan is assigned to the subaccounts currently located in the directory (`autoDistributeAmount` is not needed). When applying this option, `autoAssign` must also be set.
	Distribute pulumi.BoolPtrInput
	// The ID of the entitled service plan.
	PlanId pulumi.StringPtrInput
	// The name of the entitled service plan.
	PlanName pulumi.StringPtrInput
	// The name of the entitled service.
	ServiceName pulumi.StringPtrInput
}

func (DirectoryEntitlementState) ElementType() reflect.Type {
	return reflect.TypeOf((*directoryEntitlementState)(nil)).Elem()
}

type directoryEntitlementArgs struct {
	// The quota assigned to the directory.
	Amount *int `pulumi:"amount"`
	// Determines whether the plans of entitlements that have a numeric quota with the amount specified in `autoDistributeAmount` are automatically allocated to any new subaccount that is added to the directory in the future. For entitlements without a numeric quota, it shows if the plan are assigned to any new subaccount that is added to the directory in the future (`autoDistributeAmount` is not needed). If the `distribute` parameter is set, the same assignment is also made to all subaccounts currently in the directory. Entitlements are subject to available quota in the directory.
	AutoAssign *bool `pulumi:"autoAssign"`
	// The quota of the specified plan automatically allocated to any new subaccount that is created in the future in the directory. When applying this option, `autoAssign` and/or `distribute` must also be set. Applies only to entitlements that have a numeric quota.
	AutoDistributeAmount *int `pulumi:"autoDistributeAmount"`
	// The ID of the directory.
	DirectoryId string `pulumi:"directoryId"`
	// Defines the assignment of the plan with the quota specified in `autoDistributeAmount` to subaccounts currently located in the specified directory. For entitlements without a numeric quota, the plan is assigned to the subaccounts currently located in the directory (`autoDistributeAmount` is not needed). When applying this option, `autoAssign` must also be set.
	Distribute *bool `pulumi:"distribute"`
	// The name of the entitled service plan.
	PlanName string `pulumi:"planName"`
	// The name of the entitled service.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a DirectoryEntitlement resource.
type DirectoryEntitlementArgs struct {
	// The quota assigned to the directory.
	Amount pulumi.IntPtrInput
	// Determines whether the plans of entitlements that have a numeric quota with the amount specified in `autoDistributeAmount` are automatically allocated to any new subaccount that is added to the directory in the future. For entitlements without a numeric quota, it shows if the plan are assigned to any new subaccount that is added to the directory in the future (`autoDistributeAmount` is not needed). If the `distribute` parameter is set, the same assignment is also made to all subaccounts currently in the directory. Entitlements are subject to available quota in the directory.
	AutoAssign pulumi.BoolPtrInput
	// The quota of the specified plan automatically allocated to any new subaccount that is created in the future in the directory. When applying this option, `autoAssign` and/or `distribute` must also be set. Applies only to entitlements that have a numeric quota.
	AutoDistributeAmount pulumi.IntPtrInput
	// The ID of the directory.
	DirectoryId pulumi.StringInput
	// Defines the assignment of the plan with the quota specified in `autoDistributeAmount` to subaccounts currently located in the specified directory. For entitlements without a numeric quota, the plan is assigned to the subaccounts currently located in the directory (`autoDistributeAmount` is not needed). When applying this option, `autoAssign` must also be set.
	Distribute pulumi.BoolPtrInput
	// The name of the entitled service plan.
	PlanName pulumi.StringInput
	// The name of the entitled service.
	ServiceName pulumi.StringInput
}

func (DirectoryEntitlementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*directoryEntitlementArgs)(nil)).Elem()
}

type DirectoryEntitlementInput interface {
	pulumi.Input

	ToDirectoryEntitlementOutput() DirectoryEntitlementOutput
	ToDirectoryEntitlementOutputWithContext(ctx context.Context) DirectoryEntitlementOutput
}

func (*DirectoryEntitlement) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectoryEntitlement)(nil)).Elem()
}

func (i *DirectoryEntitlement) ToDirectoryEntitlementOutput() DirectoryEntitlementOutput {
	return i.ToDirectoryEntitlementOutputWithContext(context.Background())
}

func (i *DirectoryEntitlement) ToDirectoryEntitlementOutputWithContext(ctx context.Context) DirectoryEntitlementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryEntitlementOutput)
}

func (i *DirectoryEntitlement) ToOutput(ctx context.Context) pulumix.Output[*DirectoryEntitlement] {
	return pulumix.Output[*DirectoryEntitlement]{
		OutputState: i.ToDirectoryEntitlementOutputWithContext(ctx).OutputState,
	}
}

// DirectoryEntitlementArrayInput is an input type that accepts DirectoryEntitlementArray and DirectoryEntitlementArrayOutput values.
// You can construct a concrete instance of `DirectoryEntitlementArrayInput` via:
//
//	DirectoryEntitlementArray{ DirectoryEntitlementArgs{...} }
type DirectoryEntitlementArrayInput interface {
	pulumi.Input

	ToDirectoryEntitlementArrayOutput() DirectoryEntitlementArrayOutput
	ToDirectoryEntitlementArrayOutputWithContext(context.Context) DirectoryEntitlementArrayOutput
}

type DirectoryEntitlementArray []DirectoryEntitlementInput

func (DirectoryEntitlementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DirectoryEntitlement)(nil)).Elem()
}

func (i DirectoryEntitlementArray) ToDirectoryEntitlementArrayOutput() DirectoryEntitlementArrayOutput {
	return i.ToDirectoryEntitlementArrayOutputWithContext(context.Background())
}

func (i DirectoryEntitlementArray) ToDirectoryEntitlementArrayOutputWithContext(ctx context.Context) DirectoryEntitlementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryEntitlementArrayOutput)
}

func (i DirectoryEntitlementArray) ToOutput(ctx context.Context) pulumix.Output[[]*DirectoryEntitlement] {
	return pulumix.Output[[]*DirectoryEntitlement]{
		OutputState: i.ToDirectoryEntitlementArrayOutputWithContext(ctx).OutputState,
	}
}

// DirectoryEntitlementMapInput is an input type that accepts DirectoryEntitlementMap and DirectoryEntitlementMapOutput values.
// You can construct a concrete instance of `DirectoryEntitlementMapInput` via:
//
//	DirectoryEntitlementMap{ "key": DirectoryEntitlementArgs{...} }
type DirectoryEntitlementMapInput interface {
	pulumi.Input

	ToDirectoryEntitlementMapOutput() DirectoryEntitlementMapOutput
	ToDirectoryEntitlementMapOutputWithContext(context.Context) DirectoryEntitlementMapOutput
}

type DirectoryEntitlementMap map[string]DirectoryEntitlementInput

func (DirectoryEntitlementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DirectoryEntitlement)(nil)).Elem()
}

func (i DirectoryEntitlementMap) ToDirectoryEntitlementMapOutput() DirectoryEntitlementMapOutput {
	return i.ToDirectoryEntitlementMapOutputWithContext(context.Background())
}

func (i DirectoryEntitlementMap) ToDirectoryEntitlementMapOutputWithContext(ctx context.Context) DirectoryEntitlementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryEntitlementMapOutput)
}

func (i DirectoryEntitlementMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DirectoryEntitlement] {
	return pulumix.Output[map[string]*DirectoryEntitlement]{
		OutputState: i.ToDirectoryEntitlementMapOutputWithContext(ctx).OutputState,
	}
}

type DirectoryEntitlementOutput struct{ *pulumi.OutputState }

func (DirectoryEntitlementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DirectoryEntitlement)(nil)).Elem()
}

func (o DirectoryEntitlementOutput) ToDirectoryEntitlementOutput() DirectoryEntitlementOutput {
	return o
}

func (o DirectoryEntitlementOutput) ToDirectoryEntitlementOutputWithContext(ctx context.Context) DirectoryEntitlementOutput {
	return o
}

func (o DirectoryEntitlementOutput) ToOutput(ctx context.Context) pulumix.Output[*DirectoryEntitlement] {
	return pulumix.Output[*DirectoryEntitlement]{
		OutputState: o.OutputState,
	}
}

// The quota assigned to the directory.
func (o DirectoryEntitlementOutput) Amount() pulumi.IntOutput {
	return o.ApplyT(func(v *DirectoryEntitlement) pulumi.IntOutput { return v.Amount }).(pulumi.IntOutput)
}

// Determines whether the plans of entitlements that have a numeric quota with the amount specified in `autoDistributeAmount` are automatically allocated to any new subaccount that is added to the directory in the future. For entitlements without a numeric quota, it shows if the plan are assigned to any new subaccount that is added to the directory in the future (`autoDistributeAmount` is not needed). If the `distribute` parameter is set, the same assignment is also made to all subaccounts currently in the directory. Entitlements are subject to available quota in the directory.
func (o DirectoryEntitlementOutput) AutoAssign() pulumi.BoolOutput {
	return o.ApplyT(func(v *DirectoryEntitlement) pulumi.BoolOutput { return v.AutoAssign }).(pulumi.BoolOutput)
}

// The quota of the specified plan automatically allocated to any new subaccount that is created in the future in the directory. When applying this option, `autoAssign` and/or `distribute` must also be set. Applies only to entitlements that have a numeric quota.
func (o DirectoryEntitlementOutput) AutoDistributeAmount() pulumi.IntOutput {
	return o.ApplyT(func(v *DirectoryEntitlement) pulumi.IntOutput { return v.AutoDistributeAmount }).(pulumi.IntOutput)
}

// The current state of the entitlement. Possible values are:
func (o DirectoryEntitlementOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectoryEntitlement) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

// The ID of the directory.
func (o DirectoryEntitlementOutput) DirectoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectoryEntitlement) pulumi.StringOutput { return v.DirectoryId }).(pulumi.StringOutput)
}

// Defines the assignment of the plan with the quota specified in `autoDistributeAmount` to subaccounts currently located in the specified directory. For entitlements without a numeric quota, the plan is assigned to the subaccounts currently located in the directory (`autoDistributeAmount` is not needed). When applying this option, `autoAssign` must also be set.
func (o DirectoryEntitlementOutput) Distribute() pulumi.BoolOutput {
	return o.ApplyT(func(v *DirectoryEntitlement) pulumi.BoolOutput { return v.Distribute }).(pulumi.BoolOutput)
}

// The ID of the entitled service plan.
func (o DirectoryEntitlementOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectoryEntitlement) pulumi.StringOutput { return v.PlanId }).(pulumi.StringOutput)
}

// The name of the entitled service plan.
func (o DirectoryEntitlementOutput) PlanName() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectoryEntitlement) pulumi.StringOutput { return v.PlanName }).(pulumi.StringOutput)
}

// The name of the entitled service.
func (o DirectoryEntitlementOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *DirectoryEntitlement) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

type DirectoryEntitlementArrayOutput struct{ *pulumi.OutputState }

func (DirectoryEntitlementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DirectoryEntitlement)(nil)).Elem()
}

func (o DirectoryEntitlementArrayOutput) ToDirectoryEntitlementArrayOutput() DirectoryEntitlementArrayOutput {
	return o
}

func (o DirectoryEntitlementArrayOutput) ToDirectoryEntitlementArrayOutputWithContext(ctx context.Context) DirectoryEntitlementArrayOutput {
	return o
}

func (o DirectoryEntitlementArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DirectoryEntitlement] {
	return pulumix.Output[[]*DirectoryEntitlement]{
		OutputState: o.OutputState,
	}
}

func (o DirectoryEntitlementArrayOutput) Index(i pulumi.IntInput) DirectoryEntitlementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DirectoryEntitlement {
		return vs[0].([]*DirectoryEntitlement)[vs[1].(int)]
	}).(DirectoryEntitlementOutput)
}

type DirectoryEntitlementMapOutput struct{ *pulumi.OutputState }

func (DirectoryEntitlementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DirectoryEntitlement)(nil)).Elem()
}

func (o DirectoryEntitlementMapOutput) ToDirectoryEntitlementMapOutput() DirectoryEntitlementMapOutput {
	return o
}

func (o DirectoryEntitlementMapOutput) ToDirectoryEntitlementMapOutputWithContext(ctx context.Context) DirectoryEntitlementMapOutput {
	return o
}

func (o DirectoryEntitlementMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DirectoryEntitlement] {
	return pulumix.Output[map[string]*DirectoryEntitlement]{
		OutputState: o.OutputState,
	}
}

func (o DirectoryEntitlementMapOutput) MapIndex(k pulumi.StringInput) DirectoryEntitlementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DirectoryEntitlement {
		return vs[0].(map[string]*DirectoryEntitlement)[vs[1].(string)]
	}).(DirectoryEntitlementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryEntitlementInput)(nil)).Elem(), &DirectoryEntitlement{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryEntitlementArrayInput)(nil)).Elem(), DirectoryEntitlementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryEntitlementMapInput)(nil)).Elem(), DirectoryEntitlementMap{})
	pulumi.RegisterOutputType(DirectoryEntitlementOutput{})
	pulumi.RegisterOutputType(DirectoryEntitlementArrayOutput{})
	pulumi.RegisterOutputType(DirectoryEntitlementMapOutput{})
}
