// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package btp

import (
	"context"
	"reflect"

	"github.com/lechnerc77/pulumi-btp/sdk/go/btp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Directories allow you to organize and manage your subaccounts according to your technical and business needs. The use of directories is optional.
//
// You can create up to five levels of directories in your account hierarchy. If you have directories, you can still create subaccounts directly under your global account.
//
// __Tips:__
// * You must be assigned to the global account admin role, or the directory admin if the directory is configured to manage its authorizations.
// * A directory path in the account hierarchy can have only one directory that is enabled with the `ENTITLEMENTS` or `AUTHORIZATIONS` features. If such a directory exists, other directories in that path can only be enabled with the `DEFAULT` features.
//
// __Further documentation:__
// <https://help.sap.com/docs/btp/sap-business-technology-platform/account-model>
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lechnerc77/pulumi-btp/sdk/go/btp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			parent, err := btp.NewDirectory(ctx, "parent", &btp.DirectoryArgs{
//				Description: pulumi.String("This is a parent directory."),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = btp.NewDirectory(ctx, "child", &btp.DirectoryArgs{
//				ParentId:    parent.ID(),
//				Description: pulumi.String("This is a child directory."),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = btp.NewDirectory(ctx, "dirWithFeatures", &btp.DirectoryArgs{
//				Description: pulumi.String("This is a directory with features."),
//				Features: pulumi.StringArray{
//					pulumi.String("DEFAULT"),
//					pulumi.String("ENTITLEMENTS"),
//					pulumi.String("AUTHORIZATIONS"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// terraform
//
// ```sh
//
//	$ pulumi import btp:index/directory:Directory <resource_name> <directory_id>
//
// ```
//
// ```sh
//
//	$ pulumi import btp:index/directory:Directory parent dd005d8b-1fee-4e6b-b6ff-cb9a197b7fe0
//
// ```
type Directory struct {
	pulumi.CustomResourceState

	// The details of the user that created the directory.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	CreatedDate pulumi.StringOutput `pulumi:"createdDate"`
	// A description of the directory.
	Description pulumi.StringOutput `pulumi:"description"`
	// The features that are enabled for the directory. Possible values are:
	Features pulumi.StringArrayOutput `pulumi:"features"`
	// Contains information about the labels assigned to a specified global account. Labels are represented in a JSON array of
	// key-value pairs; each key has up to 10 corresponding values.
	Labels pulumi.StringArrayMapOutput `pulumi:"labels"`
	// The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	LastModified pulumi.StringOutput `pulumi:"lastModified"`
	// The display name of the directory.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the directory's parent entity. Typically this is the global account.
	ParentId pulumi.StringOutput `pulumi:"parentId"`
	// The current state of the directory. Possible values are: | value | description | | --- | --- | | `OK` | The CRUD
	// operation or series of operations completed successfully. | | `STARTED` | CRUD operation on an entity has started. | |
	// `CREATING` | Creating entity operation is in progress. | | `UPDATING` | Updating entity operation is in progress. | |
	// `MOVING` | Moving entity operation is in progress. | | `PROCESSING` | A series of operations related to the entity is in
	// progress. | | `DELETING` | Deleting entity operation is in progress. | | `PENDING REVIEW` | The processing operation has
	// been stopped for reviewing and can be restarted by the operator. | | `CANCELLED` | The operation or processing was
	// canceled by the operator. | | `CREATION_FAILED` | The creation operation failed, and the entity was not created or was
	// created but cannot be used. | | `UPDATE_FAILED` | The update operation failed, and the entity was not updated. | |
	// `PROCESSING_FAILED` | The processing operations failed. | | `DELETION_FAILED` | The delete operation failed, and the
	// entity was not deleted. | | `MOVE_FAILED` | Entity could not be moved to a different location. | | `MIGRATING` |
	// Migrating entity from Neo to Cloud Foundry. |
	State pulumi.StringOutput `pulumi:"state"`
	// Applies only to directories that have the user authorization management feature enabled. The subdomain becomes part of
	// the path used to access the authorization tenant of the directory. It has to be unique within the defined region.
	Subdomain pulumi.StringOutput `pulumi:"subdomain"`
}

// NewDirectory registers a new resource with the given unique name, arguments, and options.
func NewDirectory(ctx *pulumi.Context,
	name string, args *DirectoryArgs, opts ...pulumi.ResourceOption) (*Directory, error) {
	if args == nil {
		args = &DirectoryArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Directory
	err := ctx.RegisterResource("btp:index/directory:Directory", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDirectory gets an existing Directory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDirectory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DirectoryState, opts ...pulumi.ResourceOption) (*Directory, error) {
	var resource Directory
	err := ctx.ReadResource("btp:index/directory:Directory", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Directory resources.
type directoryState struct {
	// The details of the user that created the directory.
	CreatedBy *string `pulumi:"createdBy"`
	// The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	CreatedDate *string `pulumi:"createdDate"`
	// A description of the directory.
	Description *string `pulumi:"description"`
	// The features that are enabled for the directory. Possible values are:
	Features []string `pulumi:"features"`
	// Contains information about the labels assigned to a specified global account. Labels are represented in a JSON array of
	// key-value pairs; each key has up to 10 corresponding values.
	Labels map[string][]string `pulumi:"labels"`
	// The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	LastModified *string `pulumi:"lastModified"`
	// The display name of the directory.
	Name *string `pulumi:"name"`
	// The ID of the directory's parent entity. Typically this is the global account.
	ParentId *string `pulumi:"parentId"`
	// The current state of the directory. Possible values are: | value | description | | --- | --- | | `OK` | The CRUD
	// operation or series of operations completed successfully. | | `STARTED` | CRUD operation on an entity has started. | |
	// `CREATING` | Creating entity operation is in progress. | | `UPDATING` | Updating entity operation is in progress. | |
	// `MOVING` | Moving entity operation is in progress. | | `PROCESSING` | A series of operations related to the entity is in
	// progress. | | `DELETING` | Deleting entity operation is in progress. | | `PENDING REVIEW` | The processing operation has
	// been stopped for reviewing and can be restarted by the operator. | | `CANCELLED` | The operation or processing was
	// canceled by the operator. | | `CREATION_FAILED` | The creation operation failed, and the entity was not created or was
	// created but cannot be used. | | `UPDATE_FAILED` | The update operation failed, and the entity was not updated. | |
	// `PROCESSING_FAILED` | The processing operations failed. | | `DELETION_FAILED` | The delete operation failed, and the
	// entity was not deleted. | | `MOVE_FAILED` | Entity could not be moved to a different location. | | `MIGRATING` |
	// Migrating entity from Neo to Cloud Foundry. |
	State *string `pulumi:"state"`
	// Applies only to directories that have the user authorization management feature enabled. The subdomain becomes part of
	// the path used to access the authorization tenant of the directory. It has to be unique within the defined region.
	Subdomain *string `pulumi:"subdomain"`
}

type DirectoryState struct {
	// The details of the user that created the directory.
	CreatedBy pulumi.StringPtrInput
	// The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	CreatedDate pulumi.StringPtrInput
	// A description of the directory.
	Description pulumi.StringPtrInput
	// The features that are enabled for the directory. Possible values are:
	Features pulumi.StringArrayInput
	// Contains information about the labels assigned to a specified global account. Labels are represented in a JSON array of
	// key-value pairs; each key has up to 10 corresponding values.
	Labels pulumi.StringArrayMapInput
	// The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	LastModified pulumi.StringPtrInput
	// The display name of the directory.
	Name pulumi.StringPtrInput
	// The ID of the directory's parent entity. Typically this is the global account.
	ParentId pulumi.StringPtrInput
	// The current state of the directory. Possible values are: | value | description | | --- | --- | | `OK` | The CRUD
	// operation or series of operations completed successfully. | | `STARTED` | CRUD operation on an entity has started. | |
	// `CREATING` | Creating entity operation is in progress. | | `UPDATING` | Updating entity operation is in progress. | |
	// `MOVING` | Moving entity operation is in progress. | | `PROCESSING` | A series of operations related to the entity is in
	// progress. | | `DELETING` | Deleting entity operation is in progress. | | `PENDING REVIEW` | The processing operation has
	// been stopped for reviewing and can be restarted by the operator. | | `CANCELLED` | The operation or processing was
	// canceled by the operator. | | `CREATION_FAILED` | The creation operation failed, and the entity was not created or was
	// created but cannot be used. | | `UPDATE_FAILED` | The update operation failed, and the entity was not updated. | |
	// `PROCESSING_FAILED` | The processing operations failed. | | `DELETION_FAILED` | The delete operation failed, and the
	// entity was not deleted. | | `MOVE_FAILED` | Entity could not be moved to a different location. | | `MIGRATING` |
	// Migrating entity from Neo to Cloud Foundry. |
	State pulumi.StringPtrInput
	// Applies only to directories that have the user authorization management feature enabled. The subdomain becomes part of
	// the path used to access the authorization tenant of the directory. It has to be unique within the defined region.
	Subdomain pulumi.StringPtrInput
}

func (DirectoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*directoryState)(nil)).Elem()
}

type directoryArgs struct {
	// A description of the directory.
	Description *string `pulumi:"description"`
	// The features that are enabled for the directory. Possible values are:
	Features []string `pulumi:"features"`
	// Contains information about the labels assigned to a specified global account. Labels are represented in a JSON array of
	// key-value pairs; each key has up to 10 corresponding values.
	Labels map[string][]string `pulumi:"labels"`
	// The display name of the directory.
	Name *string `pulumi:"name"`
	// The ID of the directory's parent entity. Typically this is the global account.
	ParentId *string `pulumi:"parentId"`
	// Applies only to directories that have the user authorization management feature enabled. The subdomain becomes part of
	// the path used to access the authorization tenant of the directory. It has to be unique within the defined region.
	Subdomain *string `pulumi:"subdomain"`
}

// The set of arguments for constructing a Directory resource.
type DirectoryArgs struct {
	// A description of the directory.
	Description pulumi.StringPtrInput
	// The features that are enabled for the directory. Possible values are:
	Features pulumi.StringArrayInput
	// Contains information about the labels assigned to a specified global account. Labels are represented in a JSON array of
	// key-value pairs; each key has up to 10 corresponding values.
	Labels pulumi.StringArrayMapInput
	// The display name of the directory.
	Name pulumi.StringPtrInput
	// The ID of the directory's parent entity. Typically this is the global account.
	ParentId pulumi.StringPtrInput
	// Applies only to directories that have the user authorization management feature enabled. The subdomain becomes part of
	// the path used to access the authorization tenant of the directory. It has to be unique within the defined region.
	Subdomain pulumi.StringPtrInput
}

func (DirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*directoryArgs)(nil)).Elem()
}

type DirectoryInput interface {
	pulumi.Input

	ToDirectoryOutput() DirectoryOutput
	ToDirectoryOutputWithContext(ctx context.Context) DirectoryOutput
}

func (*Directory) ElementType() reflect.Type {
	return reflect.TypeOf((**Directory)(nil)).Elem()
}

func (i *Directory) ToDirectoryOutput() DirectoryOutput {
	return i.ToDirectoryOutputWithContext(context.Background())
}

func (i *Directory) ToDirectoryOutputWithContext(ctx context.Context) DirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryOutput)
}

func (i *Directory) ToOutput(ctx context.Context) pulumix.Output[*Directory] {
	return pulumix.Output[*Directory]{
		OutputState: i.ToDirectoryOutputWithContext(ctx).OutputState,
	}
}

// DirectoryArrayInput is an input type that accepts DirectoryArray and DirectoryArrayOutput values.
// You can construct a concrete instance of `DirectoryArrayInput` via:
//
//	DirectoryArray{ DirectoryArgs{...} }
type DirectoryArrayInput interface {
	pulumi.Input

	ToDirectoryArrayOutput() DirectoryArrayOutput
	ToDirectoryArrayOutputWithContext(context.Context) DirectoryArrayOutput
}

type DirectoryArray []DirectoryInput

func (DirectoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Directory)(nil)).Elem()
}

func (i DirectoryArray) ToDirectoryArrayOutput() DirectoryArrayOutput {
	return i.ToDirectoryArrayOutputWithContext(context.Background())
}

func (i DirectoryArray) ToDirectoryArrayOutputWithContext(ctx context.Context) DirectoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryArrayOutput)
}

func (i DirectoryArray) ToOutput(ctx context.Context) pulumix.Output[[]*Directory] {
	return pulumix.Output[[]*Directory]{
		OutputState: i.ToDirectoryArrayOutputWithContext(ctx).OutputState,
	}
}

// DirectoryMapInput is an input type that accepts DirectoryMap and DirectoryMapOutput values.
// You can construct a concrete instance of `DirectoryMapInput` via:
//
//	DirectoryMap{ "key": DirectoryArgs{...} }
type DirectoryMapInput interface {
	pulumi.Input

	ToDirectoryMapOutput() DirectoryMapOutput
	ToDirectoryMapOutputWithContext(context.Context) DirectoryMapOutput
}

type DirectoryMap map[string]DirectoryInput

func (DirectoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Directory)(nil)).Elem()
}

func (i DirectoryMap) ToDirectoryMapOutput() DirectoryMapOutput {
	return i.ToDirectoryMapOutputWithContext(context.Background())
}

func (i DirectoryMap) ToDirectoryMapOutputWithContext(ctx context.Context) DirectoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryMapOutput)
}

func (i DirectoryMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Directory] {
	return pulumix.Output[map[string]*Directory]{
		OutputState: i.ToDirectoryMapOutputWithContext(ctx).OutputState,
	}
}

type DirectoryOutput struct{ *pulumi.OutputState }

func (DirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Directory)(nil)).Elem()
}

func (o DirectoryOutput) ToDirectoryOutput() DirectoryOutput {
	return o
}

func (o DirectoryOutput) ToDirectoryOutputWithContext(ctx context.Context) DirectoryOutput {
	return o
}

func (o DirectoryOutput) ToOutput(ctx context.Context) pulumix.Output[*Directory] {
	return pulumix.Output[*Directory]{
		OutputState: o.OutputState,
	}
}

// The details of the user that created the directory.
func (o DirectoryOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
func (o DirectoryOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.CreatedDate }).(pulumi.StringOutput)
}

// A description of the directory.
func (o DirectoryOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The features that are enabled for the directory. Possible values are:
func (o DirectoryOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringArrayOutput { return v.Features }).(pulumi.StringArrayOutput)
}

// Contains information about the labels assigned to a specified global account. Labels are represented in a JSON array of
// key-value pairs; each key has up to 10 corresponding values.
func (o DirectoryOutput) Labels() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringArrayMapOutput { return v.Labels }).(pulumi.StringArrayMapOutput)
}

// The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
func (o DirectoryOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.LastModified }).(pulumi.StringOutput)
}

// The display name of the directory.
func (o DirectoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the directory's parent entity. Typically this is the global account.
func (o DirectoryOutput) ParentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.ParentId }).(pulumi.StringOutput)
}

// The current state of the directory. Possible values are: | value | description | | --- | --- | | `OK` | The CRUD
// operation or series of operations completed successfully. | | `STARTED` | CRUD operation on an entity has started. | |
// `CREATING` | Creating entity operation is in progress. | | `UPDATING` | Updating entity operation is in progress. | |
// `MOVING` | Moving entity operation is in progress. | | `PROCESSING` | A series of operations related to the entity is in
// progress. | | `DELETING` | Deleting entity operation is in progress. | | `PENDING REVIEW` | The processing operation has
// been stopped for reviewing and can be restarted by the operator. | | `CANCELLED` | The operation or processing was
// canceled by the operator. | | `CREATION_FAILED` | The creation operation failed, and the entity was not created or was
// created but cannot be used. | | `UPDATE_FAILED` | The update operation failed, and the entity was not updated. | |
// `PROCESSING_FAILED` | The processing operations failed. | | `DELETION_FAILED` | The delete operation failed, and the
// entity was not deleted. | | `MOVE_FAILED` | Entity could not be moved to a different location. | | `MIGRATING` |
// Migrating entity from Neo to Cloud Foundry. |
func (o DirectoryOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Applies only to directories that have the user authorization management feature enabled. The subdomain becomes part of
// the path used to access the authorization tenant of the directory. It has to be unique within the defined region.
func (o DirectoryOutput) Subdomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Directory) pulumi.StringOutput { return v.Subdomain }).(pulumi.StringOutput)
}

type DirectoryArrayOutput struct{ *pulumi.OutputState }

func (DirectoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Directory)(nil)).Elem()
}

func (o DirectoryArrayOutput) ToDirectoryArrayOutput() DirectoryArrayOutput {
	return o
}

func (o DirectoryArrayOutput) ToDirectoryArrayOutputWithContext(ctx context.Context) DirectoryArrayOutput {
	return o
}

func (o DirectoryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Directory] {
	return pulumix.Output[[]*Directory]{
		OutputState: o.OutputState,
	}
}

func (o DirectoryArrayOutput) Index(i pulumi.IntInput) DirectoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Directory {
		return vs[0].([]*Directory)[vs[1].(int)]
	}).(DirectoryOutput)
}

type DirectoryMapOutput struct{ *pulumi.OutputState }

func (DirectoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Directory)(nil)).Elem()
}

func (o DirectoryMapOutput) ToDirectoryMapOutput() DirectoryMapOutput {
	return o
}

func (o DirectoryMapOutput) ToDirectoryMapOutputWithContext(ctx context.Context) DirectoryMapOutput {
	return o
}

func (o DirectoryMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Directory] {
	return pulumix.Output[map[string]*Directory]{
		OutputState: o.OutputState,
	}
}

func (o DirectoryMapOutput) MapIndex(k pulumi.StringInput) DirectoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Directory {
		return vs[0].(map[string]*Directory)[vs[1].(string)]
	}).(DirectoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryInput)(nil)).Elem(), &Directory{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryArrayInput)(nil)).Elem(), DirectoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryMapInput)(nil)).Elem(), DirectoryMap{})
	pulumi.RegisterOutputType(DirectoryOutput{})
	pulumi.RegisterOutputType(DirectoryArrayOutput{})
	pulumi.RegisterOutputType(DirectoryMapOutput{})
}
