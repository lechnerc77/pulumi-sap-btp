// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package btp

import (
	"context"
	"reflect"

	"errors"
	"github.com/lechnerc77/pulumi-btp/sdk/go/btp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Assigns the entitlement plan of a service, multitenant application, or environment, to a subaccount. Note that some environments, such as Cloud Foundry, are available by default to all global accounts and their subaccounts, and therefore are not made available as entitlements.
//
// __Tip:__
// You must be assigned to the global account admin or viewer role.
//
// __Further documentation:__
// <https://help.sap.com/docs/btp/sap-business-technology-platform/entitlements-and-quotas>
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lechnerc77/pulumi-btp/sdk/go/btp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := btp.NewSubaccountEntitlement(ctx, "alertNotificationService", &btp.SubaccountEntitlementArgs{
//				PlanName:     pulumi.String("free"),
//				ServiceName:  pulumi.String("alert-notification"),
//				SubaccountId: pulumi.String("6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = btp.NewSubaccountEntitlement(ctx, "uasReporting", &btp.SubaccountEntitlementArgs{
//				Amount:       pulumi.Int(1),
//				PlanName:     pulumi.String("reporting-directory"),
//				ServiceName:  pulumi.String("uas"),
//				SubaccountId: pulumi.String("6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// terraform
//
// ```sh
//
//	$ pulumi import btp:index/subaccountEntitlement:SubaccountEntitlement <resource_name> <subaccount_id>,<service_name>,<plan_name>
//
// ```
//
// ```sh
//
//	$ pulumi import btp:index/subaccountEntitlement:SubaccountEntitlement alert_notification_service 6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f,alert-notification,free
//
// ```
type SubaccountEntitlement struct {
	pulumi.CustomResourceState

	// The quota assigned to the subaccount.
	Amount pulumi.IntOutput `pulumi:"amount"`
	// The current state of the entitlement. Possible values are:
	Category pulumi.StringOutput `pulumi:"category"`
	// The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	CreatedDate pulumi.StringOutput `pulumi:"createdDate"`
	// The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	LastModified pulumi.StringOutput `pulumi:"lastModified"`
	// The ID of the entitled service plan.
	PlanId pulumi.StringOutput `pulumi:"planId"`
	// The name of the entitled service plan.
	PlanName pulumi.StringOutput `pulumi:"planName"`
	// The name of the entitled service.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// The current state of the entitlement. Possible values are: | state | description | | --- | --- | | `OK` | The CRUD
	// operation or series of operations completed successfully. | | `STARTED` | The processing operation started | |
	// `PROCESSING` | The processing operation is in progress | | `PROCESSING_FAILED` | The processing operation failed |
	State pulumi.StringOutput `pulumi:"state"`
	// The ID of the subaccount.
	SubaccountId pulumi.StringOutput `pulumi:"subaccountId"`
}

// NewSubaccountEntitlement registers a new resource with the given unique name, arguments, and options.
func NewSubaccountEntitlement(ctx *pulumi.Context,
	name string, args *SubaccountEntitlementArgs, opts ...pulumi.ResourceOption) (*SubaccountEntitlement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PlanName == nil {
		return nil, errors.New("invalid value for required argument 'PlanName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.SubaccountId == nil {
		return nil, errors.New("invalid value for required argument 'SubaccountId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SubaccountEntitlement
	err := ctx.RegisterResource("btp:index/subaccountEntitlement:SubaccountEntitlement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubaccountEntitlement gets an existing SubaccountEntitlement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubaccountEntitlement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubaccountEntitlementState, opts ...pulumi.ResourceOption) (*SubaccountEntitlement, error) {
	var resource SubaccountEntitlement
	err := ctx.ReadResource("btp:index/subaccountEntitlement:SubaccountEntitlement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubaccountEntitlement resources.
type subaccountEntitlementState struct {
	// The quota assigned to the subaccount.
	Amount *int `pulumi:"amount"`
	// The current state of the entitlement. Possible values are:
	Category *string `pulumi:"category"`
	// The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	CreatedDate *string `pulumi:"createdDate"`
	// The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	LastModified *string `pulumi:"lastModified"`
	// The ID of the entitled service plan.
	PlanId *string `pulumi:"planId"`
	// The name of the entitled service plan.
	PlanName *string `pulumi:"planName"`
	// The name of the entitled service.
	ServiceName *string `pulumi:"serviceName"`
	// The current state of the entitlement. Possible values are: | state | description | | --- | --- | | `OK` | The CRUD
	// operation or series of operations completed successfully. | | `STARTED` | The processing operation started | |
	// `PROCESSING` | The processing operation is in progress | | `PROCESSING_FAILED` | The processing operation failed |
	State *string `pulumi:"state"`
	// The ID of the subaccount.
	SubaccountId *string `pulumi:"subaccountId"`
}

type SubaccountEntitlementState struct {
	// The quota assigned to the subaccount.
	Amount pulumi.IntPtrInput
	// The current state of the entitlement. Possible values are:
	Category pulumi.StringPtrInput
	// The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	CreatedDate pulumi.StringPtrInput
	// The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
	LastModified pulumi.StringPtrInput
	// The ID of the entitled service plan.
	PlanId pulumi.StringPtrInput
	// The name of the entitled service plan.
	PlanName pulumi.StringPtrInput
	// The name of the entitled service.
	ServiceName pulumi.StringPtrInput
	// The current state of the entitlement. Possible values are: | state | description | | --- | --- | | `OK` | The CRUD
	// operation or series of operations completed successfully. | | `STARTED` | The processing operation started | |
	// `PROCESSING` | The processing operation is in progress | | `PROCESSING_FAILED` | The processing operation failed |
	State pulumi.StringPtrInput
	// The ID of the subaccount.
	SubaccountId pulumi.StringPtrInput
}

func (SubaccountEntitlementState) ElementType() reflect.Type {
	return reflect.TypeOf((*subaccountEntitlementState)(nil)).Elem()
}

type subaccountEntitlementArgs struct {
	// The quota assigned to the subaccount.
	Amount *int `pulumi:"amount"`
	// The name of the entitled service plan.
	PlanName string `pulumi:"planName"`
	// The name of the entitled service.
	ServiceName string `pulumi:"serviceName"`
	// The ID of the subaccount.
	SubaccountId string `pulumi:"subaccountId"`
}

// The set of arguments for constructing a SubaccountEntitlement resource.
type SubaccountEntitlementArgs struct {
	// The quota assigned to the subaccount.
	Amount pulumi.IntPtrInput
	// The name of the entitled service plan.
	PlanName pulumi.StringInput
	// The name of the entitled service.
	ServiceName pulumi.StringInput
	// The ID of the subaccount.
	SubaccountId pulumi.StringInput
}

func (SubaccountEntitlementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subaccountEntitlementArgs)(nil)).Elem()
}

type SubaccountEntitlementInput interface {
	pulumi.Input

	ToSubaccountEntitlementOutput() SubaccountEntitlementOutput
	ToSubaccountEntitlementOutputWithContext(ctx context.Context) SubaccountEntitlementOutput
}

func (*SubaccountEntitlement) ElementType() reflect.Type {
	return reflect.TypeOf((**SubaccountEntitlement)(nil)).Elem()
}

func (i *SubaccountEntitlement) ToSubaccountEntitlementOutput() SubaccountEntitlementOutput {
	return i.ToSubaccountEntitlementOutputWithContext(context.Background())
}

func (i *SubaccountEntitlement) ToSubaccountEntitlementOutputWithContext(ctx context.Context) SubaccountEntitlementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubaccountEntitlementOutput)
}

func (i *SubaccountEntitlement) ToOutput(ctx context.Context) pulumix.Output[*SubaccountEntitlement] {
	return pulumix.Output[*SubaccountEntitlement]{
		OutputState: i.ToSubaccountEntitlementOutputWithContext(ctx).OutputState,
	}
}

// SubaccountEntitlementArrayInput is an input type that accepts SubaccountEntitlementArray and SubaccountEntitlementArrayOutput values.
// You can construct a concrete instance of `SubaccountEntitlementArrayInput` via:
//
//	SubaccountEntitlementArray{ SubaccountEntitlementArgs{...} }
type SubaccountEntitlementArrayInput interface {
	pulumi.Input

	ToSubaccountEntitlementArrayOutput() SubaccountEntitlementArrayOutput
	ToSubaccountEntitlementArrayOutputWithContext(context.Context) SubaccountEntitlementArrayOutput
}

type SubaccountEntitlementArray []SubaccountEntitlementInput

func (SubaccountEntitlementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubaccountEntitlement)(nil)).Elem()
}

func (i SubaccountEntitlementArray) ToSubaccountEntitlementArrayOutput() SubaccountEntitlementArrayOutput {
	return i.ToSubaccountEntitlementArrayOutputWithContext(context.Background())
}

func (i SubaccountEntitlementArray) ToSubaccountEntitlementArrayOutputWithContext(ctx context.Context) SubaccountEntitlementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubaccountEntitlementArrayOutput)
}

func (i SubaccountEntitlementArray) ToOutput(ctx context.Context) pulumix.Output[[]*SubaccountEntitlement] {
	return pulumix.Output[[]*SubaccountEntitlement]{
		OutputState: i.ToSubaccountEntitlementArrayOutputWithContext(ctx).OutputState,
	}
}

// SubaccountEntitlementMapInput is an input type that accepts SubaccountEntitlementMap and SubaccountEntitlementMapOutput values.
// You can construct a concrete instance of `SubaccountEntitlementMapInput` via:
//
//	SubaccountEntitlementMap{ "key": SubaccountEntitlementArgs{...} }
type SubaccountEntitlementMapInput interface {
	pulumi.Input

	ToSubaccountEntitlementMapOutput() SubaccountEntitlementMapOutput
	ToSubaccountEntitlementMapOutputWithContext(context.Context) SubaccountEntitlementMapOutput
}

type SubaccountEntitlementMap map[string]SubaccountEntitlementInput

func (SubaccountEntitlementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubaccountEntitlement)(nil)).Elem()
}

func (i SubaccountEntitlementMap) ToSubaccountEntitlementMapOutput() SubaccountEntitlementMapOutput {
	return i.ToSubaccountEntitlementMapOutputWithContext(context.Background())
}

func (i SubaccountEntitlementMap) ToSubaccountEntitlementMapOutputWithContext(ctx context.Context) SubaccountEntitlementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubaccountEntitlementMapOutput)
}

func (i SubaccountEntitlementMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SubaccountEntitlement] {
	return pulumix.Output[map[string]*SubaccountEntitlement]{
		OutputState: i.ToSubaccountEntitlementMapOutputWithContext(ctx).OutputState,
	}
}

type SubaccountEntitlementOutput struct{ *pulumi.OutputState }

func (SubaccountEntitlementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubaccountEntitlement)(nil)).Elem()
}

func (o SubaccountEntitlementOutput) ToSubaccountEntitlementOutput() SubaccountEntitlementOutput {
	return o
}

func (o SubaccountEntitlementOutput) ToSubaccountEntitlementOutputWithContext(ctx context.Context) SubaccountEntitlementOutput {
	return o
}

func (o SubaccountEntitlementOutput) ToOutput(ctx context.Context) pulumix.Output[*SubaccountEntitlement] {
	return pulumix.Output[*SubaccountEntitlement]{
		OutputState: o.OutputState,
	}
}

// The quota assigned to the subaccount.
func (o SubaccountEntitlementOutput) Amount() pulumi.IntOutput {
	return o.ApplyT(func(v *SubaccountEntitlement) pulumi.IntOutput { return v.Amount }).(pulumi.IntOutput)
}

// The current state of the entitlement. Possible values are:
func (o SubaccountEntitlementOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountEntitlement) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

// The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
func (o SubaccountEntitlementOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountEntitlement) pulumi.StringOutput { return v.CreatedDate }).(pulumi.StringOutput)
}

// The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
func (o SubaccountEntitlementOutput) LastModified() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountEntitlement) pulumi.StringOutput { return v.LastModified }).(pulumi.StringOutput)
}

// The ID of the entitled service plan.
func (o SubaccountEntitlementOutput) PlanId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountEntitlement) pulumi.StringOutput { return v.PlanId }).(pulumi.StringOutput)
}

// The name of the entitled service plan.
func (o SubaccountEntitlementOutput) PlanName() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountEntitlement) pulumi.StringOutput { return v.PlanName }).(pulumi.StringOutput)
}

// The name of the entitled service.
func (o SubaccountEntitlementOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountEntitlement) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// The current state of the entitlement. Possible values are: | state | description | | --- | --- | | `OK` | The CRUD
// operation or series of operations completed successfully. | | `STARTED` | The processing operation started | |
// `PROCESSING` | The processing operation is in progress | | `PROCESSING_FAILED` | The processing operation failed |
func (o SubaccountEntitlementOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountEntitlement) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The ID of the subaccount.
func (o SubaccountEntitlementOutput) SubaccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountEntitlement) pulumi.StringOutput { return v.SubaccountId }).(pulumi.StringOutput)
}

type SubaccountEntitlementArrayOutput struct{ *pulumi.OutputState }

func (SubaccountEntitlementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubaccountEntitlement)(nil)).Elem()
}

func (o SubaccountEntitlementArrayOutput) ToSubaccountEntitlementArrayOutput() SubaccountEntitlementArrayOutput {
	return o
}

func (o SubaccountEntitlementArrayOutput) ToSubaccountEntitlementArrayOutputWithContext(ctx context.Context) SubaccountEntitlementArrayOutput {
	return o
}

func (o SubaccountEntitlementArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SubaccountEntitlement] {
	return pulumix.Output[[]*SubaccountEntitlement]{
		OutputState: o.OutputState,
	}
}

func (o SubaccountEntitlementArrayOutput) Index(i pulumi.IntInput) SubaccountEntitlementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubaccountEntitlement {
		return vs[0].([]*SubaccountEntitlement)[vs[1].(int)]
	}).(SubaccountEntitlementOutput)
}

type SubaccountEntitlementMapOutput struct{ *pulumi.OutputState }

func (SubaccountEntitlementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubaccountEntitlement)(nil)).Elem()
}

func (o SubaccountEntitlementMapOutput) ToSubaccountEntitlementMapOutput() SubaccountEntitlementMapOutput {
	return o
}

func (o SubaccountEntitlementMapOutput) ToSubaccountEntitlementMapOutputWithContext(ctx context.Context) SubaccountEntitlementMapOutput {
	return o
}

func (o SubaccountEntitlementMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SubaccountEntitlement] {
	return pulumix.Output[map[string]*SubaccountEntitlement]{
		OutputState: o.OutputState,
	}
}

func (o SubaccountEntitlementMapOutput) MapIndex(k pulumi.StringInput) SubaccountEntitlementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubaccountEntitlement {
		return vs[0].(map[string]*SubaccountEntitlement)[vs[1].(string)]
	}).(SubaccountEntitlementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubaccountEntitlementInput)(nil)).Elem(), &SubaccountEntitlement{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubaccountEntitlementArrayInput)(nil)).Elem(), SubaccountEntitlementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubaccountEntitlementMapInput)(nil)).Elem(), SubaccountEntitlementMap{})
	pulumi.RegisterOutputType(SubaccountEntitlementOutput{})
	pulumi.RegisterOutputType(SubaccountEntitlementArrayOutput{})
	pulumi.RegisterOutputType(SubaccountEntitlementMapOutput{})
}
