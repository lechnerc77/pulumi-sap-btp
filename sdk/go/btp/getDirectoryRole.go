// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package btp

import (
	"context"
	"reflect"

	"github.com/lechnerc77/pulumi-btp/sdk/go/btp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets details about a specific directory role.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lechnerc77/pulumi-btp/sdk/go/btp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := btp.GetDirectoryRole(ctx, &btp.GetDirectoryRoleArgs{
//				AppId:            "xsuaa!t1",
//				DirectoryId:      "dd005d8b-1fee-4e6b-b6ff-cb9a197b7fe0",
//				Name:             "User and Role Auditor",
//				RoleTemplateName: "xsuaa_auditor",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDirectoryRole(ctx *pulumi.Context, args *GetDirectoryRoleArgs, opts ...pulumi.InvokeOption) (*GetDirectoryRoleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDirectoryRoleResult
	err := ctx.Invoke("btp:index/getDirectoryRole:getDirectoryRole", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDirectoryRole.
type GetDirectoryRoleArgs struct {
	// The ID of the xsuaa application.
	AppId string `pulumi:"appId"`
	// The ID of the directory.
	DirectoryId string `pulumi:"directoryId"`
	// The name of the role.
	Name string `pulumi:"name"`
	// The name of the role template.
	RoleTemplateName string `pulumi:"roleTemplateName"`
}

// A collection of values returned by getDirectoryRole.
type GetDirectoryRoleResult struct {
	// The ID of the xsuaa application.
	AppId string `pulumi:"appId"`
	// The description of the role.
	Description string `pulumi:"description"`
	// The ID of the directory.
	DirectoryId string `pulumi:"directoryId"`
	// The ID of the directory.
	//
	// Deprecated: Use the `directory_id` attribute instead
	Id string `pulumi:"id"`
	// The name of the role.
	Name string `pulumi:"name"`
	// Shows whether the role can be modified or not.
	ReadOnly bool `pulumi:"readOnly"`
	// The name of the role template.
	RoleTemplateName string `pulumi:"roleTemplateName"`
	// The scopes available with this role.
	Scopes []GetDirectoryRoleScope `pulumi:"scopes"`
}

func GetDirectoryRoleOutput(ctx *pulumi.Context, args GetDirectoryRoleOutputArgs, opts ...pulumi.InvokeOption) GetDirectoryRoleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDirectoryRoleResult, error) {
			args := v.(GetDirectoryRoleArgs)
			r, err := GetDirectoryRole(ctx, &args, opts...)
			var s GetDirectoryRoleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDirectoryRoleResultOutput)
}

// A collection of arguments for invoking getDirectoryRole.
type GetDirectoryRoleOutputArgs struct {
	// The ID of the xsuaa application.
	AppId pulumi.StringInput `pulumi:"appId"`
	// The ID of the directory.
	DirectoryId pulumi.StringInput `pulumi:"directoryId"`
	// The name of the role.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the role template.
	RoleTemplateName pulumi.StringInput `pulumi:"roleTemplateName"`
}

func (GetDirectoryRoleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDirectoryRoleArgs)(nil)).Elem()
}

// A collection of values returned by getDirectoryRole.
type GetDirectoryRoleResultOutput struct{ *pulumi.OutputState }

func (GetDirectoryRoleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDirectoryRoleResult)(nil)).Elem()
}

func (o GetDirectoryRoleResultOutput) ToGetDirectoryRoleResultOutput() GetDirectoryRoleResultOutput {
	return o
}

func (o GetDirectoryRoleResultOutput) ToGetDirectoryRoleResultOutputWithContext(ctx context.Context) GetDirectoryRoleResultOutput {
	return o
}

func (o GetDirectoryRoleResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetDirectoryRoleResult] {
	return pulumix.Output[GetDirectoryRoleResult]{
		OutputState: o.OutputState,
	}
}

// The ID of the xsuaa application.
func (o GetDirectoryRoleResultOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDirectoryRoleResult) string { return v.AppId }).(pulumi.StringOutput)
}

// The description of the role.
func (o GetDirectoryRoleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetDirectoryRoleResult) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the directory.
func (o GetDirectoryRoleResultOutput) DirectoryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDirectoryRoleResult) string { return v.DirectoryId }).(pulumi.StringOutput)
}

// The ID of the directory.
//
// Deprecated: Use the `directory_id` attribute instead
func (o GetDirectoryRoleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDirectoryRoleResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the role.
func (o GetDirectoryRoleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDirectoryRoleResult) string { return v.Name }).(pulumi.StringOutput)
}

// Shows whether the role can be modified or not.
func (o GetDirectoryRoleResultOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDirectoryRoleResult) bool { return v.ReadOnly }).(pulumi.BoolOutput)
}

// The name of the role template.
func (o GetDirectoryRoleResultOutput) RoleTemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDirectoryRoleResult) string { return v.RoleTemplateName }).(pulumi.StringOutput)
}

// The scopes available with this role.
func (o GetDirectoryRoleResultOutput) Scopes() GetDirectoryRoleScopeArrayOutput {
	return o.ApplyT(func(v GetDirectoryRoleResult) []GetDirectoryRoleScope { return v.Scopes }).(GetDirectoryRoleScopeArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDirectoryRoleResultOutput{})
}
