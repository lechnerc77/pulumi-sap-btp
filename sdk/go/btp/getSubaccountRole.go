// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package btp

import (
	"context"
	"reflect"

	"github.com/lechnerc77/pulumi-btp/sdk/go/btp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Gets details about a specific subaccount role.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lechnerc77/pulumi-btp/sdk/go/btp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := btp.GetSubaccountRole(ctx, &btp.GetSubaccountRoleArgs{
//				AppId:            "xsuaa!t1",
//				Name:             "User and Role Auditor",
//				RoleTemplateName: "xsuaa_auditor",
//				SubaccountId:     "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSubaccountRole(ctx *pulumi.Context, args *GetSubaccountRoleArgs, opts ...pulumi.InvokeOption) (*GetSubaccountRoleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSubaccountRoleResult
	err := ctx.Invoke("btp:index/getSubaccountRole:getSubaccountRole", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubaccountRole.
type GetSubaccountRoleArgs struct {
	// The ID of the xsuaa application.
	AppId string `pulumi:"appId"`
	// The name of the role.
	Name string `pulumi:"name"`
	// The name of the role template.
	RoleTemplateName string `pulumi:"roleTemplateName"`
	// The ID of the subaccount.
	SubaccountId string `pulumi:"subaccountId"`
}

// A collection of values returned by getSubaccountRole.
type GetSubaccountRoleResult struct {
	// The ID of the xsuaa application.
	AppId string `pulumi:"appId"`
	// The description of the role.
	Description string `pulumi:"description"`
	// The ID of the subaccount.
	//
	// Deprecated: Use the `subaccount_id` attribute instead
	Id string `pulumi:"id"`
	// The name of the role.
	Name string `pulumi:"name"`
	// Shows whether the role can be modified or not.
	ReadOnly bool `pulumi:"readOnly"`
	// The name of the role template.
	RoleTemplateName string `pulumi:"roleTemplateName"`
	// The scopes available with this role.
	Scopes []GetSubaccountRoleScope `pulumi:"scopes"`
	// The ID of the subaccount.
	SubaccountId string `pulumi:"subaccountId"`
}

func GetSubaccountRoleOutput(ctx *pulumi.Context, args GetSubaccountRoleOutputArgs, opts ...pulumi.InvokeOption) GetSubaccountRoleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSubaccountRoleResult, error) {
			args := v.(GetSubaccountRoleArgs)
			r, err := GetSubaccountRole(ctx, &args, opts...)
			var s GetSubaccountRoleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSubaccountRoleResultOutput)
}

// A collection of arguments for invoking getSubaccountRole.
type GetSubaccountRoleOutputArgs struct {
	// The ID of the xsuaa application.
	AppId pulumi.StringInput `pulumi:"appId"`
	// The name of the role.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the role template.
	RoleTemplateName pulumi.StringInput `pulumi:"roleTemplateName"`
	// The ID of the subaccount.
	SubaccountId pulumi.StringInput `pulumi:"subaccountId"`
}

func (GetSubaccountRoleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubaccountRoleArgs)(nil)).Elem()
}

// A collection of values returned by getSubaccountRole.
type GetSubaccountRoleResultOutput struct{ *pulumi.OutputState }

func (GetSubaccountRoleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubaccountRoleResult)(nil)).Elem()
}

func (o GetSubaccountRoleResultOutput) ToGetSubaccountRoleResultOutput() GetSubaccountRoleResultOutput {
	return o
}

func (o GetSubaccountRoleResultOutput) ToGetSubaccountRoleResultOutputWithContext(ctx context.Context) GetSubaccountRoleResultOutput {
	return o
}

func (o GetSubaccountRoleResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetSubaccountRoleResult] {
	return pulumix.Output[GetSubaccountRoleResult]{
		OutputState: o.OutputState,
	}
}

// The ID of the xsuaa application.
func (o GetSubaccountRoleResultOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubaccountRoleResult) string { return v.AppId }).(pulumi.StringOutput)
}

// The description of the role.
func (o GetSubaccountRoleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubaccountRoleResult) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the subaccount.
//
// Deprecated: Use the `subaccount_id` attribute instead
func (o GetSubaccountRoleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubaccountRoleResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the role.
func (o GetSubaccountRoleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubaccountRoleResult) string { return v.Name }).(pulumi.StringOutput)
}

// Shows whether the role can be modified or not.
func (o GetSubaccountRoleResultOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSubaccountRoleResult) bool { return v.ReadOnly }).(pulumi.BoolOutput)
}

// The name of the role template.
func (o GetSubaccountRoleResultOutput) RoleTemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubaccountRoleResult) string { return v.RoleTemplateName }).(pulumi.StringOutput)
}

// The scopes available with this role.
func (o GetSubaccountRoleResultOutput) Scopes() GetSubaccountRoleScopeArrayOutput {
	return o.ApplyT(func(v GetSubaccountRoleResult) []GetSubaccountRoleScope { return v.Scopes }).(GetSubaccountRoleScopeArrayOutput)
}

// The ID of the subaccount.
func (o GetSubaccountRoleResultOutput) SubaccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubaccountRoleResult) string { return v.SubaccountId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSubaccountRoleResultOutput{})
}
