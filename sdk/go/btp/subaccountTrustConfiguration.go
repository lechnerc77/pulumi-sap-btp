// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package btp

import (
	"context"
	"reflect"

	"errors"
	"github.com/lechnerc77/pulumi-btp/sdk/go/btp/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Establishes trust from a subaccount to an Identity Authentication tenant.
//
// __Further documentation:__
// <https://help.sap.com/docs/btp/sap-business-technology-platform/trust-and-federation-with-identity-providers>
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lechnerc77/pulumi-btp/sdk/go/btp"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := btp.NewSubaccountTrustConfiguration(ctx, "simple", &btp.SubaccountTrustConfigurationArgs{
//				IdentityProvider: pulumi.String("terraformint.accounts400.ondemand.com"),
//				SubaccountId:     pulumi.String("6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = btp.NewSubaccountTrustConfiguration(ctx, "fullyCustomized", &btp.SubaccountTrustConfigurationArgs{
//				Description:      pulumi.String("my-description"),
//				IdentityProvider: pulumi.String("terraformint.accounts400.ondemand.com"),
//				SubaccountId:     pulumi.String("6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// terraform
//
// ```sh
//
//	$ pulumi import btp:index/subaccountTrustConfiguration:SubaccountTrustConfiguration terraform importbtp_subaccount_trust_configuration.<resource_name> <subaccount_id>,<origin>
//
// ```
//
// ```sh
//
//	$ pulumi import btp:index/subaccountTrustConfiguration:SubaccountTrustConfiguration trust 6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f,sap.custom
//
// ```
type SubaccountTrustConfiguration struct {
	pulumi.CustomResourceState

	// Determines that any user from the tenant can log in. If not set, only the ones who already have a shadow user can log in.
	AutoCreateShadowUsers pulumi.BoolOutput `pulumi:"autoCreateShadowUsers"`
	// Determines that end users can choose the trust configuration for login. If not set, the trust configuration can remain active, however only application users that explicitly specify the origin key can use if for login.
	AvailableForUserLogon pulumi.BoolOutput `pulumi:"availableForUserLogon"`
	// Description of the trust configuration.
	Description pulumi.StringOutput `pulumi:"description"`
	// The tenant's domain which should be used for user logon.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// The name of the Identity Authentication tenant that you want to connect to the subaccount.
	IdentityProvider pulumi.StringOutput `pulumi:"identityProvider"`
	// Short string that helps users to identify the link for login.
	LinkText pulumi.StringOutput `pulumi:"linkText"`
	// The display name of the trust configuration.
	Name pulumi.StringOutput `pulumi:"name"`
	// The origin of the identity provider.
	Origin pulumi.StringOutput `pulumi:"origin"`
	// The protocol used to establish trust with the identity provider.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Shows whether the trust configuration can be modified.
	ReadOnly pulumi.BoolOutput `pulumi:"readOnly"`
	// Determines whether the identity provider is currently 'active' or 'inactive'.
	Status pulumi.StringOutput `pulumi:"status"`
	// The ID of the subaccount.
	SubaccountId pulumi.StringOutput `pulumi:"subaccountId"`
	// The trust type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewSubaccountTrustConfiguration registers a new resource with the given unique name, arguments, and options.
func NewSubaccountTrustConfiguration(ctx *pulumi.Context,
	name string, args *SubaccountTrustConfigurationArgs, opts ...pulumi.ResourceOption) (*SubaccountTrustConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IdentityProvider == nil {
		return nil, errors.New("invalid value for required argument 'IdentityProvider'")
	}
	if args.SubaccountId == nil {
		return nil, errors.New("invalid value for required argument 'SubaccountId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SubaccountTrustConfiguration
	err := ctx.RegisterResource("btp:index/subaccountTrustConfiguration:SubaccountTrustConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubaccountTrustConfiguration gets an existing SubaccountTrustConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubaccountTrustConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubaccountTrustConfigurationState, opts ...pulumi.ResourceOption) (*SubaccountTrustConfiguration, error) {
	var resource SubaccountTrustConfiguration
	err := ctx.ReadResource("btp:index/subaccountTrustConfiguration:SubaccountTrustConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SubaccountTrustConfiguration resources.
type subaccountTrustConfigurationState struct {
	// Determines that any user from the tenant can log in. If not set, only the ones who already have a shadow user can log in.
	AutoCreateShadowUsers *bool `pulumi:"autoCreateShadowUsers"`
	// Determines that end users can choose the trust configuration for login. If not set, the trust configuration can remain active, however only application users that explicitly specify the origin key can use if for login.
	AvailableForUserLogon *bool `pulumi:"availableForUserLogon"`
	// Description of the trust configuration.
	Description *string `pulumi:"description"`
	// The tenant's domain which should be used for user logon.
	Domain *string `pulumi:"domain"`
	// The name of the Identity Authentication tenant that you want to connect to the subaccount.
	IdentityProvider *string `pulumi:"identityProvider"`
	// Short string that helps users to identify the link for login.
	LinkText *string `pulumi:"linkText"`
	// The display name of the trust configuration.
	Name *string `pulumi:"name"`
	// The origin of the identity provider.
	Origin *string `pulumi:"origin"`
	// The protocol used to establish trust with the identity provider.
	Protocol *string `pulumi:"protocol"`
	// Shows whether the trust configuration can be modified.
	ReadOnly *bool `pulumi:"readOnly"`
	// Determines whether the identity provider is currently 'active' or 'inactive'.
	Status *string `pulumi:"status"`
	// The ID of the subaccount.
	SubaccountId *string `pulumi:"subaccountId"`
	// The trust type.
	Type *string `pulumi:"type"`
}

type SubaccountTrustConfigurationState struct {
	// Determines that any user from the tenant can log in. If not set, only the ones who already have a shadow user can log in.
	AutoCreateShadowUsers pulumi.BoolPtrInput
	// Determines that end users can choose the trust configuration for login. If not set, the trust configuration can remain active, however only application users that explicitly specify the origin key can use if for login.
	AvailableForUserLogon pulumi.BoolPtrInput
	// Description of the trust configuration.
	Description pulumi.StringPtrInput
	// The tenant's domain which should be used for user logon.
	Domain pulumi.StringPtrInput
	// The name of the Identity Authentication tenant that you want to connect to the subaccount.
	IdentityProvider pulumi.StringPtrInput
	// Short string that helps users to identify the link for login.
	LinkText pulumi.StringPtrInput
	// The display name of the trust configuration.
	Name pulumi.StringPtrInput
	// The origin of the identity provider.
	Origin pulumi.StringPtrInput
	// The protocol used to establish trust with the identity provider.
	Protocol pulumi.StringPtrInput
	// Shows whether the trust configuration can be modified.
	ReadOnly pulumi.BoolPtrInput
	// Determines whether the identity provider is currently 'active' or 'inactive'.
	Status pulumi.StringPtrInput
	// The ID of the subaccount.
	SubaccountId pulumi.StringPtrInput
	// The trust type.
	Type pulumi.StringPtrInput
}

func (SubaccountTrustConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*subaccountTrustConfigurationState)(nil)).Elem()
}

type subaccountTrustConfigurationArgs struct {
	// Determines that any user from the tenant can log in. If not set, only the ones who already have a shadow user can log in.
	AutoCreateShadowUsers *bool `pulumi:"autoCreateShadowUsers"`
	// Determines that end users can choose the trust configuration for login. If not set, the trust configuration can remain active, however only application users that explicitly specify the origin key can use if for login.
	AvailableForUserLogon *bool `pulumi:"availableForUserLogon"`
	// Description of the trust configuration.
	Description *string `pulumi:"description"`
	// The tenant's domain which should be used for user logon.
	Domain *string `pulumi:"domain"`
	// The name of the Identity Authentication tenant that you want to connect to the subaccount.
	IdentityProvider string `pulumi:"identityProvider"`
	// Short string that helps users to identify the link for login.
	LinkText *string `pulumi:"linkText"`
	// The display name of the trust configuration.
	Name *string `pulumi:"name"`
	// Determines whether the identity provider is currently 'active' or 'inactive'.
	Status *string `pulumi:"status"`
	// The ID of the subaccount.
	SubaccountId string `pulumi:"subaccountId"`
}

// The set of arguments for constructing a SubaccountTrustConfiguration resource.
type SubaccountTrustConfigurationArgs struct {
	// Determines that any user from the tenant can log in. If not set, only the ones who already have a shadow user can log in.
	AutoCreateShadowUsers pulumi.BoolPtrInput
	// Determines that end users can choose the trust configuration for login. If not set, the trust configuration can remain active, however only application users that explicitly specify the origin key can use if for login.
	AvailableForUserLogon pulumi.BoolPtrInput
	// Description of the trust configuration.
	Description pulumi.StringPtrInput
	// The tenant's domain which should be used for user logon.
	Domain pulumi.StringPtrInput
	// The name of the Identity Authentication tenant that you want to connect to the subaccount.
	IdentityProvider pulumi.StringInput
	// Short string that helps users to identify the link for login.
	LinkText pulumi.StringPtrInput
	// The display name of the trust configuration.
	Name pulumi.StringPtrInput
	// Determines whether the identity provider is currently 'active' or 'inactive'.
	Status pulumi.StringPtrInput
	// The ID of the subaccount.
	SubaccountId pulumi.StringInput
}

func (SubaccountTrustConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subaccountTrustConfigurationArgs)(nil)).Elem()
}

type SubaccountTrustConfigurationInput interface {
	pulumi.Input

	ToSubaccountTrustConfigurationOutput() SubaccountTrustConfigurationOutput
	ToSubaccountTrustConfigurationOutputWithContext(ctx context.Context) SubaccountTrustConfigurationOutput
}

func (*SubaccountTrustConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**SubaccountTrustConfiguration)(nil)).Elem()
}

func (i *SubaccountTrustConfiguration) ToSubaccountTrustConfigurationOutput() SubaccountTrustConfigurationOutput {
	return i.ToSubaccountTrustConfigurationOutputWithContext(context.Background())
}

func (i *SubaccountTrustConfiguration) ToSubaccountTrustConfigurationOutputWithContext(ctx context.Context) SubaccountTrustConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubaccountTrustConfigurationOutput)
}

func (i *SubaccountTrustConfiguration) ToOutput(ctx context.Context) pulumix.Output[*SubaccountTrustConfiguration] {
	return pulumix.Output[*SubaccountTrustConfiguration]{
		OutputState: i.ToSubaccountTrustConfigurationOutputWithContext(ctx).OutputState,
	}
}

// SubaccountTrustConfigurationArrayInput is an input type that accepts SubaccountTrustConfigurationArray and SubaccountTrustConfigurationArrayOutput values.
// You can construct a concrete instance of `SubaccountTrustConfigurationArrayInput` via:
//
//	SubaccountTrustConfigurationArray{ SubaccountTrustConfigurationArgs{...} }
type SubaccountTrustConfigurationArrayInput interface {
	pulumi.Input

	ToSubaccountTrustConfigurationArrayOutput() SubaccountTrustConfigurationArrayOutput
	ToSubaccountTrustConfigurationArrayOutputWithContext(context.Context) SubaccountTrustConfigurationArrayOutput
}

type SubaccountTrustConfigurationArray []SubaccountTrustConfigurationInput

func (SubaccountTrustConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubaccountTrustConfiguration)(nil)).Elem()
}

func (i SubaccountTrustConfigurationArray) ToSubaccountTrustConfigurationArrayOutput() SubaccountTrustConfigurationArrayOutput {
	return i.ToSubaccountTrustConfigurationArrayOutputWithContext(context.Background())
}

func (i SubaccountTrustConfigurationArray) ToSubaccountTrustConfigurationArrayOutputWithContext(ctx context.Context) SubaccountTrustConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubaccountTrustConfigurationArrayOutput)
}

func (i SubaccountTrustConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]*SubaccountTrustConfiguration] {
	return pulumix.Output[[]*SubaccountTrustConfiguration]{
		OutputState: i.ToSubaccountTrustConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

// SubaccountTrustConfigurationMapInput is an input type that accepts SubaccountTrustConfigurationMap and SubaccountTrustConfigurationMapOutput values.
// You can construct a concrete instance of `SubaccountTrustConfigurationMapInput` via:
//
//	SubaccountTrustConfigurationMap{ "key": SubaccountTrustConfigurationArgs{...} }
type SubaccountTrustConfigurationMapInput interface {
	pulumi.Input

	ToSubaccountTrustConfigurationMapOutput() SubaccountTrustConfigurationMapOutput
	ToSubaccountTrustConfigurationMapOutputWithContext(context.Context) SubaccountTrustConfigurationMapOutput
}

type SubaccountTrustConfigurationMap map[string]SubaccountTrustConfigurationInput

func (SubaccountTrustConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubaccountTrustConfiguration)(nil)).Elem()
}

func (i SubaccountTrustConfigurationMap) ToSubaccountTrustConfigurationMapOutput() SubaccountTrustConfigurationMapOutput {
	return i.ToSubaccountTrustConfigurationMapOutputWithContext(context.Background())
}

func (i SubaccountTrustConfigurationMap) ToSubaccountTrustConfigurationMapOutputWithContext(ctx context.Context) SubaccountTrustConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubaccountTrustConfigurationMapOutput)
}

func (i SubaccountTrustConfigurationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SubaccountTrustConfiguration] {
	return pulumix.Output[map[string]*SubaccountTrustConfiguration]{
		OutputState: i.ToSubaccountTrustConfigurationMapOutputWithContext(ctx).OutputState,
	}
}

type SubaccountTrustConfigurationOutput struct{ *pulumi.OutputState }

func (SubaccountTrustConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubaccountTrustConfiguration)(nil)).Elem()
}

func (o SubaccountTrustConfigurationOutput) ToSubaccountTrustConfigurationOutput() SubaccountTrustConfigurationOutput {
	return o
}

func (o SubaccountTrustConfigurationOutput) ToSubaccountTrustConfigurationOutputWithContext(ctx context.Context) SubaccountTrustConfigurationOutput {
	return o
}

func (o SubaccountTrustConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[*SubaccountTrustConfiguration] {
	return pulumix.Output[*SubaccountTrustConfiguration]{
		OutputState: o.OutputState,
	}
}

// Determines that any user from the tenant can log in. If not set, only the ones who already have a shadow user can log in.
func (o SubaccountTrustConfigurationOutput) AutoCreateShadowUsers() pulumi.BoolOutput {
	return o.ApplyT(func(v *SubaccountTrustConfiguration) pulumi.BoolOutput { return v.AutoCreateShadowUsers }).(pulumi.BoolOutput)
}

// Determines that end users can choose the trust configuration for login. If not set, the trust configuration can remain active, however only application users that explicitly specify the origin key can use if for login.
func (o SubaccountTrustConfigurationOutput) AvailableForUserLogon() pulumi.BoolOutput {
	return o.ApplyT(func(v *SubaccountTrustConfiguration) pulumi.BoolOutput { return v.AvailableForUserLogon }).(pulumi.BoolOutput)
}

// Description of the trust configuration.
func (o SubaccountTrustConfigurationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountTrustConfiguration) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The tenant's domain which should be used for user logon.
func (o SubaccountTrustConfigurationOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountTrustConfiguration) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// The name of the Identity Authentication tenant that you want to connect to the subaccount.
func (o SubaccountTrustConfigurationOutput) IdentityProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountTrustConfiguration) pulumi.StringOutput { return v.IdentityProvider }).(pulumi.StringOutput)
}

// Short string that helps users to identify the link for login.
func (o SubaccountTrustConfigurationOutput) LinkText() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountTrustConfiguration) pulumi.StringOutput { return v.LinkText }).(pulumi.StringOutput)
}

// The display name of the trust configuration.
func (o SubaccountTrustConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountTrustConfiguration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The origin of the identity provider.
func (o SubaccountTrustConfigurationOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountTrustConfiguration) pulumi.StringOutput { return v.Origin }).(pulumi.StringOutput)
}

// The protocol used to establish trust with the identity provider.
func (o SubaccountTrustConfigurationOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountTrustConfiguration) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Shows whether the trust configuration can be modified.
func (o SubaccountTrustConfigurationOutput) ReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *SubaccountTrustConfiguration) pulumi.BoolOutput { return v.ReadOnly }).(pulumi.BoolOutput)
}

// Determines whether the identity provider is currently 'active' or 'inactive'.
func (o SubaccountTrustConfigurationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountTrustConfiguration) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The ID of the subaccount.
func (o SubaccountTrustConfigurationOutput) SubaccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountTrustConfiguration) pulumi.StringOutput { return v.SubaccountId }).(pulumi.StringOutput)
}

// The trust type.
func (o SubaccountTrustConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SubaccountTrustConfiguration) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type SubaccountTrustConfigurationArrayOutput struct{ *pulumi.OutputState }

func (SubaccountTrustConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SubaccountTrustConfiguration)(nil)).Elem()
}

func (o SubaccountTrustConfigurationArrayOutput) ToSubaccountTrustConfigurationArrayOutput() SubaccountTrustConfigurationArrayOutput {
	return o
}

func (o SubaccountTrustConfigurationArrayOutput) ToSubaccountTrustConfigurationArrayOutputWithContext(ctx context.Context) SubaccountTrustConfigurationArrayOutput {
	return o
}

func (o SubaccountTrustConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SubaccountTrustConfiguration] {
	return pulumix.Output[[]*SubaccountTrustConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o SubaccountTrustConfigurationArrayOutput) Index(i pulumi.IntInput) SubaccountTrustConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SubaccountTrustConfiguration {
		return vs[0].([]*SubaccountTrustConfiguration)[vs[1].(int)]
	}).(SubaccountTrustConfigurationOutput)
}

type SubaccountTrustConfigurationMapOutput struct{ *pulumi.OutputState }

func (SubaccountTrustConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SubaccountTrustConfiguration)(nil)).Elem()
}

func (o SubaccountTrustConfigurationMapOutput) ToSubaccountTrustConfigurationMapOutput() SubaccountTrustConfigurationMapOutput {
	return o
}

func (o SubaccountTrustConfigurationMapOutput) ToSubaccountTrustConfigurationMapOutputWithContext(ctx context.Context) SubaccountTrustConfigurationMapOutput {
	return o
}

func (o SubaccountTrustConfigurationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SubaccountTrustConfiguration] {
	return pulumix.Output[map[string]*SubaccountTrustConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o SubaccountTrustConfigurationMapOutput) MapIndex(k pulumi.StringInput) SubaccountTrustConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SubaccountTrustConfiguration {
		return vs[0].(map[string]*SubaccountTrustConfiguration)[vs[1].(string)]
	}).(SubaccountTrustConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubaccountTrustConfigurationInput)(nil)).Elem(), &SubaccountTrustConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubaccountTrustConfigurationArrayInput)(nil)).Elem(), SubaccountTrustConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubaccountTrustConfigurationMapInput)(nil)).Elem(), SubaccountTrustConfigurationMap{})
	pulumi.RegisterOutputType(SubaccountTrustConfigurationOutput{})
	pulumi.RegisterOutputType(SubaccountTrustConfigurationArrayOutput{})
	pulumi.RegisterOutputType(SubaccountTrustConfigurationMapOutput{})
}
