// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates a subaccount in a global account or directory.
 *
 * __Tip:__
 * You must be assigned to the global account or directory admin role.
 *
 * __Further documentation:__
 * <https://help.sap.com/docs/btp/sap-business-technology-platform/account-model>
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as btp from "@lechnerc77/pulumi-btp";
 * import * as btp from "@pulumi/btp";
 *
 * export = async () => {
 *     // create a subaccount in eu30 region (GCP)
 *     const myProject = new btp.Subaccount("myProject", {
 *         subdomain: "my-project",
 *         region: "eu30",
 *     });
 *     // create a subaccount in every Azure region which has support for cloud foundry
 *     const all = await btp.getRegions({});
 *     // create the subaccounts by iterating over the regions with the defined constraints
 *     const myProjectOnAzure: btp.Subaccount[] = [];
 *     for (const range of Object.entries(.filter(dc => dc.environment == "cloudfoundry" && dc.iaasProvider == "AZURE").reduce((__obj, dc) => ({ ...__obj, [dc.region]: dc }))).map(([k, v]) => ({key: k, value: v}))) {
 *         myProjectOnAzure.push(new btp.Subaccount(`myProjectOnAzure-${range.key}`, {
 *             subdomain: `my-project-${range.key}`,
 *             region: range.key,
 *         }));
 *     }
 * }
 * ```
 *
 * ## Import
 *
 * terraform
 *
 * ```sh
 *  $ pulumi import btp:index/subaccount:Subaccount <resource_name> <subaccount_id>
 * ```
 *
 * ```sh
 *  $ pulumi import btp:index/subaccount:Subaccount my_project 6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f
 * ```
 */
export class Subaccount extends pulumi.CustomResource {
    /**
     * Get an existing Subaccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubaccountState, opts?: pulumi.CustomResourceOptions): Subaccount {
        return new Subaccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'btp:index/subaccount:Subaccount';

    /**
     * Returns true if the given object is an instance of Subaccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subaccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subaccount.__pulumiType;
    }

    /**
     * Shows whether the subaccount can use beta services and applications.
     */
    public readonly betaEnabled!: pulumi.Output<boolean>;
    /**
     * The details of the user that created the subaccount.
     */
    public /*out*/ readonly createdBy!: pulumi.Output<string>;
    /**
     * The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    public /*out*/ readonly createdDate!: pulumi.Output<string>;
    /**
     * A description of the subaccount for customer-facing UIs.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The set of words or phrases assigned to the subaccount.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string[]} | undefined>;
    /**
     * The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    public /*out*/ readonly lastModified!: pulumi.Output<string>;
    /**
     * A descriptive name of the subaccount for customer-facing UIs.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The features of parent entity of the subaccount.
     */
    public /*out*/ readonly parentFeatures!: pulumi.Output<string[]>;
    /**
     * The ID of the subaccountâ€™s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
     */
    public readonly parentId!: pulumi.Output<string>;
    /**
     * The region in which the subaccount was created.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The current state of the subaccount. Possible values are: | state | description | | --- | --- | | `OK` | The CRUD
     * operation or series of operations completed successfully. | | `STARTED` | CRUD operation on the subaccount has started.
     * | | `CANCELED` | The operation or processing was canceled by the operator. | | `PROCESSING` | A series of operations
     * related to the subaccount are in progress. | | `PROCESSING_FAILED` | The processing operations failed. | | `CREATING` |
     * Creating the subaccount is in progress. | | `CREATION_FAILED` | The creation operation failed, and the subaccount was
     * not created or was created but cannot be used. | | `UPDATING` | Updating the subaccount is in progress. | |
     * `UPDATE_FAILED` | The update operation failed, and the subaccount was not updated. | | `UPDATE_DIRECTORY_TYPE_FAILED` |
     * The update of the directory type failed. | | `UPDATE_ACCOUNT_TYPE_FAILED` | The update of the account type failed. | |
     * `DELETING` | Deleting the subaccount is in progress. | | `DELETION_FAILED` | The deletion of the subaccount failed, and
     * the subaccount was not deleted. | | `MOVING` | Moving the subaccount is in progress. | | `MOVE_FAILED` | The moving of
     * the subaccount failed. | | `MOVING_TO_OTHER_GA` | Moving the subaccount to another global account is in progress. | |
     * `MOVE_TO_OTHER_GA_FAILED` | Moving the subaccount to another global account failed. | | `PENDING_REVIEW` | The
     * processing operation has been stopped for reviewing and can be restarted by the operator. | | `MIGRATING` | Migrating
     * the subaccount from Neo to Cloud Foundry. | | `MIGRATED` | The migration of the subaccount completed. | |
     * `MIGRATION_FAILED` | The migration of the subaccount failed and the subaccount was not migrated. | |
     * `ROLLBACK_MIGRATION_PROCESSING` | The migration of the subaccount was rolled back and the subaccount is not migrated. |
     * | `SUSPENSION_FAILED` | The suspension operations failed. |
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The subdomain that becomes part of the path used to access the authorization tenant of the subaccount. Must be unique within the defined region and cannot be changed after the subaccount has been created.
     */
    public readonly subdomain!: pulumi.Output<string>;
    /**
     * Shows whether the subaccount is used for production purposes. This flag can help your cloud operator to take appropriate action when handling incidents that are related to mission-critical accounts in production systems. Do not apply for subaccounts that are used for nonproduction purposes, such as development, testing, and demos. Applying this setting this does not modify the subaccount. Possible values are:
     */
    public readonly usage!: pulumi.Output<string>;

    /**
     * Create a Subaccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubaccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubaccountArgs | SubaccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubaccountState | undefined;
            resourceInputs["betaEnabled"] = state ? state.betaEnabled : undefined;
            resourceInputs["createdBy"] = state ? state.createdBy : undefined;
            resourceInputs["createdDate"] = state ? state.createdDate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["lastModified"] = state ? state.lastModified : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parentFeatures"] = state ? state.parentFeatures : undefined;
            resourceInputs["parentId"] = state ? state.parentId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subdomain"] = state ? state.subdomain : undefined;
            resourceInputs["usage"] = state ? state.usage : undefined;
        } else {
            const args = argsOrState as SubaccountArgs | undefined;
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.subdomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subdomain'");
            }
            resourceInputs["betaEnabled"] = args ? args.betaEnabled : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentId"] = args ? args.parentId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["subdomain"] = args ? args.subdomain : undefined;
            resourceInputs["usage"] = args ? args.usage : undefined;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["lastModified"] = undefined /*out*/;
            resourceInputs["parentFeatures"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Subaccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Subaccount resources.
 */
export interface SubaccountState {
    /**
     * Shows whether the subaccount can use beta services and applications.
     */
    betaEnabled?: pulumi.Input<boolean>;
    /**
     * The details of the user that created the subaccount.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    createdDate?: pulumi.Input<string>;
    /**
     * A description of the subaccount for customer-facing UIs.
     */
    description?: pulumi.Input<string>;
    /**
     * The set of words or phrases assigned to the subaccount.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
    /**
     * The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    lastModified?: pulumi.Input<string>;
    /**
     * A descriptive name of the subaccount for customer-facing UIs.
     */
    name?: pulumi.Input<string>;
    /**
     * The features of parent entity of the subaccount.
     */
    parentFeatures?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the subaccountâ€™s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
     */
    parentId?: pulumi.Input<string>;
    /**
     * The region in which the subaccount was created.
     */
    region?: pulumi.Input<string>;
    /**
     * The current state of the subaccount. Possible values are: | state | description | | --- | --- | | `OK` | The CRUD
     * operation or series of operations completed successfully. | | `STARTED` | CRUD operation on the subaccount has started.
     * | | `CANCELED` | The operation or processing was canceled by the operator. | | `PROCESSING` | A series of operations
     * related to the subaccount are in progress. | | `PROCESSING_FAILED` | The processing operations failed. | | `CREATING` |
     * Creating the subaccount is in progress. | | `CREATION_FAILED` | The creation operation failed, and the subaccount was
     * not created or was created but cannot be used. | | `UPDATING` | Updating the subaccount is in progress. | |
     * `UPDATE_FAILED` | The update operation failed, and the subaccount was not updated. | | `UPDATE_DIRECTORY_TYPE_FAILED` |
     * The update of the directory type failed. | | `UPDATE_ACCOUNT_TYPE_FAILED` | The update of the account type failed. | |
     * `DELETING` | Deleting the subaccount is in progress. | | `DELETION_FAILED` | The deletion of the subaccount failed, and
     * the subaccount was not deleted. | | `MOVING` | Moving the subaccount is in progress. | | `MOVE_FAILED` | The moving of
     * the subaccount failed. | | `MOVING_TO_OTHER_GA` | Moving the subaccount to another global account is in progress. | |
     * `MOVE_TO_OTHER_GA_FAILED` | Moving the subaccount to another global account failed. | | `PENDING_REVIEW` | The
     * processing operation has been stopped for reviewing and can be restarted by the operator. | | `MIGRATING` | Migrating
     * the subaccount from Neo to Cloud Foundry. | | `MIGRATED` | The migration of the subaccount completed. | |
     * `MIGRATION_FAILED` | The migration of the subaccount failed and the subaccount was not migrated. | |
     * `ROLLBACK_MIGRATION_PROCESSING` | The migration of the subaccount was rolled back and the subaccount is not migrated. |
     * | `SUSPENSION_FAILED` | The suspension operations failed. |
     */
    state?: pulumi.Input<string>;
    /**
     * The subdomain that becomes part of the path used to access the authorization tenant of the subaccount. Must be unique within the defined region and cannot be changed after the subaccount has been created.
     */
    subdomain?: pulumi.Input<string>;
    /**
     * Shows whether the subaccount is used for production purposes. This flag can help your cloud operator to take appropriate action when handling incidents that are related to mission-critical accounts in production systems. Do not apply for subaccounts that are used for nonproduction purposes, such as development, testing, and demos. Applying this setting this does not modify the subaccount. Possible values are:
     */
    usage?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Subaccount resource.
 */
export interface SubaccountArgs {
    /**
     * Shows whether the subaccount can use beta services and applications.
     */
    betaEnabled?: pulumi.Input<boolean>;
    /**
     * A description of the subaccount for customer-facing UIs.
     */
    description?: pulumi.Input<string>;
    /**
     * The set of words or phrases assigned to the subaccount.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
    /**
     * A descriptive name of the subaccount for customer-facing UIs.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the subaccountâ€™s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
     */
    parentId?: pulumi.Input<string>;
    /**
     * The region in which the subaccount was created.
     */
    region: pulumi.Input<string>;
    /**
     * The subdomain that becomes part of the path used to access the authorization tenant of the subaccount. Must be unique within the defined region and cannot be changed after the subaccount has been created.
     */
    subdomain: pulumi.Input<string>;
    /**
     * Shows whether the subaccount is used for production purposes. This flag can help your cloud operator to take appropriate action when handling incidents that are related to mission-critical accounts in production systems. Do not apply for subaccounts that are used for nonproduction purposes, such as development, testing, and demos. Applying this setting this does not modify the subaccount. Possible values are:
     */
    usage?: pulumi.Input<string>;
}
