// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DirectoryRoleCollectionRole {
    /**
     * The name of the referenced role.
     */
    name: string;
    /**
     * The name of the referenced template app id.
     */
    roleTemplateAppId: string;
    /**
     * The name of the referenced role template.
     */
    roleTemplateName: string;
}

export interface GetDirectoriesValue {
    /**
     * The details of the user that created the directory.
     */
    createdBy: string;
    /**
     * The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    createdDate: string;
    /**
     * The description of the directory.
     */
    description: string;
    /**
     * The features that are enabled for the directory. Possible values are:
     */
    features: string[];
    /**
     * The ID of the directory.
     */
    id: string;
    labels: {[key: string]: string[]};
    lastModified: string;
    name: string;
    parentId: string;
    state: string;
    subdomain: string;
}

export interface GetDirectoryEntitlementsValues {
    /**
     * The current state of the entitlement. Possible values are:
     */
    category: string;
    planDescription: string;
    planDisplayName: string;
    planName: string;
    quotaAssigned: number;
    quotaRemaining: number;
    serviceDisplayName: string;
    serviceName: string;
}

export interface GetDirectoryRoleCollectionRole {
    /**
     * The description of the referenced role
     */
    description: string;
    /**
     * The name of the referenced role.
     */
    name: string;
    /**
     * The name of the referenced template app id
     */
    roleTemplateAppId: string;
    /**
     * The name of the referenced role template.
     */
    roleTemplateName: string;
}

export interface GetDirectoryRoleCollectionsValue {
    /**
     * The description of the role collection.
     */
    description: string;
    /**
     * The name of the role collection.
     */
    name: string;
    /**
     * Shows whether the role collection is read-only.
     */
    readOnly: boolean;
    roles: outputs.GetDirectoryRoleCollectionsValueRole[];
}

export interface GetDirectoryRoleCollectionsValueRole {
    description: string;
    name: string;
    roleTemplateAppId: string;
    roleTemplateName: string;
}

export interface GetDirectoryRoleScope {
    customGrantAsAuthorityToApps: string[];
    customGrantedApps: string[];
    /**
     * The description of the scope.
     */
    description: string;
    grantAsAuthorityToApps: string[];
    grantedApps: string[];
    /**
     * The name of the scope.
     */
    name: string;
}

export interface GetDirectoryRolesValue {
    /**
     * The id of the application that provides the role template and the role.
     */
    appId: string;
    /**
     * The name of the application that provides the role template and the role.
     */
    appName: string;
    /**
     * The description of the role.
     */
    description: string;
    /**
     * The name of the role.
     */
    name: string;
    /**
     * Shows whether the role can be modified or not.
     */
    readOnly: boolean;
    /**
     * The name of the role template.
     */
    roleTemplateName: string;
    /**
     * The scopes available with this role.
     */
    scopes: outputs.GetDirectoryRolesValueScope[];
}

export interface GetDirectoryRolesValueScope {
    customGrantAsAuthorityToApps: string[];
    customGrantedApps: string[];
    description: string;
    grantAsAuthorityToApps: string[];
    grantedApps: string[];
    name: string;
}

export interface GetGlobalaccountEntitlementsValues {
    /**
     * The current state of the entitlement. Possible values are:
     */
    category: string;
    planDescription: string;
    planDisplayName: string;
    planName: string;
    quotaAssigned: number;
    quotaRemaining: number;
    serviceDisplayName: string;
    serviceName: string;
}

export interface GetGlobalaccountRoleCollectionRole {
    /**
     * The description of the referenced role
     */
    description: string;
    /**
     * The name of the referenced role.
     */
    name: string;
    /**
     * The name of the referenced template app id
     */
    roleTemplateAppId: string;
    /**
     * The name of the referenced role template.
     */
    roleTemplateName: string;
}

export interface GetGlobalaccountRoleCollectionsValue {
    /**
     * The description of the role collection.
     */
    description: string;
    /**
     * The name of the role collection.
     */
    name: string;
    /**
     * Shows whether the role collection is read-only.
     */
    readOnly: boolean;
    roles: outputs.GetGlobalaccountRoleCollectionsValueRole[];
}

export interface GetGlobalaccountRoleCollectionsValueRole {
    description: string;
    name: string;
    roleTemplateAppId: string;
    roleTemplateName: string;
}

export interface GetGlobalaccountRoleScope {
    customGrantAsAuthorityToApps: string[];
    customGrantedApps: string[];
    /**
     * The description of the scope.
     */
    description: string;
    grantAsAuthorityToApps: string[];
    grantedApps: string[];
    /**
     * The name of the scope.
     */
    name: string;
}

export interface GetGlobalaccountRolesValue {
    /**
     * The id of the application that provides the role template and the role.
     */
    appId: string;
    /**
     * The name of the application that provides the role template and the role.
     */
    appName: string;
    /**
     * The description of the role.
     */
    description: string;
    /**
     * The name of the role.
     */
    name: string;
    /**
     * Shows whether the role can be modified or not.
     */
    readOnly: boolean;
    /**
     * The name of the role template.
     */
    roleTemplateName: string;
    /**
     * The scopes available with this role.
     */
    scopes: outputs.GetGlobalaccountRolesValueScope[];
}

export interface GetGlobalaccountRolesValueScope {
    customGrantAsAuthorityToApps: string[];
    customGrantedApps: string[];
    description: string;
    grantAsAuthorityToApps: string[];
    grantedApps: string[];
    name: string;
}

export interface GetGlobalaccountTrustConfigurationsValue {
    /**
     * The description of the trust configuration.
     */
    description: string;
    /**
     * The tenant's domain which should be used for user logon.
     */
    domain: string;
    /**
     * The origin of the identity provider.
     *
     * @deprecated Use the `origin` attribute instead
     */
    id: string;
    /**
     * The name of the Identity Authentication tenant the global account is connected to.
     */
    identityProvider: string;
    /**
     * The display name of the trust configuration.
     */
    name: string;
    /**
     * The origin of the identity provider.
     */
    origin: string;
    /**
     * The protocol used to establish trust with the identity provider.
     */
    protocol: string;
    /**
     * Shows whether the trust configuration can be modified.
     */
    readOnly: boolean;
    /**
     * Shows whether the identity provider is currently 'active' or 'inactive'.
     */
    status: string;
    /**
     * The trust type.
     */
    type: string;
}

export interface GetRegionsValue {
    /**
     * The domain of the data center
     */
    domain: string;
    /**
     * The environment that the data center supports. For example: Kubernetes, Cloud Foundry.
     */
    environment: string;
    /**
     * The infrastructure provider for the data center. Possible values are:
     */
    iaasProvider: string;
    /**
     * The ID of the global account.
     */
    id: string;
    name: string;
    provisioningServiceUrl: string;
    region: string;
    saasRegistryServiceUrl: string;
    supportsTrial: boolean;
}

export interface GetSubaccountAppOauth2Configuration {
    allowedproviders: string[];
    autoapprove: boolean;
    grantTypes: string[];
    redirectUris: string[];
    refreshTokenValidity: number;
    systemAttributes: string[];
    tokenValidity: number;
}

export interface GetSubaccountAppsValue {
    authorities: string[];
    /**
     * The description of the app.
     */
    description: string;
    foreignScopeReferences: string[];
    /**
     * The application ID is the xsappname plus the identifier, which consists of an exclamation mark (!), an identifier for the plan under which the application is deployed, and an index number.
     */
    id: string;
    masterAppId: string;
    oauth2Configuration: outputs.GetSubaccountAppsValueOauth2Configuration;
    orgId: string;
    planId: string;
    planName: string;
    serviceinstanceId: string;
    spaceId: string;
    tenantMode: string;
    username: string;
    xsappname: string;
}

export interface GetSubaccountAppsValueOauth2Configuration {
    allowedproviders: string[];
    autoapprove: boolean;
    grantTypes: string[];
    redirectUris: string[];
    refreshTokenValidity: number;
    systemAttributes: string[];
    tokenValidity: number;
}

export interface GetSubaccountEntitlementsValues {
    /**
     * The current state of the entitlement. Possible values are:
     */
    category: string;
    planDescription: string;
    planDisplayName: string;
    planName: string;
    quotaAssigned: number;
    quotaRemaining: number;
    serviceDisplayName: string;
    serviceName: string;
}

export interface GetSubaccountEnvironmentInstancesValue {
    /**
     * The ID of the associated environment broker.
     */
    brokerId: string;
    /**
     * The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    createdDate: string;
    customLabels: {[key: string]: string[]};
    /**
     * The URL of the service dashboard, which is a web-based management user interface for the service instances.
     */
    dashboardUrl: string;
    /**
     * The description of the environment instance.
     */
    description: string;
    /**
     * The type of the environment instance that is used.
     */
    environmentType: string;
    /**
     * The ID of the environment instance.
     */
    id: string;
    /**
     * The Broker-specified key-value pairs that specify attributes of an environment instance.
     */
    labels: string;
    /**
     * The name of the landscape within the logged-in region on which the environment instance is created.
     */
    landscapeLabel: string;
    /**
     * The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    lastModified: string;
    /**
     * The name of the environment instance.
     */
    name: string;
    /**
     * An identifier that represents the last operation. This ID is returned by the environment brokers.
     */
    operation: string;
    /**
     * The configuration parameters for the environment instance.
     */
    parameters: string;
    /**
     * The ID of the service plan for the environment instance in the corresponding service broker's catalog.
     */
    planId: string;
    /**
     * The name of the service plan for the environment instance in the corresponding service broker's catalog.
     */
    planName: string;
    /**
     * The ID of the platform for the environment instance in the corresponding service broker's catalog.
     */
    platformId: string;
    /**
     * The ID of the service for the environment instance in the corresponding service broker's catalog.
     */
    serviceId: string;
    /**
     * The name of the service for the environment instance in the corresponding service broker's catalog.
     */
    serviceName: string;
    /**
     * The current state of the environment instance. Possible values are:
     */
    state: string;
    tenantId: string;
    type: string;
}

export interface GetSubaccountEnvironmentsValue {
    /**
     * The availability level of the environment broker.
     */
    availabilityLevel: string;
    /**
     * The description of the environment.
     */
    description: string;
    /**
     * The type of environment that is available (for example: cloudfoundry).
     */
    environmentType: string;
    /**
     * The landscape label of the environment broker.
     */
    landscapeLabel: string;
    /**
     * The name of the service plan for the available environment.
     */
    planName: string;
    /**
     * Specifies if the consumer can change the plan of an existing instance of the environment.
     */
    planUpdateable: boolean;
    /**
     * The create schema of the environment broker.
     */
    schemaCreate: string;
    /**
     * The update schema of the environment broker.
     */
    schemaUpdate: string;
    /**
     * The short description of the service.
     */
    serviceDescription: string;
    /**
     * The display name of the service.
     */
    serviceDisplayName: string;
    /**
     * The name of the service offered in the catalog of the corresponding environment broker (for example: cloudfoundry).
     */
    serviceName: string;
    /**
     * The technical key of the corresponding environment broker.
     */
    technicalKey: string;
}

export interface GetSubaccountRoleCollectionRole {
    /**
     * The description of the referenced role
     */
    description: string;
    /**
     * The name of the referenced role.
     */
    name: string;
    /**
     * The name of the referenced template app id
     */
    roleTemplateAppId: string;
    /**
     * The name of the referenced role template.
     */
    roleTemplateName: string;
}

export interface GetSubaccountRoleCollectionsValue {
    /**
     * The description of the role collection.
     */
    description: string;
    /**
     * The name of the role collection.
     */
    name: string;
    /**
     * Shows whether the role collection is read-only.
     */
    readOnly: boolean;
    roles: outputs.GetSubaccountRoleCollectionsValueRole[];
}

export interface GetSubaccountRoleCollectionsValueRole {
    description: string;
    name: string;
    roleTemplateAppId: string;
    roleTemplateName: string;
}

export interface GetSubaccountRoleScope {
    customGrantAsAuthorityToApps: string[];
    customGrantedApps: string[];
    /**
     * The description of the scope.
     */
    description: string;
    grantAsAuthorityToApps: string[];
    grantedApps: string[];
    /**
     * The name of the scope.
     */
    name: string;
}

export interface GetSubaccountRolesValue {
    /**
     * The id of the application that provides the role template and the role.
     */
    appId: string;
    /**
     * The name of the application that provides the role template and the role.
     */
    appName: string;
    /**
     * The description of the role.
     */
    description: string;
    /**
     * The name of the role.
     */
    name: string;
    /**
     * Shows whether the role can be modified or not.
     */
    readOnly: boolean;
    /**
     * The name of the role template.
     */
    roleTemplateName: string;
    /**
     * The scopes available with this role.
     */
    scopes: outputs.GetSubaccountRolesValueScope[];
}

export interface GetSubaccountRolesValueScope {
    customGrantAsAuthorityToApps: string[];
    customGrantedApps: string[];
    description: string;
    grantAsAuthorityToApps: string[];
    grantedApps: string[];
    name: string;
}

export interface GetSubaccountServiceBindingsValue {
    /**
     * Contains the resources associated with the binding.
     */
    bindResource: {[key: string]: string};
    /**
     * Contextual data for the resource.
     */
    context: string;
    /**
     * The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    createdDate: string;
    /**
     * The credentials to access the binding.
     */
    credentials: string;
    /**
     * The ID of the service binding.
     */
    id: string;
    /**
     * The set of words or phrases assigned to the binding.
     */
    labels: {[key: string]: string[]};
    /**
     * The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    lastModified: string;
    /**
     * The name of the service binding.
     */
    name: string;
    /**
     * Shows whether the service binding is ready.
     */
    ready: boolean;
    /**
     * The ID of the service instance associated with the binding.
     */
    serviceInstanceId: string;
}

export interface GetSubaccountServiceInstancesValue {
    /**
     * Contextual data for the resource.
     */
    context: string;
    /**
     * The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    createdDate: string;
    /**
     * The ID of the service instance.
     */
    id: string;
    /**
     * The set of words or phrases assigned to the service instance.
     */
    labels: {[key: string]: string[]};
    /**
     * The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    lastModified: string;
    /**
     * The name of the service instance.
     */
    name: string;
    /**
     * The platform ID.
     */
    platformId: string;
    ready: boolean;
    /**
     * The ID of the service plan.
     */
    serviceplanId: string;
    /**
     * Shows whether the resource can be used.
     */
    usable: boolean;
}

export interface GetSubaccountServiceOfferingsValue {
    /**
     * Shows whether the context for the service offering can be updated.
     */
    allowContextUpdates: boolean;
    /**
     * Shows whether the service offering is bindable.
     */
    bindable: boolean;
    /**
     * Shows whether the bindings associated with the service offering can be retrieved.
     */
    bindingsRetrievable: boolean;
    /**
     * The ID of the broker that provides the service plan.
     */
    brokerId: string;
    /**
     * The ID of the service offering as provided by the catalog.
     */
    catalogId: string;
    /**
     * The catalog name of the service offering.
     */
    catalogName: string;
    /**
     * The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    createdDate: string;
    /**
     * The description of the service offering.
     */
    description: string;
    /**
     * The ID of the service offering.
     */
    id: string;
    /**
     * Shows whether the service instances associated with the service offering can be retrieved.
     */
    instancesRetrievable: boolean;
    /**
     * The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    lastModified: string;
    /**
     * The name of the service offering.
     */
    name: string;
    /**
     * Shows whether the offered plan can be updated.
     */
    planUpdateable: boolean;
    /**
     * Shows whether the service offering is ready to be advertised.
     */
    ready: boolean;
    /**
     * The list of tags for the service offering.
     */
    tags: string[];
}

export interface GetSubaccountServicePlansValue {
    /**
     * Shows whether the service plan is bindable.
     */
    bindable: boolean;
    /**
     * The ID of the service plan in the service broker catalog.
     */
    catalogId: string;
    /**
     * The name of the associated service broker catalog.
     */
    catalogName: string;
    /**
     * The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    createdDate: string;
    /**
     * The description of the service plan.
     */
    description: string;
    /**
     * Shows whether the service plan is free.
     */
    free: boolean;
    /**
     * The ID of the service plan.
     */
    id: string;
    /**
     * The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    lastModified: string;
    /**
     * The name of the service plan.
     */
    name: string;
    /**
     * Shows whether the service plan is ready.
     */
    ready: boolean;
    /**
     * The ID of the service offering.
     */
    serviceofferingId: string;
}

export interface GetSubaccountSubscriptionsValue {
    /**
     * The list of features specific to this plan.
     */
    additionalPlanFeatures: string[];
    /**
     * The ID returned by XSUAA after the app provider has performed a bind of the multitenant application to a XSUAA service instance.
     */
    appId: string;
    /**
     * The unique registration name of the deployed multitenant application as defined by the app developer.
     */
    appName: string;
    /**
     * The authentication provider of the multitenant application. * XSUAA is the SAP Authorization and Trust Management service that defines scopes and permissions for users as tenants at the global account level. * IAS is Identity Authentication Service that defines scopes and permissions for users in zones (common data isolation systems across systems, SaaS tenants, and services).
     */
    authenticationProvider: string;
    /**
     * The state of the automation solution.
     */
    automationState: string;
    /**
     * The message that describes the automation solution state.
     */
    automationStateMessage: string;
    /**
     * The technical name of the category defined by the app developer to which the multitenant application is grouped in customer-facing UIs.
     */
    category: string;
    /**
     * The display name of the category for customer-facing UIs.
     */
    categoryDisplayName: string;
    /**
     * The commercial name of the deployed multitenant application as defined by the app developer.
     */
    commercialAppName: string;
    /**
     * The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    createdDate: string;
    /**
     * Shows whether the application was developed by a customer. If not, then the application is developed by the cloud operator, such as SAP.
     */
    customerDeveloped: boolean;
    /**
     * The description of the multitenant application.
     */
    description: string;
    /**
     * The display name of the application for customer-facing UIs.
     */
    displayName: string;
    /**
     * The name of the formations solution associated with the multitenant application.
     */
    formationSolutionName: string;
    /**
     * The ID of the associated global account.
     */
    globalaccountId: string;
    /**
     * The technical ID generated by XSUAA for a multitenant application when a consumer subscribes to the application.
     */
    id: string;
    /**
     * The application's incident-tracking component provided in metadata for customer-facing UIs.
     */
    incidentTrackingComponent: string;
    /**
     * The set of words or phrases assigned to the multitenant application subscription.
     */
    labels: {[key: string]: string[]};
    /**
     * The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    lastModified: string;
    /**
     * The description of the plan for customer-facing UIs.
     */
    planDescription: string;
    /**
     * The plan name of the application to which the consumer has subscribed.
     */
    planName: string;
    /**
     * The ID of the landscape-specific environment.
     */
    platformEntityId: string;
    /**
     * The total amount the subscribed subaccount is entitled to consume.
     */
    quota: number;
    /**
     * The short description of the multitenant application for customer-facing UIs.
     */
    shortDescription: string;
    /**
     * The subscription state of the subaccount regarding the multitenant application.
     */
    state: string;
    /**
     * The ID of the subaccount which is subscribed to the multitenant application.
     */
    subscribedSubaccountId: string;
    /**
     * The ID of the tenant which is subscribed to a multitenant application.
     */
    subscribedTenantId: string;
    /**
     * The URL for app users to launch the subscribed application.
     */
    subscriptionUrl: string;
    /**
     * Specifies whether a consumer, whose subaccount is subscribed to the application, can change its subscriptions parameters.
     */
    supportsParametersUpdates: boolean;
    /**
     * Specifies whether a consumer, whose subaccount is subscribed to the application, can change the subscription to a different plan that is available for this application and subaccount.
     */
    supportsPlanUpdates: boolean;
    /**
     * The tenant ID of the application provider.
     */
    tenantId: string;
}

export interface GetSubaccountTrustConfigurationsValue {
    /**
     * Shows whether any user from the tenant can log in. If not set, only the ones who already have a shadow user can log in.
     */
    autoCreateShadowUsers: boolean;
    /**
     * Shows whether end users can choose the trust configuration for login. If not set, the trust configuration can remain active, however only application users that explicitly specify the origin key can use if for login.
     */
    availableForUserLogon: boolean;
    /**
     * The description of the trust configuration.
     */
    description: string;
    /**
     * The tenant's domain which should be used for user logon.
     */
    domain: string;
    /**
     * The origin of the identity provider.
     *
     * @deprecated Use the `origin` attribute instead
     */
    id: string;
    /**
     * The name of the Identity Authentication tenant the subaccount is connected to.
     */
    identityProvider: string;
    /**
     * Short string that helps users to identify the link for login.
     */
    linkText: string;
    /**
     * The display name of the trust configuration.
     */
    name: string;
    /**
     * The origin of the identity provider.
     */
    origin: string;
    /**
     * The protocol used to establish trust with the identity provider.
     */
    protocol: string;
    /**
     * Shows whether the trust configuration can be modified.
     */
    readOnly: boolean;
    /**
     * Shows whether the identity provider is currently 'active' or 'inactive'.
     */
    status: string;
    /**
     * The trust type.
     */
    type: string;
}

export interface GetSubaccountsValue {
    /**
     * Shows whether the subaccount can use beta services and applications.
     */
    betaEnabled: boolean;
    /**
     * The details of the user that created the subaccount.
     */
    createdBy: string;
    /**
     * The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    createdDate: string;
    /**
     * The description of the subaccount.
     */
    description: string;
    /**
     * The unique ID of the subaccount.
     */
    id: string;
    /**
     * The set of words or phrases assigned to the subaccount.
     */
    labels: {[key: string]: string[]};
    /**
     * The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    lastModified: string;
    /**
     * A descriptive name of the subaccount for customer-facing UIs.
     */
    name: string;
    /**
     * The features of parent entity of the subaccount.
     */
    parentFeatures: string[];
    /**
     * The ID of the subaccount’s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
     */
    parentId: string;
    /**
     * The region in which the subaccount was created.
     */
    region: string;
    /**
     * The current state of the subaccount. Possible values are:
     */
    state: string;
    subdomain: string;
    usage: string;
}

export interface GlobalaccountRoleCollectionRole {
    /**
     * The name of the referenced role.
     */
    name: string;
    /**
     * The name of the referenced template app id.
     */
    roleTemplateAppId: string;
    /**
     * The name of the referenced role template.
     */
    roleTemplateName: string;
}

export interface SubaccountEnvironmentInstanceTimeouts {
    /**
     * Timeout for creating the environment instance.
     */
    create?: string;
    /**
     * Timeout for deleting the environment instance.
     */
    delete?: string;
    /**
     * Timeout for updating the environment instance.
     */
    update?: string;
}

export interface SubaccountRoleCollectionRole {
    /**
     * The name of the referenced role.
     */
    name: string;
    /**
     * The name of the referenced template app id.
     */
    roleTemplateAppId: string;
    /**
     * The name of the referenced role template.
     */
    roleTemplateName: string;
}

export interface SubaccountServiceInstanceTimeouts {
    /**
     * Timeout for creating the service instance.
     */
    create?: string;
    /**
     * Timeout for deleting the service instance.
     */
    delete?: string;
    /**
     * Timeout for updating the service instance.
     */
    update?: string;
}

