// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Assigns the entitlement plan of a service, multitenant application, or environment, to a subaccount. Note that some environments, such as Cloud Foundry, are available by default to all global accounts and their subaccounts, and therefore are not made available as entitlements.
 *
 * __Tip:__
 * You must be assigned to the global account admin or viewer role.
 *
 * __Further documentation:__
 * <https://help.sap.com/docs/btp/sap-business-technology-platform/entitlements-and-quotas>
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as btp from "@lechnerc77/pulumi-btp";
 *
 * // entitle service plan without quota in a subaccount
 * const alertNotificationService = new btp.SubaccountEntitlement("alertNotificationService", {
 *     planName: "free",
 *     serviceName: "alert-notification",
 *     subaccountId: "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
 * });
 * // entitle service plan with quota in a subaccount
 * const uasReporting = new btp.SubaccountEntitlement("uasReporting", {
 *     amount: 1,
 *     planName: "reporting-directory",
 *     serviceName: "uas",
 *     subaccountId: "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
 * });
 * ```
 *
 * ## Import
 *
 * terraform
 *
 * ```sh
 *  $ pulumi import btp:index/subaccountEntitlement:SubaccountEntitlement <resource_name> <subaccount_id>,<service_name>,<plan_name>
 * ```
 *
 * ```sh
 *  $ pulumi import btp:index/subaccountEntitlement:SubaccountEntitlement alert_notification_service 6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f,alert-notification,free
 * ```
 */
export class SubaccountEntitlement extends pulumi.CustomResource {
    /**
     * Get an existing SubaccountEntitlement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubaccountEntitlementState, opts?: pulumi.CustomResourceOptions): SubaccountEntitlement {
        return new SubaccountEntitlement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'btp:index/subaccountEntitlement:SubaccountEntitlement';

    /**
     * Returns true if the given object is an instance of SubaccountEntitlement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SubaccountEntitlement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SubaccountEntitlement.__pulumiType;
    }

    /**
     * The quota assigned to the subaccount.
     */
    public readonly amount!: pulumi.Output<number>;
    /**
     * The current state of the entitlement. Possible values are:
     */
    public /*out*/ readonly category!: pulumi.Output<string>;
    /**
     * The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    public /*out*/ readonly createdDate!: pulumi.Output<string>;
    /**
     * The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    public /*out*/ readonly lastModified!: pulumi.Output<string>;
    /**
     * The ID of the entitled service plan.
     */
    public /*out*/ readonly planId!: pulumi.Output<string>;
    /**
     * The name of the entitled service plan.
     */
    public readonly planName!: pulumi.Output<string>;
    /**
     * The name of the entitled service.
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * The current state of the entitlement. Possible values are: | state | description | | --- | --- | | `OK` | The CRUD
     * operation or series of operations completed successfully. | | `STARTED` | The processing operation started | |
     * `PROCESSING` | The processing operation is in progress | | `PROCESSING_FAILED` | The processing operation failed |
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The ID of the subaccount.
     */
    public readonly subaccountId!: pulumi.Output<string>;

    /**
     * Create a SubaccountEntitlement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubaccountEntitlementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubaccountEntitlementArgs | SubaccountEntitlementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubaccountEntitlementState | undefined;
            resourceInputs["amount"] = state ? state.amount : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["createdDate"] = state ? state.createdDate : undefined;
            resourceInputs["lastModified"] = state ? state.lastModified : undefined;
            resourceInputs["planId"] = state ? state.planId : undefined;
            resourceInputs["planName"] = state ? state.planName : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subaccountId"] = state ? state.subaccountId : undefined;
        } else {
            const args = argsOrState as SubaccountEntitlementArgs | undefined;
            if ((!args || args.planName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'planName'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.subaccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subaccountId'");
            }
            resourceInputs["amount"] = args ? args.amount : undefined;
            resourceInputs["planName"] = args ? args.planName : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["subaccountId"] = args ? args.subaccountId : undefined;
            resourceInputs["category"] = undefined /*out*/;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["lastModified"] = undefined /*out*/;
            resourceInputs["planId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SubaccountEntitlement.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SubaccountEntitlement resources.
 */
export interface SubaccountEntitlementState {
    /**
     * The quota assigned to the subaccount.
     */
    amount?: pulumi.Input<number>;
    /**
     * The current state of the entitlement. Possible values are:
     */
    category?: pulumi.Input<string>;
    /**
     * The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    createdDate?: pulumi.Input<string>;
    /**
     * The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     */
    lastModified?: pulumi.Input<string>;
    /**
     * The ID of the entitled service plan.
     */
    planId?: pulumi.Input<string>;
    /**
     * The name of the entitled service plan.
     */
    planName?: pulumi.Input<string>;
    /**
     * The name of the entitled service.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * The current state of the entitlement. Possible values are: | state | description | | --- | --- | | `OK` | The CRUD
     * operation or series of operations completed successfully. | | `STARTED` | The processing operation started | |
     * `PROCESSING` | The processing operation is in progress | | `PROCESSING_FAILED` | The processing operation failed |
     */
    state?: pulumi.Input<string>;
    /**
     * The ID of the subaccount.
     */
    subaccountId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SubaccountEntitlement resource.
 */
export interface SubaccountEntitlementArgs {
    /**
     * The quota assigned to the subaccount.
     */
    amount?: pulumi.Input<number>;
    /**
     * The name of the entitled service plan.
     */
    planName: pulumi.Input<string>;
    /**
     * The name of the entitled service.
     */
    serviceName: pulumi.Input<string>;
    /**
     * The ID of the subaccount.
     */
    subaccountId: pulumi.Input<string>;
}
