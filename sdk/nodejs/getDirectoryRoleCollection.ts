// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Gets details about a specific directory role collection.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as btp from "@pulumi/btp";
 *
 * const directoryAdmin = btp.getDirectoryRoleCollection({
 *     directoryId: "dd005d8b-1fee-4e6b-b6ff-cb9a197b7fe0",
 *     name: "Directory Administrator",
 * });
 * ```
 */
export function getDirectoryRoleCollection(args: GetDirectoryRoleCollectionArgs, opts?: pulumi.InvokeOptions): Promise<GetDirectoryRoleCollectionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("btp:index/getDirectoryRoleCollection:getDirectoryRoleCollection", {
        "directoryId": args.directoryId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getDirectoryRoleCollection.
 */
export interface GetDirectoryRoleCollectionArgs {
    /**
     * The ID of the directory.
     */
    directoryId: string;
    /**
     * The name of the role collection.
     */
    name: string;
}

/**
 * A collection of values returned by getDirectoryRoleCollection.
 */
export interface GetDirectoryRoleCollectionResult {
    /**
     * The description of the role collection.
     */
    readonly description: string;
    /**
     * The ID of the directory.
     */
    readonly directoryId: string;
    /**
     * The ID of the directory.
     *
     * @deprecated Use the `directory_id` attribute instead
     */
    readonly id: string;
    /**
     * The name of the role collection.
     */
    readonly name: string;
    /**
     * Shows whether the role collection is read-only.
     */
    readonly readOnly: boolean;
    readonly roles: outputs.GetDirectoryRoleCollectionRole[];
}
/**
 * Gets details about a specific directory role collection.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as btp from "@pulumi/btp";
 *
 * const directoryAdmin = btp.getDirectoryRoleCollection({
 *     directoryId: "dd005d8b-1fee-4e6b-b6ff-cb9a197b7fe0",
 *     name: "Directory Administrator",
 * });
 * ```
 */
export function getDirectoryRoleCollectionOutput(args: GetDirectoryRoleCollectionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDirectoryRoleCollectionResult> {
    return pulumi.output(args).apply((a: any) => getDirectoryRoleCollection(a, opts))
}

/**
 * A collection of arguments for invoking getDirectoryRoleCollection.
 */
export interface GetDirectoryRoleCollectionOutputArgs {
    /**
     * The ID of the directory.
     */
    directoryId: pulumi.Input<string>;
    /**
     * The name of the role collection.
     */
    name: pulumi.Input<string>;
}
