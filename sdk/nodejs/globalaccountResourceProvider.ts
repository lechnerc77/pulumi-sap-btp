// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates a resource provider instance to allow your global account to connect to your provider account on a non-SAP cloud vendor. Through this channel, you can consume remote service resources that you already own and are supported by SAP BTP.
 * For example, if you are subscribed to Amazon Web Services (AWS) and have already purchased services, such as PostgreSQL, you can register the vendor as a resource provider in SAP BTP and consume this service across your subaccounts together with other services offered by SAP.
 *
 * The use of this functionality is subject to the availability of the supported non-SAP cloud vendors in your country/region.
 *
 * __Tips:__
 * * You must be assigned to the global account admin role.
 * * You can create more than one instance of a given resource provider, each with its unique configuration properties. In such cases, the display name and technical name should be descriptive enough so that you and developers can easily differentiate between each instance.
 * * After you configure a new resource provider instance, its supported services are added as entitlements in your global account.
 *
 * __Further documentation:__
 * <https://help.sap.com/docs/btp/sap-business-technology-platform/managing-resource-providers>
 *
 * ## Import
 *
 * terraform
 *
 * ```sh
 *  $ pulumi import btp:index/globalaccountResourceProvider:GlobalaccountResourceProvider <resource_name> <resource_provider>,<unique_technical_name>
 * ```
 *
 * ```sh
 *  $ pulumi import btp:index/globalaccountResourceProvider:GlobalaccountResourceProvider azure AZURE,my_azure_provider
 * ```
 */
export class GlobalaccountResourceProvider extends pulumi.CustomResource {
    /**
     * Get an existing GlobalaccountResourceProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalaccountResourceProviderState, opts?: pulumi.CustomResourceOptions): GlobalaccountResourceProvider {
        return new GlobalaccountResourceProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'btp:index/globalaccountResourceProvider:GlobalaccountResourceProvider';

    /**
     * Returns true if the given object is an instance of GlobalaccountResourceProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlobalaccountResourceProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalaccountResourceProvider.__pulumiType;
    }

    /**
     * The configuration properties for the resource provider as required by the vendor.
     */
    public readonly configuration!: pulumi.Output<string>;
    /**
     * The description of the resource provider.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The descriptive name of the resource provider.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The cloud vendor from which to consume services through your subscribed account. Possible values are:
     */
    public readonly providerType!: pulumi.Output<string>;
    /**
     * The unique technical name of the resource provider.
     */
    public readonly technicalName!: pulumi.Output<string>;

    /**
     * Create a GlobalaccountResourceProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlobalaccountResourceProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlobalaccountResourceProviderArgs | GlobalaccountResourceProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlobalaccountResourceProviderState | undefined;
            resourceInputs["configuration"] = state ? state.configuration : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["providerType"] = state ? state.providerType : undefined;
            resourceInputs["technicalName"] = state ? state.technicalName : undefined;
        } else {
            const args = argsOrState as GlobalaccountResourceProviderArgs | undefined;
            if ((!args || args.configuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configuration'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.providerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerType'");
            }
            if ((!args || args.technicalName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'technicalName'");
            }
            resourceInputs["configuration"] = args?.configuration ? pulumi.secret(args.configuration) : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["providerType"] = args ? args.providerType : undefined;
            resourceInputs["technicalName"] = args ? args.technicalName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["configuration"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(GlobalaccountResourceProvider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GlobalaccountResourceProvider resources.
 */
export interface GlobalaccountResourceProviderState {
    /**
     * The configuration properties for the resource provider as required by the vendor.
     */
    configuration?: pulumi.Input<string>;
    /**
     * The description of the resource provider.
     */
    description?: pulumi.Input<string>;
    /**
     * The descriptive name of the resource provider.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The cloud vendor from which to consume services through your subscribed account. Possible values are:
     */
    providerType?: pulumi.Input<string>;
    /**
     * The unique technical name of the resource provider.
     */
    technicalName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GlobalaccountResourceProvider resource.
 */
export interface GlobalaccountResourceProviderArgs {
    /**
     * The configuration properties for the resource provider as required by the vendor.
     */
    configuration: pulumi.Input<string>;
    /**
     * The description of the resource provider.
     */
    description?: pulumi.Input<string>;
    /**
     * The descriptive name of the resource provider.
     */
    displayName: pulumi.Input<string>;
    /**
     * The cloud vendor from which to consume services through your subscribed account. Possible values are:
     */
    providerType: pulumi.Input<string>;
    /**
     * The unique technical name of the resource provider.
     */
    technicalName: pulumi.Input<string>;
}
