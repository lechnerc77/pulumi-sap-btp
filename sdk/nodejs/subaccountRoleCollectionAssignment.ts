// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Assigns a user to a role collection on a subaccount level.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as btp from "@lechnerc77/pulumi-btp";
 *
 * // assign a single ser to a role collection on subaccount level
 * const jd = new btp.SubaccountRoleCollectionAssignment("jd", {
 *     roleCollectionName: "Subaccount Viewer",
 *     subaccountId: "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
 *     userName: "john.doe@mycompany.com",
 * });
 * // assign a group to a role collection on subaccount level
 * const subaccountViewerGroup = new btp.SubaccountRoleCollectionAssignment("subaccountViewerGroup", {
 *     groupName: "subaccount-viewer-group",
 *     roleCollectionName: "Subaccount Viewer",
 *     subaccountId: "6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f",
 * });
 * ```
 */
export class SubaccountRoleCollectionAssignment extends pulumi.CustomResource {
    /**
     * Get an existing SubaccountRoleCollectionAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubaccountRoleCollectionAssignmentState, opts?: pulumi.CustomResourceOptions): SubaccountRoleCollectionAssignment {
        return new SubaccountRoleCollectionAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'btp:index/subaccountRoleCollectionAssignment:SubaccountRoleCollectionAssignment';

    /**
     * Returns true if the given object is an instance of SubaccountRoleCollectionAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SubaccountRoleCollectionAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SubaccountRoleCollectionAssignment.__pulumiType;
    }

    /**
     * The name of the attribute to assign.
     */
    public readonly attributeName!: pulumi.Output<string | undefined>;
    /**
     * The value of the attribute to assign.
     */
    public readonly attributeValue!: pulumi.Output<string | undefined>;
    /**
     * The name of the group to assign.
     */
    public readonly groupName!: pulumi.Output<string | undefined>;
    /**
     * The identity provider that hosts the user or a group. The default value is `ldap`.
     */
    public readonly origin!: pulumi.Output<string>;
    /**
     * The name of the role collection.
     */
    public readonly roleCollectionName!: pulumi.Output<string>;
    /**
     * The ID of the subaccount.
     */
    public readonly subaccountId!: pulumi.Output<string>;
    /**
     * The username of the user to assign.
     */
    public readonly userName!: pulumi.Output<string | undefined>;

    /**
     * Create a SubaccountRoleCollectionAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubaccountRoleCollectionAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubaccountRoleCollectionAssignmentArgs | SubaccountRoleCollectionAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubaccountRoleCollectionAssignmentState | undefined;
            resourceInputs["attributeName"] = state ? state.attributeName : undefined;
            resourceInputs["attributeValue"] = state ? state.attributeValue : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["origin"] = state ? state.origin : undefined;
            resourceInputs["roleCollectionName"] = state ? state.roleCollectionName : undefined;
            resourceInputs["subaccountId"] = state ? state.subaccountId : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as SubaccountRoleCollectionAssignmentArgs | undefined;
            if ((!args || args.roleCollectionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleCollectionName'");
            }
            if ((!args || args.subaccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subaccountId'");
            }
            resourceInputs["attributeName"] = args ? args.attributeName : undefined;
            resourceInputs["attributeValue"] = args ? args.attributeValue : undefined;
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["origin"] = args ? args.origin : undefined;
            resourceInputs["roleCollectionName"] = args ? args.roleCollectionName : undefined;
            resourceInputs["subaccountId"] = args ? args.subaccountId : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SubaccountRoleCollectionAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SubaccountRoleCollectionAssignment resources.
 */
export interface SubaccountRoleCollectionAssignmentState {
    /**
     * The name of the attribute to assign.
     */
    attributeName?: pulumi.Input<string>;
    /**
     * The value of the attribute to assign.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * The name of the group to assign.
     */
    groupName?: pulumi.Input<string>;
    /**
     * The identity provider that hosts the user or a group. The default value is `ldap`.
     */
    origin?: pulumi.Input<string>;
    /**
     * The name of the role collection.
     */
    roleCollectionName?: pulumi.Input<string>;
    /**
     * The ID of the subaccount.
     */
    subaccountId?: pulumi.Input<string>;
    /**
     * The username of the user to assign.
     */
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SubaccountRoleCollectionAssignment resource.
 */
export interface SubaccountRoleCollectionAssignmentArgs {
    /**
     * The name of the attribute to assign.
     */
    attributeName?: pulumi.Input<string>;
    /**
     * The value of the attribute to assign.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * The name of the group to assign.
     */
    groupName?: pulumi.Input<string>;
    /**
     * The identity provider that hosts the user or a group. The default value is `ldap`.
     */
    origin?: pulumi.Input<string>;
    /**
     * The name of the role collection.
     */
    roleCollectionName: pulumi.Input<string>;
    /**
     * The ID of the subaccount.
     */
    subaccountId: pulumi.Input<string>;
    /**
     * The username of the user to assign.
     */
    userName?: pulumi.Input<string>;
}
