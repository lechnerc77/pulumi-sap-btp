// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Gets details about a specific directory role.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as btp from "@pulumi/btp";
 *
 * const userRoleAuditor = btp.getDirectoryRole({
 *     appId: "xsuaa!t1",
 *     directoryId: "dd005d8b-1fee-4e6b-b6ff-cb9a197b7fe0",
 *     name: "User and Role Auditor",
 *     roleTemplateName: "xsuaa_auditor",
 * });
 * ```
 */
export function getDirectoryRole(args: GetDirectoryRoleArgs, opts?: pulumi.InvokeOptions): Promise<GetDirectoryRoleResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("btp:index/getDirectoryRole:getDirectoryRole", {
        "appId": args.appId,
        "directoryId": args.directoryId,
        "name": args.name,
        "roleTemplateName": args.roleTemplateName,
    }, opts);
}

/**
 * A collection of arguments for invoking getDirectoryRole.
 */
export interface GetDirectoryRoleArgs {
    /**
     * The ID of the xsuaa application.
     */
    appId: string;
    /**
     * The ID of the directory.
     */
    directoryId: string;
    /**
     * The name of the role.
     */
    name: string;
    /**
     * The name of the role template.
     */
    roleTemplateName: string;
}

/**
 * A collection of values returned by getDirectoryRole.
 */
export interface GetDirectoryRoleResult {
    /**
     * The ID of the xsuaa application.
     */
    readonly appId: string;
    /**
     * The description of the role.
     */
    readonly description: string;
    /**
     * The ID of the directory.
     */
    readonly directoryId: string;
    /**
     * The ID of the directory.
     *
     * @deprecated Use the `directory_id` attribute instead
     */
    readonly id: string;
    /**
     * The name of the role.
     */
    readonly name: string;
    /**
     * Shows whether the role can be modified or not.
     */
    readonly readOnly: boolean;
    /**
     * The name of the role template.
     */
    readonly roleTemplateName: string;
    /**
     * The scopes available with this role.
     */
    readonly scopes: outputs.GetDirectoryRoleScope[];
}
/**
 * Gets details about a specific directory role.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as btp from "@pulumi/btp";
 *
 * const userRoleAuditor = btp.getDirectoryRole({
 *     appId: "xsuaa!t1",
 *     directoryId: "dd005d8b-1fee-4e6b-b6ff-cb9a197b7fe0",
 *     name: "User and Role Auditor",
 *     roleTemplateName: "xsuaa_auditor",
 * });
 * ```
 */
export function getDirectoryRoleOutput(args: GetDirectoryRoleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDirectoryRoleResult> {
    return pulumi.output(args).apply((a: any) => getDirectoryRole(a, opts))
}

/**
 * A collection of arguments for invoking getDirectoryRole.
 */
export interface GetDirectoryRoleOutputArgs {
    /**
     * The ID of the xsuaa application.
     */
    appId: pulumi.Input<string>;
    /**
     * The ID of the directory.
     */
    directoryId: pulumi.Input<string>;
    /**
     * The name of the role.
     */
    name: pulumi.Input<string>;
    /**
     * The name of the role template.
     */
    roleTemplateName: pulumi.Input<string>;
}
