// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Assigns a user to a role collection on a directory level.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as btp from "@lechnerc77/pulumi-btp";
 *
 * // assign a single user to a role collection on directory level
 * const jd = new btp.DirectoryRoleCollectionAssignment("jd", {
 *     directoryId: "ddfc2206-5f11-48ed-a1ec-29010af70050",
 *     roleCollectionName: "Directory Viewer",
 *     userName: "john.doe@mycompany.com",
 * });
 * // assign a group to a role collection on directory level
 * const directoryViewerGroup = new btp.DirectoryRoleCollectionAssignment("directoryViewerGroup", {
 *     directoryId: "ddfc2206-5f11-48ed-a1ec-29010af70050",
 *     groupName: "directory-viewer-group",
 *     roleCollectionName: "Directory Viewer",
 * });
 * ```
 */
export class DirectoryRoleCollectionAssignment extends pulumi.CustomResource {
    /**
     * Get an existing DirectoryRoleCollectionAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DirectoryRoleCollectionAssignmentState, opts?: pulumi.CustomResourceOptions): DirectoryRoleCollectionAssignment {
        return new DirectoryRoleCollectionAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'btp:index/directoryRoleCollectionAssignment:DirectoryRoleCollectionAssignment';

    /**
     * Returns true if the given object is an instance of DirectoryRoleCollectionAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DirectoryRoleCollectionAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DirectoryRoleCollectionAssignment.__pulumiType;
    }

    /**
     * The name of the attribute to assign.
     */
    public readonly attributeName!: pulumi.Output<string | undefined>;
    /**
     * The value of the attribute to assign.
     */
    public readonly attributeValue!: pulumi.Output<string | undefined>;
    /**
     * The ID of the directory.
     */
    public readonly directoryId!: pulumi.Output<string>;
    /**
     * The name of the group to assign.
     */
    public readonly groupName!: pulumi.Output<string | undefined>;
    /**
     * The identity provider that hosts the user or a group. The default value is `ldap`.
     */
    public readonly origin!: pulumi.Output<string>;
    /**
     * The name of the role collection.
     */
    public readonly roleCollectionName!: pulumi.Output<string>;
    /**
     * The username of the user to assign.
     */
    public readonly userName!: pulumi.Output<string | undefined>;

    /**
     * Create a DirectoryRoleCollectionAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DirectoryRoleCollectionAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DirectoryRoleCollectionAssignmentArgs | DirectoryRoleCollectionAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DirectoryRoleCollectionAssignmentState | undefined;
            resourceInputs["attributeName"] = state ? state.attributeName : undefined;
            resourceInputs["attributeValue"] = state ? state.attributeValue : undefined;
            resourceInputs["directoryId"] = state ? state.directoryId : undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["origin"] = state ? state.origin : undefined;
            resourceInputs["roleCollectionName"] = state ? state.roleCollectionName : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as DirectoryRoleCollectionAssignmentArgs | undefined;
            if ((!args || args.directoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directoryId'");
            }
            if ((!args || args.roleCollectionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleCollectionName'");
            }
            resourceInputs["attributeName"] = args ? args.attributeName : undefined;
            resourceInputs["attributeValue"] = args ? args.attributeValue : undefined;
            resourceInputs["directoryId"] = args ? args.directoryId : undefined;
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["origin"] = args ? args.origin : undefined;
            resourceInputs["roleCollectionName"] = args ? args.roleCollectionName : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DirectoryRoleCollectionAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DirectoryRoleCollectionAssignment resources.
 */
export interface DirectoryRoleCollectionAssignmentState {
    /**
     * The name of the attribute to assign.
     */
    attributeName?: pulumi.Input<string>;
    /**
     * The value of the attribute to assign.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * The ID of the directory.
     */
    directoryId?: pulumi.Input<string>;
    /**
     * The name of the group to assign.
     */
    groupName?: pulumi.Input<string>;
    /**
     * The identity provider that hosts the user or a group. The default value is `ldap`.
     */
    origin?: pulumi.Input<string>;
    /**
     * The name of the role collection.
     */
    roleCollectionName?: pulumi.Input<string>;
    /**
     * The username of the user to assign.
     */
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DirectoryRoleCollectionAssignment resource.
 */
export interface DirectoryRoleCollectionAssignmentArgs {
    /**
     * The name of the attribute to assign.
     */
    attributeName?: pulumi.Input<string>;
    /**
     * The value of the attribute to assign.
     */
    attributeValue?: pulumi.Input<string>;
    /**
     * The ID of the directory.
     */
    directoryId: pulumi.Input<string>;
    /**
     * The name of the group to assign.
     */
    groupName?: pulumi.Input<string>;
    /**
     * The identity provider that hosts the user or a group. The default value is `ldap`.
     */
    origin?: pulumi.Input<string>;
    /**
     * The name of the role collection.
     */
    roleCollectionName: pulumi.Input<string>;
    /**
     * The username of the user to assign.
     */
    userName?: pulumi.Input<string>;
}
