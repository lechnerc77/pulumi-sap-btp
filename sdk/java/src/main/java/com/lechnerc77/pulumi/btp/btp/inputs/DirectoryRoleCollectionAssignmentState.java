// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.lechnerc77.pulumi.btp.btp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DirectoryRoleCollectionAssignmentState extends com.pulumi.resources.ResourceArgs {

    public static final DirectoryRoleCollectionAssignmentState Empty = new DirectoryRoleCollectionAssignmentState();

    /**
     * The name of the attribute to assign.
     * 
     */
    @Import(name="attributeName")
    private @Nullable Output<String> attributeName;

    /**
     * @return The name of the attribute to assign.
     * 
     */
    public Optional<Output<String>> attributeName() {
        return Optional.ofNullable(this.attributeName);
    }

    /**
     * The value of the attribute to assign.
     * 
     */
    @Import(name="attributeValue")
    private @Nullable Output<String> attributeValue;

    /**
     * @return The value of the attribute to assign.
     * 
     */
    public Optional<Output<String>> attributeValue() {
        return Optional.ofNullable(this.attributeValue);
    }

    /**
     * The ID of the directory.
     * 
     */
    @Import(name="directoryId")
    private @Nullable Output<String> directoryId;

    /**
     * @return The ID of the directory.
     * 
     */
    public Optional<Output<String>> directoryId() {
        return Optional.ofNullable(this.directoryId);
    }

    /**
     * The name of the group to assign.
     * 
     */
    @Import(name="groupName")
    private @Nullable Output<String> groupName;

    /**
     * @return The name of the group to assign.
     * 
     */
    public Optional<Output<String>> groupName() {
        return Optional.ofNullable(this.groupName);
    }

    /**
     * The identity provider that hosts the user or a group. The default value is `ldap`.
     * 
     */
    @Import(name="origin")
    private @Nullable Output<String> origin;

    /**
     * @return The identity provider that hosts the user or a group. The default value is `ldap`.
     * 
     */
    public Optional<Output<String>> origin() {
        return Optional.ofNullable(this.origin);
    }

    /**
     * The name of the role collection.
     * 
     */
    @Import(name="roleCollectionName")
    private @Nullable Output<String> roleCollectionName;

    /**
     * @return The name of the role collection.
     * 
     */
    public Optional<Output<String>> roleCollectionName() {
        return Optional.ofNullable(this.roleCollectionName);
    }

    /**
     * The username of the user to assign.
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return The username of the user to assign.
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private DirectoryRoleCollectionAssignmentState() {}

    private DirectoryRoleCollectionAssignmentState(DirectoryRoleCollectionAssignmentState $) {
        this.attributeName = $.attributeName;
        this.attributeValue = $.attributeValue;
        this.directoryId = $.directoryId;
        this.groupName = $.groupName;
        this.origin = $.origin;
        this.roleCollectionName = $.roleCollectionName;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DirectoryRoleCollectionAssignmentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DirectoryRoleCollectionAssignmentState $;

        public Builder() {
            $ = new DirectoryRoleCollectionAssignmentState();
        }

        public Builder(DirectoryRoleCollectionAssignmentState defaults) {
            $ = new DirectoryRoleCollectionAssignmentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param attributeName The name of the attribute to assign.
         * 
         * @return builder
         * 
         */
        public Builder attributeName(@Nullable Output<String> attributeName) {
            $.attributeName = attributeName;
            return this;
        }

        /**
         * @param attributeName The name of the attribute to assign.
         * 
         * @return builder
         * 
         */
        public Builder attributeName(String attributeName) {
            return attributeName(Output.of(attributeName));
        }

        /**
         * @param attributeValue The value of the attribute to assign.
         * 
         * @return builder
         * 
         */
        public Builder attributeValue(@Nullable Output<String> attributeValue) {
            $.attributeValue = attributeValue;
            return this;
        }

        /**
         * @param attributeValue The value of the attribute to assign.
         * 
         * @return builder
         * 
         */
        public Builder attributeValue(String attributeValue) {
            return attributeValue(Output.of(attributeValue));
        }

        /**
         * @param directoryId The ID of the directory.
         * 
         * @return builder
         * 
         */
        public Builder directoryId(@Nullable Output<String> directoryId) {
            $.directoryId = directoryId;
            return this;
        }

        /**
         * @param directoryId The ID of the directory.
         * 
         * @return builder
         * 
         */
        public Builder directoryId(String directoryId) {
            return directoryId(Output.of(directoryId));
        }

        /**
         * @param groupName The name of the group to assign.
         * 
         * @return builder
         * 
         */
        public Builder groupName(@Nullable Output<String> groupName) {
            $.groupName = groupName;
            return this;
        }

        /**
         * @param groupName The name of the group to assign.
         * 
         * @return builder
         * 
         */
        public Builder groupName(String groupName) {
            return groupName(Output.of(groupName));
        }

        /**
         * @param origin The identity provider that hosts the user or a group. The default value is `ldap`.
         * 
         * @return builder
         * 
         */
        public Builder origin(@Nullable Output<String> origin) {
            $.origin = origin;
            return this;
        }

        /**
         * @param origin The identity provider that hosts the user or a group. The default value is `ldap`.
         * 
         * @return builder
         * 
         */
        public Builder origin(String origin) {
            return origin(Output.of(origin));
        }

        /**
         * @param roleCollectionName The name of the role collection.
         * 
         * @return builder
         * 
         */
        public Builder roleCollectionName(@Nullable Output<String> roleCollectionName) {
            $.roleCollectionName = roleCollectionName;
            return this;
        }

        /**
         * @param roleCollectionName The name of the role collection.
         * 
         * @return builder
         * 
         */
        public Builder roleCollectionName(String roleCollectionName) {
            return roleCollectionName(Output.of(roleCollectionName));
        }

        /**
         * @param userName The username of the user to assign.
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName The username of the user to assign.
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public DirectoryRoleCollectionAssignmentState build() {
            return $;
        }
    }

}
