// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.lechnerc77.pulumi.btp.btp;

import com.lechnerc77.pulumi.btp.btp.DirectoryEntitlementArgs;
import com.lechnerc77.pulumi.btp.btp.Utilities;
import com.lechnerc77.pulumi.btp.btp.inputs.DirectoryEntitlementState;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Assigns the entitlement plan of a service, multitenant application, or environment, to a directory. Note that some environments, such as Cloud Foundry, are available by default to all global accounts and their directorys, and therefore are not made available as entitlements.
 * 
 * __Tip:__
 * You must be assigned to the global account admin or viewer role.
 * 
 * __Further documentation:__
 * &lt;https://help.sap.com/docs/btp/sap-business-technology-platform/entitlements-and-quotas&gt;
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.btp.DirectoryEntitlement;
 * import com.pulumi.btp.DirectoryEntitlementArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var alertNotificationService = new DirectoryEntitlement(&#34;alertNotificationService&#34;, DirectoryEntitlementArgs.builder()        
 *             .directoryId(&#34;6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f&#34;)
 *             .planName(&#34;free&#34;)
 *             .serviceName(&#34;alert-notification&#34;)
 *             .build());
 * 
 *         var uasReporting = new DirectoryEntitlement(&#34;uasReporting&#34;, DirectoryEntitlementArgs.builder()        
 *             .autoAssign(true)
 *             .directoryId(&#34;6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f&#34;)
 *             .distribute(true)
 *             .planName(&#34;free&#34;)
 *             .serviceName(&#34;alert-notification&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * terraform
 * 
 * ```sh
 *  $ pulumi import btp:index/directoryEntitlement:DirectoryEntitlement &lt;resource_name&gt; &lt;subaccount_id&gt;,&lt;service_name&gt;,&lt;plan_name&gt;
 * ```
 * 
 * ```sh
 *  $ pulumi import btp:index/directoryEntitlement:DirectoryEntitlement alert_notification_service 6aa64c2f-38c1-49a9-b2e8-cf9fea769b7f,alert-notification,free
 * ```
 * 
 */
@ResourceType(type="btp:index/directoryEntitlement:DirectoryEntitlement")
public class DirectoryEntitlement extends com.pulumi.resources.CustomResource {
    /**
     * The quota assigned to the directory.
     * 
     */
    @Export(name="amount", refs={Integer.class}, tree="[0]")
    private Output<Integer> amount;

    /**
     * @return The quota assigned to the directory.
     * 
     */
    public Output<Integer> amount() {
        return this.amount;
    }
    /**
     * Determines whether the plans of entitlements that have a numeric quota with the amount specified in `auto_distribute_amount` are automatically allocated to any new subaccount that is added to the directory in the future. For entitlements without a numeric quota, it shows if the plan are assigned to any new subaccount that is added to the directory in the future (`auto_distribute_amount` is not needed). If the `distribute` parameter is set, the same assignment is also made to all subaccounts currently in the directory. Entitlements are subject to available quota in the directory.
     * 
     */
    @Export(name="autoAssign", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> autoAssign;

    /**
     * @return Determines whether the plans of entitlements that have a numeric quota with the amount specified in `auto_distribute_amount` are automatically allocated to any new subaccount that is added to the directory in the future. For entitlements without a numeric quota, it shows if the plan are assigned to any new subaccount that is added to the directory in the future (`auto_distribute_amount` is not needed). If the `distribute` parameter is set, the same assignment is also made to all subaccounts currently in the directory. Entitlements are subject to available quota in the directory.
     * 
     */
    public Output<Boolean> autoAssign() {
        return this.autoAssign;
    }
    /**
     * The quota of the specified plan automatically allocated to any new subaccount that is created in the future in the directory. When applying this option, `auto_assign` and/or `distribute` must also be set. Applies only to entitlements that have a numeric quota.
     * 
     */
    @Export(name="autoDistributeAmount", refs={Integer.class}, tree="[0]")
    private Output<Integer> autoDistributeAmount;

    /**
     * @return The quota of the specified plan automatically allocated to any new subaccount that is created in the future in the directory. When applying this option, `auto_assign` and/or `distribute` must also be set. Applies only to entitlements that have a numeric quota.
     * 
     */
    public Output<Integer> autoDistributeAmount() {
        return this.autoDistributeAmount;
    }
    /**
     * The current state of the entitlement. Possible values are:
     * 
     */
    @Export(name="category", refs={String.class}, tree="[0]")
    private Output<String> category;

    /**
     * @return The current state of the entitlement. Possible values are:
     * 
     */
    public Output<String> category() {
        return this.category;
    }
    /**
     * The ID of the directory.
     * 
     */
    @Export(name="directoryId", refs={String.class}, tree="[0]")
    private Output<String> directoryId;

    /**
     * @return The ID of the directory.
     * 
     */
    public Output<String> directoryId() {
        return this.directoryId;
    }
    /**
     * Defines the assignment of the plan with the quota specified in `auto_distribute_amount` to subaccounts currently located in the specified directory. For entitlements without a numeric quota, the plan is assigned to the subaccounts currently located in the directory (`auto_distribute_amount` is not needed). When applying this option, `auto_assign` must also be set.
     * 
     */
    @Export(name="distribute", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> distribute;

    /**
     * @return Defines the assignment of the plan with the quota specified in `auto_distribute_amount` to subaccounts currently located in the specified directory. For entitlements without a numeric quota, the plan is assigned to the subaccounts currently located in the directory (`auto_distribute_amount` is not needed). When applying this option, `auto_assign` must also be set.
     * 
     */
    public Output<Boolean> distribute() {
        return this.distribute;
    }
    /**
     * The ID of the entitled service plan.
     * 
     */
    @Export(name="planId", refs={String.class}, tree="[0]")
    private Output<String> planId;

    /**
     * @return The ID of the entitled service plan.
     * 
     */
    public Output<String> planId() {
        return this.planId;
    }
    /**
     * The name of the entitled service plan.
     * 
     */
    @Export(name="planName", refs={String.class}, tree="[0]")
    private Output<String> planName;

    /**
     * @return The name of the entitled service plan.
     * 
     */
    public Output<String> planName() {
        return this.planName;
    }
    /**
     * The name of the entitled service.
     * 
     */
    @Export(name="serviceName", refs={String.class}, tree="[0]")
    private Output<String> serviceName;

    /**
     * @return The name of the entitled service.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DirectoryEntitlement(String name) {
        this(name, DirectoryEntitlementArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DirectoryEntitlement(String name, DirectoryEntitlementArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DirectoryEntitlement(String name, DirectoryEntitlementArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("btp:index/directoryEntitlement:DirectoryEntitlement", name, args == null ? DirectoryEntitlementArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private DirectoryEntitlement(String name, Output<String> id, @Nullable DirectoryEntitlementState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("btp:index/directoryEntitlement:DirectoryEntitlement", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DirectoryEntitlement get(String name, Output<String> id, @Nullable DirectoryEntitlementState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DirectoryEntitlement(name, id, state, options);
    }
}
