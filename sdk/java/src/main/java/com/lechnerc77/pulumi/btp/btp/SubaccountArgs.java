// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.lechnerc77.pulumi.btp.btp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubaccountArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubaccountArgs Empty = new SubaccountArgs();

    /**
     * Shows whether the subaccount can use beta services and applications.
     * 
     */
    @Import(name="betaEnabled")
    private @Nullable Output<Boolean> betaEnabled;

    /**
     * @return Shows whether the subaccount can use beta services and applications.
     * 
     */
    public Optional<Output<Boolean>> betaEnabled() {
        return Optional.ofNullable(this.betaEnabled);
    }

    /**
     * A description of the subaccount for customer-facing UIs.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the subaccount for customer-facing UIs.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The set of words or phrases assigned to the subaccount.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,List<String>>> labels;

    /**
     * @return The set of words or phrases assigned to the subaccount.
     * 
     */
    public Optional<Output<Map<String,List<String>>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * A descriptive name of the subaccount for customer-facing UIs.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A descriptive name of the subaccount for customer-facing UIs.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the subaccount’s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
     * 
     */
    @Import(name="parentId")
    private @Nullable Output<String> parentId;

    /**
     * @return The ID of the subaccount’s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
     * 
     */
    public Optional<Output<String>> parentId() {
        return Optional.ofNullable(this.parentId);
    }

    /**
     * The region in which the subaccount was created.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return The region in which the subaccount was created.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * The subdomain that becomes part of the path used to access the authorization tenant of the subaccount. Must be unique within the defined region and cannot be changed after the subaccount has been created.
     * 
     */
    @Import(name="subdomain", required=true)
    private Output<String> subdomain;

    /**
     * @return The subdomain that becomes part of the path used to access the authorization tenant of the subaccount. Must be unique within the defined region and cannot be changed after the subaccount has been created.
     * 
     */
    public Output<String> subdomain() {
        return this.subdomain;
    }

    /**
     * Shows whether the subaccount is used for production purposes. This flag can help your cloud operator to take appropriate action when handling incidents that are related to mission-critical accounts in production systems. Do not apply for subaccounts that are used for nonproduction purposes, such as development, testing, and demos. Applying this setting this does not modify the subaccount. Possible values are:
     * 
     */
    @Import(name="usage")
    private @Nullable Output<String> usage;

    /**
     * @return Shows whether the subaccount is used for production purposes. This flag can help your cloud operator to take appropriate action when handling incidents that are related to mission-critical accounts in production systems. Do not apply for subaccounts that are used for nonproduction purposes, such as development, testing, and demos. Applying this setting this does not modify the subaccount. Possible values are:
     * 
     */
    public Optional<Output<String>> usage() {
        return Optional.ofNullable(this.usage);
    }

    private SubaccountArgs() {}

    private SubaccountArgs(SubaccountArgs $) {
        this.betaEnabled = $.betaEnabled;
        this.description = $.description;
        this.labels = $.labels;
        this.name = $.name;
        this.parentId = $.parentId;
        this.region = $.region;
        this.subdomain = $.subdomain;
        this.usage = $.usage;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubaccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubaccountArgs $;

        public Builder() {
            $ = new SubaccountArgs();
        }

        public Builder(SubaccountArgs defaults) {
            $ = new SubaccountArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param betaEnabled Shows whether the subaccount can use beta services and applications.
         * 
         * @return builder
         * 
         */
        public Builder betaEnabled(@Nullable Output<Boolean> betaEnabled) {
            $.betaEnabled = betaEnabled;
            return this;
        }

        /**
         * @param betaEnabled Shows whether the subaccount can use beta services and applications.
         * 
         * @return builder
         * 
         */
        public Builder betaEnabled(Boolean betaEnabled) {
            return betaEnabled(Output.of(betaEnabled));
        }

        /**
         * @param description A description of the subaccount for customer-facing UIs.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the subaccount for customer-facing UIs.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param labels The set of words or phrases assigned to the subaccount.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,List<String>>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The set of words or phrases assigned to the subaccount.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,List<String>> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name A descriptive name of the subaccount for customer-facing UIs.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A descriptive name of the subaccount for customer-facing UIs.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parentId The ID of the subaccount’s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
         * 
         * @return builder
         * 
         */
        public Builder parentId(@Nullable Output<String> parentId) {
            $.parentId = parentId;
            return this;
        }

        /**
         * @param parentId The ID of the subaccount’s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
         * 
         * @return builder
         * 
         */
        public Builder parentId(String parentId) {
            return parentId(Output.of(parentId));
        }

        /**
         * @param region The region in which the subaccount was created.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region in which the subaccount was created.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param subdomain The subdomain that becomes part of the path used to access the authorization tenant of the subaccount. Must be unique within the defined region and cannot be changed after the subaccount has been created.
         * 
         * @return builder
         * 
         */
        public Builder subdomain(Output<String> subdomain) {
            $.subdomain = subdomain;
            return this;
        }

        /**
         * @param subdomain The subdomain that becomes part of the path used to access the authorization tenant of the subaccount. Must be unique within the defined region and cannot be changed after the subaccount has been created.
         * 
         * @return builder
         * 
         */
        public Builder subdomain(String subdomain) {
            return subdomain(Output.of(subdomain));
        }

        /**
         * @param usage Shows whether the subaccount is used for production purposes. This flag can help your cloud operator to take appropriate action when handling incidents that are related to mission-critical accounts in production systems. Do not apply for subaccounts that are used for nonproduction purposes, such as development, testing, and demos. Applying this setting this does not modify the subaccount. Possible values are:
         * 
         * @return builder
         * 
         */
        public Builder usage(@Nullable Output<String> usage) {
            $.usage = usage;
            return this;
        }

        /**
         * @param usage Shows whether the subaccount is used for production purposes. This flag can help your cloud operator to take appropriate action when handling incidents that are related to mission-critical accounts in production systems. Do not apply for subaccounts that are used for nonproduction purposes, such as development, testing, and demos. Applying this setting this does not modify the subaccount. Possible values are:
         * 
         * @return builder
         * 
         */
        public Builder usage(String usage) {
            return usage(Output.of(usage));
        }

        public SubaccountArgs build() {
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            $.subdomain = Objects.requireNonNull($.subdomain, "expected parameter 'subdomain' to be non-null");
            return $;
        }
    }

}
