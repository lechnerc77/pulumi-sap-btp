// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.lechnerc77.pulumi.btp.btp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * The URL of the BTP CLI server (e.g. `https://cli.btp.cloud.sap`).
     * 
     */
    @Import(name="cliServerUrl")
    private @Nullable Output<String> cliServerUrl;

    /**
     * @return The URL of the BTP CLI server (e.g. `https://cli.btp.cloud.sap`).
     * 
     */
    public Optional<Output<String>> cliServerUrl() {
        return Optional.ofNullable(this.cliServerUrl);
    }

    /**
     * The subdomain of the global account in which you want to manage resources. To be found in the cockpit, in the global
     * account view.
     * 
     */
    @Import(name="globalaccount", required=true)
    private Output<String> globalaccount;

    /**
     * @return The subdomain of the global account in which you want to manage resources. To be found in the cockpit, in the global
     * account view.
     * 
     */
    public Output<String> globalaccount() {
        return this.globalaccount;
    }

    /**
     * The identity provider to be used for authentication (default: SAP ID service with origin `sap.default`).
     * 
     */
    @Import(name="idp")
    private @Nullable Output<String> idp;

    /**
     * @return The identity provider to be used for authentication (default: SAP ID service with origin `sap.default`).
     * 
     */
    public Optional<Output<String>> idp() {
        return Optional.ofNullable(this.idp);
    }

    /**
     * A valid id token. To be provided instead of &#39;username&#39; and &#39;password&#39;. This can also be sourced from the `BTP_IDTOKEN`
     * environment variable. (SAP-internal usage only)
     * 
     */
    @Import(name="idtoken")
    private @Nullable Output<String> idtoken;

    /**
     * @return A valid id token. To be provided instead of &#39;username&#39; and &#39;password&#39;. This can also be sourced from the `BTP_IDTOKEN`
     * environment variable. (SAP-internal usage only)
     * 
     */
    public Optional<Output<String>> idtoken() {
        return Optional.ofNullable(this.idtoken);
    }

    /**
     * Your password. Note that two-factor authentication is not supported. This can also be sourced from the `BTP_PASSWORD`
     * environment variable.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Your password. Note that two-factor authentication is not supported. This can also be sourced from the `BTP_PASSWORD`
     * environment variable.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * PEM encoded certificate (only required for x509 auth).
     * 
     */
    @Import(name="tlsClientCertificate")
    private @Nullable Output<String> tlsClientCertificate;

    /**
     * @return PEM encoded certificate (only required for x509 auth).
     * 
     */
    public Optional<Output<String>> tlsClientCertificate() {
        return Optional.ofNullable(this.tlsClientCertificate);
    }

    /**
     * PEM encoded private key (only required for x509 auth).
     * 
     */
    @Import(name="tlsClientKey")
    private @Nullable Output<String> tlsClientKey;

    /**
     * @return PEM encoded private key (only required for x509 auth).
     * 
     */
    public Optional<Output<String>> tlsClientKey() {
        return Optional.ofNullable(this.tlsClientKey);
    }

    /**
     * The URL of the identity provider to be used for authentication (only required for x509 auth).
     * 
     */
    @Import(name="tlsIdpUrl")
    private @Nullable Output<String> tlsIdpUrl;

    /**
     * @return The URL of the identity provider to be used for authentication (only required for x509 auth).
     * 
     */
    public Optional<Output<String>> tlsIdpUrl() {
        return Optional.ofNullable(this.tlsIdpUrl);
    }

    /**
     * Your user name, usually an e-mail address. This can also be sourced from the `BTP_USERNAME` environment variable.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Your user name, usually an e-mail address. This can also be sourced from the `BTP_USERNAME` environment variable.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.cliServerUrl = $.cliServerUrl;
        this.globalaccount = $.globalaccount;
        this.idp = $.idp;
        this.idtoken = $.idtoken;
        this.password = $.password;
        this.tlsClientCertificate = $.tlsClientCertificate;
        this.tlsClientKey = $.tlsClientKey;
        this.tlsIdpUrl = $.tlsIdpUrl;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cliServerUrl The URL of the BTP CLI server (e.g. `https://cli.btp.cloud.sap`).
         * 
         * @return builder
         * 
         */
        public Builder cliServerUrl(@Nullable Output<String> cliServerUrl) {
            $.cliServerUrl = cliServerUrl;
            return this;
        }

        /**
         * @param cliServerUrl The URL of the BTP CLI server (e.g. `https://cli.btp.cloud.sap`).
         * 
         * @return builder
         * 
         */
        public Builder cliServerUrl(String cliServerUrl) {
            return cliServerUrl(Output.of(cliServerUrl));
        }

        /**
         * @param globalaccount The subdomain of the global account in which you want to manage resources. To be found in the cockpit, in the global
         * account view.
         * 
         * @return builder
         * 
         */
        public Builder globalaccount(Output<String> globalaccount) {
            $.globalaccount = globalaccount;
            return this;
        }

        /**
         * @param globalaccount The subdomain of the global account in which you want to manage resources. To be found in the cockpit, in the global
         * account view.
         * 
         * @return builder
         * 
         */
        public Builder globalaccount(String globalaccount) {
            return globalaccount(Output.of(globalaccount));
        }

        /**
         * @param idp The identity provider to be used for authentication (default: SAP ID service with origin `sap.default`).
         * 
         * @return builder
         * 
         */
        public Builder idp(@Nullable Output<String> idp) {
            $.idp = idp;
            return this;
        }

        /**
         * @param idp The identity provider to be used for authentication (default: SAP ID service with origin `sap.default`).
         * 
         * @return builder
         * 
         */
        public Builder idp(String idp) {
            return idp(Output.of(idp));
        }

        /**
         * @param idtoken A valid id token. To be provided instead of &#39;username&#39; and &#39;password&#39;. This can also be sourced from the `BTP_IDTOKEN`
         * environment variable. (SAP-internal usage only)
         * 
         * @return builder
         * 
         */
        public Builder idtoken(@Nullable Output<String> idtoken) {
            $.idtoken = idtoken;
            return this;
        }

        /**
         * @param idtoken A valid id token. To be provided instead of &#39;username&#39; and &#39;password&#39;. This can also be sourced from the `BTP_IDTOKEN`
         * environment variable. (SAP-internal usage only)
         * 
         * @return builder
         * 
         */
        public Builder idtoken(String idtoken) {
            return idtoken(Output.of(idtoken));
        }

        /**
         * @param password Your password. Note that two-factor authentication is not supported. This can also be sourced from the `BTP_PASSWORD`
         * environment variable.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Your password. Note that two-factor authentication is not supported. This can also be sourced from the `BTP_PASSWORD`
         * environment variable.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param tlsClientCertificate PEM encoded certificate (only required for x509 auth).
         * 
         * @return builder
         * 
         */
        public Builder tlsClientCertificate(@Nullable Output<String> tlsClientCertificate) {
            $.tlsClientCertificate = tlsClientCertificate;
            return this;
        }

        /**
         * @param tlsClientCertificate PEM encoded certificate (only required for x509 auth).
         * 
         * @return builder
         * 
         */
        public Builder tlsClientCertificate(String tlsClientCertificate) {
            return tlsClientCertificate(Output.of(tlsClientCertificate));
        }

        /**
         * @param tlsClientKey PEM encoded private key (only required for x509 auth).
         * 
         * @return builder
         * 
         */
        public Builder tlsClientKey(@Nullable Output<String> tlsClientKey) {
            $.tlsClientKey = tlsClientKey;
            return this;
        }

        /**
         * @param tlsClientKey PEM encoded private key (only required for x509 auth).
         * 
         * @return builder
         * 
         */
        public Builder tlsClientKey(String tlsClientKey) {
            return tlsClientKey(Output.of(tlsClientKey));
        }

        /**
         * @param tlsIdpUrl The URL of the identity provider to be used for authentication (only required for x509 auth).
         * 
         * @return builder
         * 
         */
        public Builder tlsIdpUrl(@Nullable Output<String> tlsIdpUrl) {
            $.tlsIdpUrl = tlsIdpUrl;
            return this;
        }

        /**
         * @param tlsIdpUrl The URL of the identity provider to be used for authentication (only required for x509 auth).
         * 
         * @return builder
         * 
         */
        public Builder tlsIdpUrl(String tlsIdpUrl) {
            return tlsIdpUrl(Output.of(tlsIdpUrl));
        }

        /**
         * @param username Your user name, usually an e-mail address. This can also be sourced from the `BTP_USERNAME` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Your user name, usually an e-mail address. This can also be sourced from the `BTP_USERNAME` environment variable.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ProviderArgs build() {
            $.globalaccount = Objects.requireNonNull($.globalaccount, "expected parameter 'globalaccount' to be non-null");
            return $;
        }
    }

}
