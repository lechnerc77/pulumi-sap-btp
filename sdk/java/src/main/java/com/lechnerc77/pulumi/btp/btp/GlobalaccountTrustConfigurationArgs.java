// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.lechnerc77.pulumi.btp.btp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GlobalaccountTrustConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final GlobalaccountTrustConfigurationArgs Empty = new GlobalaccountTrustConfigurationArgs();

    /**
     * Description of the trust configuration.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the trust configuration.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The tenant&#39;s domain which should be used for user logon.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return The tenant&#39;s domain which should be used for user logon.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * The name of the Identity Authentication tenant that you want to connect to the global account.
     * 
     */
    @Import(name="identityProvider", required=true)
    private Output<String> identityProvider;

    /**
     * @return The name of the Identity Authentication tenant that you want to connect to the global account.
     * 
     */
    public Output<String> identityProvider() {
        return this.identityProvider;
    }

    /**
     * The display name of the trust configuration.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The display name of the trust configuration.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The origin of the identity provider.
     * 
     */
    @Import(name="origin")
    private @Nullable Output<String> origin;

    /**
     * @return The origin of the identity provider.
     * 
     */
    public Optional<Output<String>> origin() {
        return Optional.ofNullable(this.origin);
    }

    private GlobalaccountTrustConfigurationArgs() {}

    private GlobalaccountTrustConfigurationArgs(GlobalaccountTrustConfigurationArgs $) {
        this.description = $.description;
        this.domain = $.domain;
        this.identityProvider = $.identityProvider;
        this.name = $.name;
        this.origin = $.origin;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GlobalaccountTrustConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GlobalaccountTrustConfigurationArgs $;

        public Builder() {
            $ = new GlobalaccountTrustConfigurationArgs();
        }

        public Builder(GlobalaccountTrustConfigurationArgs defaults) {
            $ = new GlobalaccountTrustConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the trust configuration.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the trust configuration.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param domain The tenant&#39;s domain which should be used for user logon.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The tenant&#39;s domain which should be used for user logon.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param identityProvider The name of the Identity Authentication tenant that you want to connect to the global account.
         * 
         * @return builder
         * 
         */
        public Builder identityProvider(Output<String> identityProvider) {
            $.identityProvider = identityProvider;
            return this;
        }

        /**
         * @param identityProvider The name of the Identity Authentication tenant that you want to connect to the global account.
         * 
         * @return builder
         * 
         */
        public Builder identityProvider(String identityProvider) {
            return identityProvider(Output.of(identityProvider));
        }

        /**
         * @param name The display name of the trust configuration.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The display name of the trust configuration.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param origin The origin of the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder origin(@Nullable Output<String> origin) {
            $.origin = origin;
            return this;
        }

        /**
         * @param origin The origin of the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder origin(String origin) {
            return origin(Output.of(origin));
        }

        public GlobalaccountTrustConfigurationArgs build() {
            $.identityProvider = Objects.requireNonNull($.identityProvider, "expected parameter 'identityProvider' to be non-null");
            return $;
        }
    }

}
