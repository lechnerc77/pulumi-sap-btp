// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.lechnerc77.pulumi.btp.btp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubaccountSubscriptionState extends com.pulumi.resources.ResourceArgs {

    public static final SubaccountSubscriptionState Empty = new SubaccountSubscriptionState();

    /**
     * The list of features specific to this plan.
     * 
     */
    @Import(name="additionalPlanFeatures")
    private @Nullable Output<List<String>> additionalPlanFeatures;

    /**
     * @return The list of features specific to this plan.
     * 
     */
    public Optional<Output<List<String>>> additionalPlanFeatures() {
        return Optional.ofNullable(this.additionalPlanFeatures);
    }

    /**
     * The ID returned by XSUAA after the app provider has performed a bind of the multitenant application to an XSUAA service instance.
     * 
     */
    @Import(name="appId")
    private @Nullable Output<String> appId;

    /**
     * @return The ID returned by XSUAA after the app provider has performed a bind of the multitenant application to an XSUAA service instance.
     * 
     */
    public Optional<Output<String>> appId() {
        return Optional.ofNullable(this.appId);
    }

    /**
     * The unique registration name of the deployed multitenant application as defined by the app developer.
     * 
     */
    @Import(name="appName")
    private @Nullable Output<String> appName;

    /**
     * @return The unique registration name of the deployed multitenant application as defined by the app developer.
     * 
     */
    public Optional<Output<String>> appName() {
        return Optional.ofNullable(this.appName);
    }

    /**
     * The authentication provider of the multitenant application. * XSUAA is the SAP Authorization and Trust Management service that defines scopes and permissions for users as tenants at the global account level. * IAS is Identity Authentication Service that defines scopes and permissions for users in zones (common data isolation systems across systems, SaaS tenants, and services).
     * 
     */
    @Import(name="authenticationProvider")
    private @Nullable Output<String> authenticationProvider;

    /**
     * @return The authentication provider of the multitenant application. * XSUAA is the SAP Authorization and Trust Management service that defines scopes and permissions for users as tenants at the global account level. * IAS is Identity Authentication Service that defines scopes and permissions for users in zones (common data isolation systems across systems, SaaS tenants, and services).
     * 
     */
    public Optional<Output<String>> authenticationProvider() {
        return Optional.ofNullable(this.authenticationProvider);
    }

    /**
     * The technical name of the category defined by the app developer to which the multitenant application is grouped in customer-facing UIs.
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return The technical name of the category defined by the app developer to which the multitenant application is grouped in customer-facing UIs.
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * The commercial name of the deployed multitenant application as defined by the app developer.
     * 
     */
    @Import(name="commercialAppName")
    private @Nullable Output<String> commercialAppName;

    /**
     * @return The commercial name of the deployed multitenant application as defined by the app developer.
     * 
     */
    public Optional<Output<String>> commercialAppName() {
        return Optional.ofNullable(this.commercialAppName);
    }

    /**
     * The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     * 
     */
    @Import(name="createdDate")
    private @Nullable Output<String> createdDate;

    /**
     * @return The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     * 
     */
    public Optional<Output<String>> createdDate() {
        return Optional.ofNullable(this.createdDate);
    }

    /**
     * Shows whether the application was developed by a customer. If not, then the application is developed by the cloud operator, such as SAP.
     * 
     */
    @Import(name="customerDeveloped")
    private @Nullable Output<Boolean> customerDeveloped;

    /**
     * @return Shows whether the application was developed by a customer. If not, then the application is developed by the cloud operator, such as SAP.
     * 
     */
    public Optional<Output<Boolean>> customerDeveloped() {
        return Optional.ofNullable(this.customerDeveloped);
    }

    /**
     * The description of the multitenant application for customer-facing UIs.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the multitenant application for customer-facing UIs.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The display name of the application for customer-facing UIs.
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return The display name of the application for customer-facing UIs.
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * The name of the formations solution associated with the multitenant application.
     * 
     */
    @Import(name="formationSolutionName")
    private @Nullable Output<String> formationSolutionName;

    /**
     * @return The name of the formations solution associated with the multitenant application.
     * 
     */
    public Optional<Output<String>> formationSolutionName() {
        return Optional.ofNullable(this.formationSolutionName);
    }

    /**
     * The ID of the associated global account.
     * 
     */
    @Import(name="globalaccountId")
    private @Nullable Output<String> globalaccountId;

    /**
     * @return The ID of the associated global account.
     * 
     */
    public Optional<Output<String>> globalaccountId() {
        return Optional.ofNullable(this.globalaccountId);
    }

    /**
     * The set of words or phrases assigned to the multitenant application subscription.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,List<String>>> labels;

    /**
     * @return The set of words or phrases assigned to the multitenant application subscription.
     * 
     */
    public Optional<Output<Map<String,List<String>>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     * 
     */
    @Import(name="lastModified")
    private @Nullable Output<String> lastModified;

    /**
     * @return The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     * 
     */
    public Optional<Output<String>> lastModified() {
        return Optional.ofNullable(this.lastModified);
    }

    /**
     * The parameters of the subscription as a valid JSON object.
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<String> parameters;

    /**
     * @return The parameters of the subscription as a valid JSON object.
     * 
     */
    public Optional<Output<String>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * The plan name of the application to which the consumer has subscribed.
     * 
     */
    @Import(name="planName")
    private @Nullable Output<String> planName;

    /**
     * @return The plan name of the application to which the consumer has subscribed.
     * 
     */
    public Optional<Output<String>> planName() {
        return Optional.ofNullable(this.planName);
    }

    /**
     * The ID of the landscape-specific environment.
     * 
     */
    @Import(name="platformEntityId")
    private @Nullable Output<String> platformEntityId;

    /**
     * @return The ID of the landscape-specific environment.
     * 
     */
    public Optional<Output<String>> platformEntityId() {
        return Optional.ofNullable(this.platformEntityId);
    }

    /**
     * The total amount the subscribed subaccount is entitled to consume.
     * 
     */
    @Import(name="quota")
    private @Nullable Output<Integer> quota;

    /**
     * @return The total amount the subscribed subaccount is entitled to consume.
     * 
     */
    public Optional<Output<Integer>> quota() {
        return Optional.ofNullable(this.quota);
    }

    /**
     * The subscription state of the subaccount regarding the multitenant application.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The subscription state of the subaccount regarding the multitenant application.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The ID of the subaccount.
     * 
     */
    @Import(name="subaccountId")
    private @Nullable Output<String> subaccountId;

    /**
     * @return The ID of the subaccount.
     * 
     */
    public Optional<Output<String>> subaccountId() {
        return Optional.ofNullable(this.subaccountId);
    }

    /**
     * The ID of the subaccount, which is subscribed to the multitenant application.
     * 
     */
    @Import(name="subscribedSubaccountId")
    private @Nullable Output<String> subscribedSubaccountId;

    /**
     * @return The ID of the subaccount, which is subscribed to the multitenant application.
     * 
     */
    public Optional<Output<String>> subscribedSubaccountId() {
        return Optional.ofNullable(this.subscribedSubaccountId);
    }

    /**
     * The ID of the tenant, which is subscribed to a multitenant application.
     * 
     */
    @Import(name="subscribedTenantId")
    private @Nullable Output<String> subscribedTenantId;

    /**
     * @return The ID of the tenant, which is subscribed to a multitenant application.
     * 
     */
    public Optional<Output<String>> subscribedTenantId() {
        return Optional.ofNullable(this.subscribedTenantId);
    }

    /**
     * The URL for app users to launch the subscribed application.
     * 
     */
    @Import(name="subscriptionUrl")
    private @Nullable Output<String> subscriptionUrl;

    /**
     * @return The URL for app users to launch the subscribed application.
     * 
     */
    public Optional<Output<String>> subscriptionUrl() {
        return Optional.ofNullable(this.subscriptionUrl);
    }

    /**
     * Specifies whether a consumer, whose subaccount is subscribed to the application, can change its subscriptions parameters.
     * 
     */
    @Import(name="supportsParametersUpdates")
    private @Nullable Output<Boolean> supportsParametersUpdates;

    /**
     * @return Specifies whether a consumer, whose subaccount is subscribed to the application, can change its subscriptions parameters.
     * 
     */
    public Optional<Output<Boolean>> supportsParametersUpdates() {
        return Optional.ofNullable(this.supportsParametersUpdates);
    }

    /**
     * Specifies whether a consumer, whose subaccount is subscribed to the application, can change the subscription to a different plan that is available for this application and subaccount.
     * 
     */
    @Import(name="supportsPlanUpdates")
    private @Nullable Output<Boolean> supportsPlanUpdates;

    /**
     * @return Specifies whether a consumer, whose subaccount is subscribed to the application, can change the subscription to a different plan that is available for this application and subaccount.
     * 
     */
    public Optional<Output<Boolean>> supportsPlanUpdates() {
        return Optional.ofNullable(this.supportsPlanUpdates);
    }

    /**
     * The tenant ID of the application provider.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return The tenant ID of the application provider.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private SubaccountSubscriptionState() {}

    private SubaccountSubscriptionState(SubaccountSubscriptionState $) {
        this.additionalPlanFeatures = $.additionalPlanFeatures;
        this.appId = $.appId;
        this.appName = $.appName;
        this.authenticationProvider = $.authenticationProvider;
        this.category = $.category;
        this.commercialAppName = $.commercialAppName;
        this.createdDate = $.createdDate;
        this.customerDeveloped = $.customerDeveloped;
        this.description = $.description;
        this.displayName = $.displayName;
        this.formationSolutionName = $.formationSolutionName;
        this.globalaccountId = $.globalaccountId;
        this.labels = $.labels;
        this.lastModified = $.lastModified;
        this.parameters = $.parameters;
        this.planName = $.planName;
        this.platformEntityId = $.platformEntityId;
        this.quota = $.quota;
        this.state = $.state;
        this.subaccountId = $.subaccountId;
        this.subscribedSubaccountId = $.subscribedSubaccountId;
        this.subscribedTenantId = $.subscribedTenantId;
        this.subscriptionUrl = $.subscriptionUrl;
        this.supportsParametersUpdates = $.supportsParametersUpdates;
        this.supportsPlanUpdates = $.supportsPlanUpdates;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubaccountSubscriptionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubaccountSubscriptionState $;

        public Builder() {
            $ = new SubaccountSubscriptionState();
        }

        public Builder(SubaccountSubscriptionState defaults) {
            $ = new SubaccountSubscriptionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalPlanFeatures The list of features specific to this plan.
         * 
         * @return builder
         * 
         */
        public Builder additionalPlanFeatures(@Nullable Output<List<String>> additionalPlanFeatures) {
            $.additionalPlanFeatures = additionalPlanFeatures;
            return this;
        }

        /**
         * @param additionalPlanFeatures The list of features specific to this plan.
         * 
         * @return builder
         * 
         */
        public Builder additionalPlanFeatures(List<String> additionalPlanFeatures) {
            return additionalPlanFeatures(Output.of(additionalPlanFeatures));
        }

        /**
         * @param additionalPlanFeatures The list of features specific to this plan.
         * 
         * @return builder
         * 
         */
        public Builder additionalPlanFeatures(String... additionalPlanFeatures) {
            return additionalPlanFeatures(List.of(additionalPlanFeatures));
        }

        /**
         * @param appId The ID returned by XSUAA after the app provider has performed a bind of the multitenant application to an XSUAA service instance.
         * 
         * @return builder
         * 
         */
        public Builder appId(@Nullable Output<String> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId The ID returned by XSUAA after the app provider has performed a bind of the multitenant application to an XSUAA service instance.
         * 
         * @return builder
         * 
         */
        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param appName The unique registration name of the deployed multitenant application as defined by the app developer.
         * 
         * @return builder
         * 
         */
        public Builder appName(@Nullable Output<String> appName) {
            $.appName = appName;
            return this;
        }

        /**
         * @param appName The unique registration name of the deployed multitenant application as defined by the app developer.
         * 
         * @return builder
         * 
         */
        public Builder appName(String appName) {
            return appName(Output.of(appName));
        }

        /**
         * @param authenticationProvider The authentication provider of the multitenant application. * XSUAA is the SAP Authorization and Trust Management service that defines scopes and permissions for users as tenants at the global account level. * IAS is Identity Authentication Service that defines scopes and permissions for users in zones (common data isolation systems across systems, SaaS tenants, and services).
         * 
         * @return builder
         * 
         */
        public Builder authenticationProvider(@Nullable Output<String> authenticationProvider) {
            $.authenticationProvider = authenticationProvider;
            return this;
        }

        /**
         * @param authenticationProvider The authentication provider of the multitenant application. * XSUAA is the SAP Authorization and Trust Management service that defines scopes and permissions for users as tenants at the global account level. * IAS is Identity Authentication Service that defines scopes and permissions for users in zones (common data isolation systems across systems, SaaS tenants, and services).
         * 
         * @return builder
         * 
         */
        public Builder authenticationProvider(String authenticationProvider) {
            return authenticationProvider(Output.of(authenticationProvider));
        }

        /**
         * @param category The technical name of the category defined by the app developer to which the multitenant application is grouped in customer-facing UIs.
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category The technical name of the category defined by the app developer to which the multitenant application is grouped in customer-facing UIs.
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param commercialAppName The commercial name of the deployed multitenant application as defined by the app developer.
         * 
         * @return builder
         * 
         */
        public Builder commercialAppName(@Nullable Output<String> commercialAppName) {
            $.commercialAppName = commercialAppName;
            return this;
        }

        /**
         * @param commercialAppName The commercial name of the deployed multitenant application as defined by the app developer.
         * 
         * @return builder
         * 
         */
        public Builder commercialAppName(String commercialAppName) {
            return commercialAppName(Output.of(commercialAppName));
        }

        /**
         * @param createdDate The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
         * 
         * @return builder
         * 
         */
        public Builder createdDate(@Nullable Output<String> createdDate) {
            $.createdDate = createdDate;
            return this;
        }

        /**
         * @param createdDate The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
         * 
         * @return builder
         * 
         */
        public Builder createdDate(String createdDate) {
            return createdDate(Output.of(createdDate));
        }

        /**
         * @param customerDeveloped Shows whether the application was developed by a customer. If not, then the application is developed by the cloud operator, such as SAP.
         * 
         * @return builder
         * 
         */
        public Builder customerDeveloped(@Nullable Output<Boolean> customerDeveloped) {
            $.customerDeveloped = customerDeveloped;
            return this;
        }

        /**
         * @param customerDeveloped Shows whether the application was developed by a customer. If not, then the application is developed by the cloud operator, such as SAP.
         * 
         * @return builder
         * 
         */
        public Builder customerDeveloped(Boolean customerDeveloped) {
            return customerDeveloped(Output.of(customerDeveloped));
        }

        /**
         * @param description The description of the multitenant application for customer-facing UIs.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the multitenant application for customer-facing UIs.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName The display name of the application for customer-facing UIs.
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName The display name of the application for customer-facing UIs.
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param formationSolutionName The name of the formations solution associated with the multitenant application.
         * 
         * @return builder
         * 
         */
        public Builder formationSolutionName(@Nullable Output<String> formationSolutionName) {
            $.formationSolutionName = formationSolutionName;
            return this;
        }

        /**
         * @param formationSolutionName The name of the formations solution associated with the multitenant application.
         * 
         * @return builder
         * 
         */
        public Builder formationSolutionName(String formationSolutionName) {
            return formationSolutionName(Output.of(formationSolutionName));
        }

        /**
         * @param globalaccountId The ID of the associated global account.
         * 
         * @return builder
         * 
         */
        public Builder globalaccountId(@Nullable Output<String> globalaccountId) {
            $.globalaccountId = globalaccountId;
            return this;
        }

        /**
         * @param globalaccountId The ID of the associated global account.
         * 
         * @return builder
         * 
         */
        public Builder globalaccountId(String globalaccountId) {
            return globalaccountId(Output.of(globalaccountId));
        }

        /**
         * @param labels The set of words or phrases assigned to the multitenant application subscription.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,List<String>>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels The set of words or phrases assigned to the multitenant application subscription.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,List<String>> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param lastModified The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
         * 
         * @return builder
         * 
         */
        public Builder lastModified(@Nullable Output<String> lastModified) {
            $.lastModified = lastModified;
            return this;
        }

        /**
         * @param lastModified The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
         * 
         * @return builder
         * 
         */
        public Builder lastModified(String lastModified) {
            return lastModified(Output.of(lastModified));
        }

        /**
         * @param parameters The parameters of the subscription as a valid JSON object.
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<String> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters The parameters of the subscription as a valid JSON object.
         * 
         * @return builder
         * 
         */
        public Builder parameters(String parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param planName The plan name of the application to which the consumer has subscribed.
         * 
         * @return builder
         * 
         */
        public Builder planName(@Nullable Output<String> planName) {
            $.planName = planName;
            return this;
        }

        /**
         * @param planName The plan name of the application to which the consumer has subscribed.
         * 
         * @return builder
         * 
         */
        public Builder planName(String planName) {
            return planName(Output.of(planName));
        }

        /**
         * @param platformEntityId The ID of the landscape-specific environment.
         * 
         * @return builder
         * 
         */
        public Builder platformEntityId(@Nullable Output<String> platformEntityId) {
            $.platformEntityId = platformEntityId;
            return this;
        }

        /**
         * @param platformEntityId The ID of the landscape-specific environment.
         * 
         * @return builder
         * 
         */
        public Builder platformEntityId(String platformEntityId) {
            return platformEntityId(Output.of(platformEntityId));
        }

        /**
         * @param quota The total amount the subscribed subaccount is entitled to consume.
         * 
         * @return builder
         * 
         */
        public Builder quota(@Nullable Output<Integer> quota) {
            $.quota = quota;
            return this;
        }

        /**
         * @param quota The total amount the subscribed subaccount is entitled to consume.
         * 
         * @return builder
         * 
         */
        public Builder quota(Integer quota) {
            return quota(Output.of(quota));
        }

        /**
         * @param state The subscription state of the subaccount regarding the multitenant application.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The subscription state of the subaccount regarding the multitenant application.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param subaccountId The ID of the subaccount.
         * 
         * @return builder
         * 
         */
        public Builder subaccountId(@Nullable Output<String> subaccountId) {
            $.subaccountId = subaccountId;
            return this;
        }

        /**
         * @param subaccountId The ID of the subaccount.
         * 
         * @return builder
         * 
         */
        public Builder subaccountId(String subaccountId) {
            return subaccountId(Output.of(subaccountId));
        }

        /**
         * @param subscribedSubaccountId The ID of the subaccount, which is subscribed to the multitenant application.
         * 
         * @return builder
         * 
         */
        public Builder subscribedSubaccountId(@Nullable Output<String> subscribedSubaccountId) {
            $.subscribedSubaccountId = subscribedSubaccountId;
            return this;
        }

        /**
         * @param subscribedSubaccountId The ID of the subaccount, which is subscribed to the multitenant application.
         * 
         * @return builder
         * 
         */
        public Builder subscribedSubaccountId(String subscribedSubaccountId) {
            return subscribedSubaccountId(Output.of(subscribedSubaccountId));
        }

        /**
         * @param subscribedTenantId The ID of the tenant, which is subscribed to a multitenant application.
         * 
         * @return builder
         * 
         */
        public Builder subscribedTenantId(@Nullable Output<String> subscribedTenantId) {
            $.subscribedTenantId = subscribedTenantId;
            return this;
        }

        /**
         * @param subscribedTenantId The ID of the tenant, which is subscribed to a multitenant application.
         * 
         * @return builder
         * 
         */
        public Builder subscribedTenantId(String subscribedTenantId) {
            return subscribedTenantId(Output.of(subscribedTenantId));
        }

        /**
         * @param subscriptionUrl The URL for app users to launch the subscribed application.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionUrl(@Nullable Output<String> subscriptionUrl) {
            $.subscriptionUrl = subscriptionUrl;
            return this;
        }

        /**
         * @param subscriptionUrl The URL for app users to launch the subscribed application.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionUrl(String subscriptionUrl) {
            return subscriptionUrl(Output.of(subscriptionUrl));
        }

        /**
         * @param supportsParametersUpdates Specifies whether a consumer, whose subaccount is subscribed to the application, can change its subscriptions parameters.
         * 
         * @return builder
         * 
         */
        public Builder supportsParametersUpdates(@Nullable Output<Boolean> supportsParametersUpdates) {
            $.supportsParametersUpdates = supportsParametersUpdates;
            return this;
        }

        /**
         * @param supportsParametersUpdates Specifies whether a consumer, whose subaccount is subscribed to the application, can change its subscriptions parameters.
         * 
         * @return builder
         * 
         */
        public Builder supportsParametersUpdates(Boolean supportsParametersUpdates) {
            return supportsParametersUpdates(Output.of(supportsParametersUpdates));
        }

        /**
         * @param supportsPlanUpdates Specifies whether a consumer, whose subaccount is subscribed to the application, can change the subscription to a different plan that is available for this application and subaccount.
         * 
         * @return builder
         * 
         */
        public Builder supportsPlanUpdates(@Nullable Output<Boolean> supportsPlanUpdates) {
            $.supportsPlanUpdates = supportsPlanUpdates;
            return this;
        }

        /**
         * @param supportsPlanUpdates Specifies whether a consumer, whose subaccount is subscribed to the application, can change the subscription to a different plan that is available for this application and subaccount.
         * 
         * @return builder
         * 
         */
        public Builder supportsPlanUpdates(Boolean supportsPlanUpdates) {
            return supportsPlanUpdates(Output.of(supportsPlanUpdates));
        }

        /**
         * @param tenantId The tenant ID of the application provider.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId The tenant ID of the application provider.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public SubaccountSubscriptionState build() {
            return $;
        }
    }

}
