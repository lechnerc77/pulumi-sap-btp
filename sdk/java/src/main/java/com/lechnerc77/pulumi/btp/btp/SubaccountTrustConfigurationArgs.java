// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.lechnerc77.pulumi.btp.btp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubaccountTrustConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final SubaccountTrustConfigurationArgs Empty = new SubaccountTrustConfigurationArgs();

    /**
     * Determines that any user from the tenant can log in. If not set, only the ones who already have a shadow user can log in.
     * 
     */
    @Import(name="autoCreateShadowUsers")
    private @Nullable Output<Boolean> autoCreateShadowUsers;

    /**
     * @return Determines that any user from the tenant can log in. If not set, only the ones who already have a shadow user can log in.
     * 
     */
    public Optional<Output<Boolean>> autoCreateShadowUsers() {
        return Optional.ofNullable(this.autoCreateShadowUsers);
    }

    /**
     * Determines that end users can choose the trust configuration for login. If not set, the trust configuration can remain active, however only application users that explicitly specify the origin key can use if for login.
     * 
     */
    @Import(name="availableForUserLogon")
    private @Nullable Output<Boolean> availableForUserLogon;

    /**
     * @return Determines that end users can choose the trust configuration for login. If not set, the trust configuration can remain active, however only application users that explicitly specify the origin key can use if for login.
     * 
     */
    public Optional<Output<Boolean>> availableForUserLogon() {
        return Optional.ofNullable(this.availableForUserLogon);
    }

    /**
     * Description of the trust configuration.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the trust configuration.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The tenant&#39;s domain which should be used for user logon.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return The tenant&#39;s domain which should be used for user logon.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * The name of the Identity Authentication tenant that you want to connect to the subaccount.
     * 
     */
    @Import(name="identityProvider", required=true)
    private Output<String> identityProvider;

    /**
     * @return The name of the Identity Authentication tenant that you want to connect to the subaccount.
     * 
     */
    public Output<String> identityProvider() {
        return this.identityProvider;
    }

    /**
     * Short string that helps users to identify the link for login.
     * 
     */
    @Import(name="linkText")
    private @Nullable Output<String> linkText;

    /**
     * @return Short string that helps users to identify the link for login.
     * 
     */
    public Optional<Output<String>> linkText() {
        return Optional.ofNullable(this.linkText);
    }

    /**
     * The display name of the trust configuration.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The display name of the trust configuration.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Determines whether the identity provider is currently &#39;active&#39; or &#39;inactive&#39;.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Determines whether the identity provider is currently &#39;active&#39; or &#39;inactive&#39;.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * The ID of the subaccount.
     * 
     */
    @Import(name="subaccountId", required=true)
    private Output<String> subaccountId;

    /**
     * @return The ID of the subaccount.
     * 
     */
    public Output<String> subaccountId() {
        return this.subaccountId;
    }

    private SubaccountTrustConfigurationArgs() {}

    private SubaccountTrustConfigurationArgs(SubaccountTrustConfigurationArgs $) {
        this.autoCreateShadowUsers = $.autoCreateShadowUsers;
        this.availableForUserLogon = $.availableForUserLogon;
        this.description = $.description;
        this.domain = $.domain;
        this.identityProvider = $.identityProvider;
        this.linkText = $.linkText;
        this.name = $.name;
        this.status = $.status;
        this.subaccountId = $.subaccountId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubaccountTrustConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubaccountTrustConfigurationArgs $;

        public Builder() {
            $ = new SubaccountTrustConfigurationArgs();
        }

        public Builder(SubaccountTrustConfigurationArgs defaults) {
            $ = new SubaccountTrustConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoCreateShadowUsers Determines that any user from the tenant can log in. If not set, only the ones who already have a shadow user can log in.
         * 
         * @return builder
         * 
         */
        public Builder autoCreateShadowUsers(@Nullable Output<Boolean> autoCreateShadowUsers) {
            $.autoCreateShadowUsers = autoCreateShadowUsers;
            return this;
        }

        /**
         * @param autoCreateShadowUsers Determines that any user from the tenant can log in. If not set, only the ones who already have a shadow user can log in.
         * 
         * @return builder
         * 
         */
        public Builder autoCreateShadowUsers(Boolean autoCreateShadowUsers) {
            return autoCreateShadowUsers(Output.of(autoCreateShadowUsers));
        }

        /**
         * @param availableForUserLogon Determines that end users can choose the trust configuration for login. If not set, the trust configuration can remain active, however only application users that explicitly specify the origin key can use if for login.
         * 
         * @return builder
         * 
         */
        public Builder availableForUserLogon(@Nullable Output<Boolean> availableForUserLogon) {
            $.availableForUserLogon = availableForUserLogon;
            return this;
        }

        /**
         * @param availableForUserLogon Determines that end users can choose the trust configuration for login. If not set, the trust configuration can remain active, however only application users that explicitly specify the origin key can use if for login.
         * 
         * @return builder
         * 
         */
        public Builder availableForUserLogon(Boolean availableForUserLogon) {
            return availableForUserLogon(Output.of(availableForUserLogon));
        }

        /**
         * @param description Description of the trust configuration.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the trust configuration.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param domain The tenant&#39;s domain which should be used for user logon.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain The tenant&#39;s domain which should be used for user logon.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param identityProvider The name of the Identity Authentication tenant that you want to connect to the subaccount.
         * 
         * @return builder
         * 
         */
        public Builder identityProvider(Output<String> identityProvider) {
            $.identityProvider = identityProvider;
            return this;
        }

        /**
         * @param identityProvider The name of the Identity Authentication tenant that you want to connect to the subaccount.
         * 
         * @return builder
         * 
         */
        public Builder identityProvider(String identityProvider) {
            return identityProvider(Output.of(identityProvider));
        }

        /**
         * @param linkText Short string that helps users to identify the link for login.
         * 
         * @return builder
         * 
         */
        public Builder linkText(@Nullable Output<String> linkText) {
            $.linkText = linkText;
            return this;
        }

        /**
         * @param linkText Short string that helps users to identify the link for login.
         * 
         * @return builder
         * 
         */
        public Builder linkText(String linkText) {
            return linkText(Output.of(linkText));
        }

        /**
         * @param name The display name of the trust configuration.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The display name of the trust configuration.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param status Determines whether the identity provider is currently &#39;active&#39; or &#39;inactive&#39;.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Determines whether the identity provider is currently &#39;active&#39; or &#39;inactive&#39;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param subaccountId The ID of the subaccount.
         * 
         * @return builder
         * 
         */
        public Builder subaccountId(Output<String> subaccountId) {
            $.subaccountId = subaccountId;
            return this;
        }

        /**
         * @param subaccountId The ID of the subaccount.
         * 
         * @return builder
         * 
         */
        public Builder subaccountId(String subaccountId) {
            return subaccountId(Output.of(subaccountId));
        }

        public SubaccountTrustConfigurationArgs build() {
            $.identityProvider = Objects.requireNonNull($.identityProvider, "expected parameter 'identityProvider' to be non-null");
            $.subaccountId = Objects.requireNonNull($.subaccountId, "expected parameter 'subaccountId' to be non-null");
            return $;
        }
    }

}
