// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.lechnerc77.pulumi.btp.btp.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSubaccountEnvironmentsValue {
    /**
     * @return The availability level of the environment broker.
     * 
     */
    private String availabilityLevel;
    /**
     * @return The description of the environment.
     * 
     */
    private String description;
    /**
     * @return The type of environment that is available (for example: cloudfoundry).
     * 
     */
    private String environmentType;
    /**
     * @return The landscape label of the environment broker.
     * 
     */
    private String landscapeLabel;
    /**
     * @return The name of the service plan for the available environment.
     * 
     */
    private String planName;
    /**
     * @return Specifies if the consumer can change the plan of an existing instance of the environment.
     * 
     */
    private Boolean planUpdateable;
    /**
     * @return The create schema of the environment broker.
     * 
     */
    private String schemaCreate;
    /**
     * @return The update schema of the environment broker.
     * 
     */
    private String schemaUpdate;
    /**
     * @return The short description of the service.
     * 
     */
    private String serviceDescription;
    /**
     * @return The display name of the service.
     * 
     */
    private String serviceDisplayName;
    /**
     * @return The name of the service offered in the catalog of the corresponding environment broker (for example: cloudfoundry).
     * 
     */
    private String serviceName;
    /**
     * @return The technical key of the corresponding environment broker.
     * 
     */
    private String technicalKey;

    private GetSubaccountEnvironmentsValue() {}
    /**
     * @return The availability level of the environment broker.
     * 
     */
    public String availabilityLevel() {
        return this.availabilityLevel;
    }
    /**
     * @return The description of the environment.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The type of environment that is available (for example: cloudfoundry).
     * 
     */
    public String environmentType() {
        return this.environmentType;
    }
    /**
     * @return The landscape label of the environment broker.
     * 
     */
    public String landscapeLabel() {
        return this.landscapeLabel;
    }
    /**
     * @return The name of the service plan for the available environment.
     * 
     */
    public String planName() {
        return this.planName;
    }
    /**
     * @return Specifies if the consumer can change the plan of an existing instance of the environment.
     * 
     */
    public Boolean planUpdateable() {
        return this.planUpdateable;
    }
    /**
     * @return The create schema of the environment broker.
     * 
     */
    public String schemaCreate() {
        return this.schemaCreate;
    }
    /**
     * @return The update schema of the environment broker.
     * 
     */
    public String schemaUpdate() {
        return this.schemaUpdate;
    }
    /**
     * @return The short description of the service.
     * 
     */
    public String serviceDescription() {
        return this.serviceDescription;
    }
    /**
     * @return The display name of the service.
     * 
     */
    public String serviceDisplayName() {
        return this.serviceDisplayName;
    }
    /**
     * @return The name of the service offered in the catalog of the corresponding environment broker (for example: cloudfoundry).
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return The technical key of the corresponding environment broker.
     * 
     */
    public String technicalKey() {
        return this.technicalKey;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubaccountEnvironmentsValue defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String availabilityLevel;
        private String description;
        private String environmentType;
        private String landscapeLabel;
        private String planName;
        private Boolean planUpdateable;
        private String schemaCreate;
        private String schemaUpdate;
        private String serviceDescription;
        private String serviceDisplayName;
        private String serviceName;
        private String technicalKey;
        public Builder() {}
        public Builder(GetSubaccountEnvironmentsValue defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityLevel = defaults.availabilityLevel;
    	      this.description = defaults.description;
    	      this.environmentType = defaults.environmentType;
    	      this.landscapeLabel = defaults.landscapeLabel;
    	      this.planName = defaults.planName;
    	      this.planUpdateable = defaults.planUpdateable;
    	      this.schemaCreate = defaults.schemaCreate;
    	      this.schemaUpdate = defaults.schemaUpdate;
    	      this.serviceDescription = defaults.serviceDescription;
    	      this.serviceDisplayName = defaults.serviceDisplayName;
    	      this.serviceName = defaults.serviceName;
    	      this.technicalKey = defaults.technicalKey;
        }

        @CustomType.Setter
        public Builder availabilityLevel(String availabilityLevel) {
            this.availabilityLevel = Objects.requireNonNull(availabilityLevel);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder environmentType(String environmentType) {
            this.environmentType = Objects.requireNonNull(environmentType);
            return this;
        }
        @CustomType.Setter
        public Builder landscapeLabel(String landscapeLabel) {
            this.landscapeLabel = Objects.requireNonNull(landscapeLabel);
            return this;
        }
        @CustomType.Setter
        public Builder planName(String planName) {
            this.planName = Objects.requireNonNull(planName);
            return this;
        }
        @CustomType.Setter
        public Builder planUpdateable(Boolean planUpdateable) {
            this.planUpdateable = Objects.requireNonNull(planUpdateable);
            return this;
        }
        @CustomType.Setter
        public Builder schemaCreate(String schemaCreate) {
            this.schemaCreate = Objects.requireNonNull(schemaCreate);
            return this;
        }
        @CustomType.Setter
        public Builder schemaUpdate(String schemaUpdate) {
            this.schemaUpdate = Objects.requireNonNull(schemaUpdate);
            return this;
        }
        @CustomType.Setter
        public Builder serviceDescription(String serviceDescription) {
            this.serviceDescription = Objects.requireNonNull(serviceDescription);
            return this;
        }
        @CustomType.Setter
        public Builder serviceDisplayName(String serviceDisplayName) {
            this.serviceDisplayName = Objects.requireNonNull(serviceDisplayName);
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            this.serviceName = Objects.requireNonNull(serviceName);
            return this;
        }
        @CustomType.Setter
        public Builder technicalKey(String technicalKey) {
            this.technicalKey = Objects.requireNonNull(technicalKey);
            return this;
        }
        public GetSubaccountEnvironmentsValue build() {
            final var _resultValue = new GetSubaccountEnvironmentsValue();
            _resultValue.availabilityLevel = availabilityLevel;
            _resultValue.description = description;
            _resultValue.environmentType = environmentType;
            _resultValue.landscapeLabel = landscapeLabel;
            _resultValue.planName = planName;
            _resultValue.planUpdateable = planUpdateable;
            _resultValue.schemaCreate = schemaCreate;
            _resultValue.schemaUpdate = schemaUpdate;
            _resultValue.serviceDescription = serviceDescription;
            _resultValue.serviceDisplayName = serviceDisplayName;
            _resultValue.serviceName = serviceName;
            _resultValue.technicalKey = technicalKey;
            return _resultValue;
        }
    }
}
