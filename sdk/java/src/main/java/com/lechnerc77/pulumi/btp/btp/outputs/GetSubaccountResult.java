// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.lechnerc77.pulumi.btp.btp.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetSubaccountResult {
    /**
     * @return Shows whether the subaccount can use beta services and applications.
     * 
     */
    private Boolean betaEnabled;
    /**
     * @return The details of the user that created the subaccount.
     * 
     */
    private String createdBy;
    /**
     * @return The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     * 
     */
    private String createdDate;
    /**
     * @return The description of the subaccount.
     * 
     */
    private String description;
    /**
     * @return The ID of the subaccount.
     * 
     */
    private String id;
    /**
     * @return Set of words or phrases assigned to the subaccount.
     * 
     */
    private Map<String,List<String>> labels;
    /**
     * @return The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     * 
     */
    private String lastModified;
    /**
     * @return A descriptive name of the subaccount for customer-facing UIs.
     * 
     */
    private String name;
    /**
     * @return The features of parent entity of the subaccount.
     * 
     */
    private List<String> parentFeatures;
    /**
     * @return The ID of the subaccount’s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
     * 
     */
    private String parentId;
    /**
     * @return The region in which the subaccount was created.
     * 
     */
    private String region;
    /**
     * @return The current state of the subaccount. Possible values are:
     * 
     */
    private String state;
    private String subdomain;
    private String usage;

    private GetSubaccountResult() {}
    /**
     * @return Shows whether the subaccount can use beta services and applications.
     * 
     */
    public Boolean betaEnabled() {
        return this.betaEnabled;
    }
    /**
     * @return The details of the user that created the subaccount.
     * 
     */
    public String createdBy() {
        return this.createdBy;
    }
    /**
     * @return The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     * 
     */
    public String createdDate() {
        return this.createdDate;
    }
    /**
     * @return The description of the subaccount.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The ID of the subaccount.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Set of words or phrases assigned to the subaccount.
     * 
     */
    public Map<String,List<String>> labels() {
        return this.labels;
    }
    /**
     * @return The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     * 
     */
    public String lastModified() {
        return this.lastModified;
    }
    /**
     * @return A descriptive name of the subaccount for customer-facing UIs.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The features of parent entity of the subaccount.
     * 
     */
    public List<String> parentFeatures() {
        return this.parentFeatures;
    }
    /**
     * @return The ID of the subaccount’s parent entity. If the subaccount is located directly in the global account (not in a directory), then this is the ID of the global account.
     * 
     */
    public String parentId() {
        return this.parentId;
    }
    /**
     * @return The region in which the subaccount was created.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return The current state of the subaccount. Possible values are:
     * 
     */
    public String state() {
        return this.state;
    }
    public String subdomain() {
        return this.subdomain;
    }
    public String usage() {
        return this.usage;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubaccountResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean betaEnabled;
        private String createdBy;
        private String createdDate;
        private String description;
        private String id;
        private Map<String,List<String>> labels;
        private String lastModified;
        private String name;
        private List<String> parentFeatures;
        private String parentId;
        private String region;
        private String state;
        private String subdomain;
        private String usage;
        public Builder() {}
        public Builder(GetSubaccountResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.betaEnabled = defaults.betaEnabled;
    	      this.createdBy = defaults.createdBy;
    	      this.createdDate = defaults.createdDate;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.labels = defaults.labels;
    	      this.lastModified = defaults.lastModified;
    	      this.name = defaults.name;
    	      this.parentFeatures = defaults.parentFeatures;
    	      this.parentId = defaults.parentId;
    	      this.region = defaults.region;
    	      this.state = defaults.state;
    	      this.subdomain = defaults.subdomain;
    	      this.usage = defaults.usage;
        }

        @CustomType.Setter
        public Builder betaEnabled(Boolean betaEnabled) {
            this.betaEnabled = Objects.requireNonNull(betaEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder createdBy(String createdBy) {
            this.createdBy = Objects.requireNonNull(createdBy);
            return this;
        }
        @CustomType.Setter
        public Builder createdDate(String createdDate) {
            this.createdDate = Objects.requireNonNull(createdDate);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder labels(Map<String,List<String>> labels) {
            this.labels = Objects.requireNonNull(labels);
            return this;
        }
        @CustomType.Setter
        public Builder lastModified(String lastModified) {
            this.lastModified = Objects.requireNonNull(lastModified);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder parentFeatures(List<String> parentFeatures) {
            this.parentFeatures = Objects.requireNonNull(parentFeatures);
            return this;
        }
        public Builder parentFeatures(String... parentFeatures) {
            return parentFeatures(List.of(parentFeatures));
        }
        @CustomType.Setter
        public Builder parentId(String parentId) {
            this.parentId = Objects.requireNonNull(parentId);
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            this.region = Objects.requireNonNull(region);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder subdomain(String subdomain) {
            this.subdomain = Objects.requireNonNull(subdomain);
            return this;
        }
        @CustomType.Setter
        public Builder usage(String usage) {
            this.usage = Objects.requireNonNull(usage);
            return this;
        }
        public GetSubaccountResult build() {
            final var _resultValue = new GetSubaccountResult();
            _resultValue.betaEnabled = betaEnabled;
            _resultValue.createdBy = createdBy;
            _resultValue.createdDate = createdDate;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.labels = labels;
            _resultValue.lastModified = lastModified;
            _resultValue.name = name;
            _resultValue.parentFeatures = parentFeatures;
            _resultValue.parentId = parentId;
            _resultValue.region = region;
            _resultValue.state = state;
            _resultValue.subdomain = subdomain;
            _resultValue.usage = usage;
            return _resultValue;
        }
    }
}
