// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.lechnerc77.pulumi.btp.btp;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DirectoryArgs extends com.pulumi.resources.ResourceArgs {

    public static final DirectoryArgs Empty = new DirectoryArgs();

    /**
     * A description of the directory.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the directory.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The features that are enabled for the directory. Possible values are:
     * 
     */
    @Import(name="features")
    private @Nullable Output<List<String>> features;

    /**
     * @return The features that are enabled for the directory. Possible values are:
     * 
     */
    public Optional<Output<List<String>>> features() {
        return Optional.ofNullable(this.features);
    }

    /**
     * Contains information about the labels assigned to a specified global account. Labels are represented in a JSON array of
     * key-value pairs; each key has up to 10 corresponding values.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,List<String>>> labels;

    /**
     * @return Contains information about the labels assigned to a specified global account. Labels are represented in a JSON array of
     * key-value pairs; each key has up to 10 corresponding values.
     * 
     */
    public Optional<Output<Map<String,List<String>>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The display name of the directory.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The display name of the directory.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the directory&#39;s parent entity. Typically this is the global account.
     * 
     */
    @Import(name="parentId")
    private @Nullable Output<String> parentId;

    /**
     * @return The ID of the directory&#39;s parent entity. Typically this is the global account.
     * 
     */
    public Optional<Output<String>> parentId() {
        return Optional.ofNullable(this.parentId);
    }

    /**
     * Applies only to directories that have the user authorization management feature enabled. The subdomain becomes part of
     * the path used to access the authorization tenant of the directory. It has to be unique within the defined region.
     * 
     */
    @Import(name="subdomain")
    private @Nullable Output<String> subdomain;

    /**
     * @return Applies only to directories that have the user authorization management feature enabled. The subdomain becomes part of
     * the path used to access the authorization tenant of the directory. It has to be unique within the defined region.
     * 
     */
    public Optional<Output<String>> subdomain() {
        return Optional.ofNullable(this.subdomain);
    }

    private DirectoryArgs() {}

    private DirectoryArgs(DirectoryArgs $) {
        this.description = $.description;
        this.features = $.features;
        this.labels = $.labels;
        this.name = $.name;
        this.parentId = $.parentId;
        this.subdomain = $.subdomain;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DirectoryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DirectoryArgs $;

        public Builder() {
            $ = new DirectoryArgs();
        }

        public Builder(DirectoryArgs defaults) {
            $ = new DirectoryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description of the directory.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the directory.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param features The features that are enabled for the directory. Possible values are:
         * 
         * @return builder
         * 
         */
        public Builder features(@Nullable Output<List<String>> features) {
            $.features = features;
            return this;
        }

        /**
         * @param features The features that are enabled for the directory. Possible values are:
         * 
         * @return builder
         * 
         */
        public Builder features(List<String> features) {
            return features(Output.of(features));
        }

        /**
         * @param features The features that are enabled for the directory. Possible values are:
         * 
         * @return builder
         * 
         */
        public Builder features(String... features) {
            return features(List.of(features));
        }

        /**
         * @param labels Contains information about the labels assigned to a specified global account. Labels are represented in a JSON array of
         * key-value pairs; each key has up to 10 corresponding values.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,List<String>>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Contains information about the labels assigned to a specified global account. Labels are represented in a JSON array of
         * key-value pairs; each key has up to 10 corresponding values.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,List<String>> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param name The display name of the directory.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The display name of the directory.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parentId The ID of the directory&#39;s parent entity. Typically this is the global account.
         * 
         * @return builder
         * 
         */
        public Builder parentId(@Nullable Output<String> parentId) {
            $.parentId = parentId;
            return this;
        }

        /**
         * @param parentId The ID of the directory&#39;s parent entity. Typically this is the global account.
         * 
         * @return builder
         * 
         */
        public Builder parentId(String parentId) {
            return parentId(Output.of(parentId));
        }

        /**
         * @param subdomain Applies only to directories that have the user authorization management feature enabled. The subdomain becomes part of
         * the path used to access the authorization tenant of the directory. It has to be unique within the defined region.
         * 
         * @return builder
         * 
         */
        public Builder subdomain(@Nullable Output<String> subdomain) {
            $.subdomain = subdomain;
            return this;
        }

        /**
         * @param subdomain Applies only to directories that have the user authorization management feature enabled. The subdomain becomes part of
         * the path used to access the authorization tenant of the directory. It has to be unique within the defined region.
         * 
         * @return builder
         * 
         */
        public Builder subdomain(String subdomain) {
            return subdomain(Output.of(subdomain));
        }

        public DirectoryArgs build() {
            return $;
        }
    }

}
