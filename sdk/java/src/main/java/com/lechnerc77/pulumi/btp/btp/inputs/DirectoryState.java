// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.lechnerc77.pulumi.btp.btp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DirectoryState extends com.pulumi.resources.ResourceArgs {

    public static final DirectoryState Empty = new DirectoryState();

    /**
     * The details of the user that created the directory.
     * 
     */
    @Import(name="createdBy")
    private @Nullable Output<String> createdBy;

    /**
     * @return The details of the user that created the directory.
     * 
     */
    public Optional<Output<String>> createdBy() {
        return Optional.ofNullable(this.createdBy);
    }

    /**
     * The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     * 
     */
    @Import(name="createdDate")
    private @Nullable Output<String> createdDate;

    /**
     * @return The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     * 
     */
    public Optional<Output<String>> createdDate() {
        return Optional.ofNullable(this.createdDate);
    }

    /**
     * A description of the directory.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the directory.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The features that are enabled for the directory. Possible values are:
     * 
     */
    @Import(name="features")
    private @Nullable Output<List<String>> features;

    /**
     * @return The features that are enabled for the directory. Possible values are:
     * 
     */
    public Optional<Output<List<String>>> features() {
        return Optional.ofNullable(this.features);
    }

    /**
     * Contains information about the labels assigned to a specified global account. Labels are represented in a JSON array of
     * key-value pairs; each key has up to 10 corresponding values.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<Map<String,List<String>>> labels;

    /**
     * @return Contains information about the labels assigned to a specified global account. Labels are represented in a JSON array of
     * key-value pairs; each key has up to 10 corresponding values.
     * 
     */
    public Optional<Output<Map<String,List<String>>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     * 
     */
    @Import(name="lastModified")
    private @Nullable Output<String> lastModified;

    /**
     * @return The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
     * 
     */
    public Optional<Output<String>> lastModified() {
        return Optional.ofNullable(this.lastModified);
    }

    /**
     * The display name of the directory.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The display name of the directory.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the directory&#39;s parent entity. Typically this is the global account.
     * 
     */
    @Import(name="parentId")
    private @Nullable Output<String> parentId;

    /**
     * @return The ID of the directory&#39;s parent entity. Typically this is the global account.
     * 
     */
    public Optional<Output<String>> parentId() {
        return Optional.ofNullable(this.parentId);
    }

    /**
     * The current state of the directory. Possible values are: | value | description | | --- | --- | | `OK` | The CRUD
     * operation or series of operations completed successfully. | | `STARTED` | CRUD operation on an entity has started. | |
     * `CREATING` | Creating entity operation is in progress. | | `UPDATING` | Updating entity operation is in progress. | |
     * `MOVING` | Moving entity operation is in progress. | | `PROCESSING` | A series of operations related to the entity is in
     * progress. | | `DELETING` | Deleting entity operation is in progress. | | `PENDING REVIEW` | The processing operation has
     * been stopped for reviewing and can be restarted by the operator. | | `CANCELLED` | The operation or processing was
     * canceled by the operator. | | `CREATION_FAILED` | The creation operation failed, and the entity was not created or was
     * created but cannot be used. | | `UPDATE_FAILED` | The update operation failed, and the entity was not updated. | |
     * `PROCESSING_FAILED` | The processing operations failed. | | `DELETION_FAILED` | The delete operation failed, and the
     * entity was not deleted. | | `MOVE_FAILED` | Entity could not be moved to a different location. | | `MIGRATING` |
     * Migrating entity from Neo to Cloud Foundry. |
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current state of the directory. Possible values are: | value | description | | --- | --- | | `OK` | The CRUD
     * operation or series of operations completed successfully. | | `STARTED` | CRUD operation on an entity has started. | |
     * `CREATING` | Creating entity operation is in progress. | | `UPDATING` | Updating entity operation is in progress. | |
     * `MOVING` | Moving entity operation is in progress. | | `PROCESSING` | A series of operations related to the entity is in
     * progress. | | `DELETING` | Deleting entity operation is in progress. | | `PENDING REVIEW` | The processing operation has
     * been stopped for reviewing and can be restarted by the operator. | | `CANCELLED` | The operation or processing was
     * canceled by the operator. | | `CREATION_FAILED` | The creation operation failed, and the entity was not created or was
     * created but cannot be used. | | `UPDATE_FAILED` | The update operation failed, and the entity was not updated. | |
     * `PROCESSING_FAILED` | The processing operations failed. | | `DELETION_FAILED` | The delete operation failed, and the
     * entity was not deleted. | | `MOVE_FAILED` | Entity could not be moved to a different location. | | `MIGRATING` |
     * Migrating entity from Neo to Cloud Foundry. |
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Applies only to directories that have the user authorization management feature enabled. The subdomain becomes part of
     * the path used to access the authorization tenant of the directory. It has to be unique within the defined region.
     * 
     */
    @Import(name="subdomain")
    private @Nullable Output<String> subdomain;

    /**
     * @return Applies only to directories that have the user authorization management feature enabled. The subdomain becomes part of
     * the path used to access the authorization tenant of the directory. It has to be unique within the defined region.
     * 
     */
    public Optional<Output<String>> subdomain() {
        return Optional.ofNullable(this.subdomain);
    }

    private DirectoryState() {}

    private DirectoryState(DirectoryState $) {
        this.createdBy = $.createdBy;
        this.createdDate = $.createdDate;
        this.description = $.description;
        this.features = $.features;
        this.labels = $.labels;
        this.lastModified = $.lastModified;
        this.name = $.name;
        this.parentId = $.parentId;
        this.state = $.state;
        this.subdomain = $.subdomain;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DirectoryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DirectoryState $;

        public Builder() {
            $ = new DirectoryState();
        }

        public Builder(DirectoryState defaults) {
            $ = new DirectoryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdBy The details of the user that created the directory.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(@Nullable Output<String> createdBy) {
            $.createdBy = createdBy;
            return this;
        }

        /**
         * @param createdBy The details of the user that created the directory.
         * 
         * @return builder
         * 
         */
        public Builder createdBy(String createdBy) {
            return createdBy(Output.of(createdBy));
        }

        /**
         * @param createdDate The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
         * 
         * @return builder
         * 
         */
        public Builder createdDate(@Nullable Output<String> createdDate) {
            $.createdDate = createdDate;
            return this;
        }

        /**
         * @param createdDate The date and time when the resource was created in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
         * 
         * @return builder
         * 
         */
        public Builder createdDate(String createdDate) {
            return createdDate(Output.of(createdDate));
        }

        /**
         * @param description A description of the directory.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the directory.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param features The features that are enabled for the directory. Possible values are:
         * 
         * @return builder
         * 
         */
        public Builder features(@Nullable Output<List<String>> features) {
            $.features = features;
            return this;
        }

        /**
         * @param features The features that are enabled for the directory. Possible values are:
         * 
         * @return builder
         * 
         */
        public Builder features(List<String> features) {
            return features(Output.of(features));
        }

        /**
         * @param features The features that are enabled for the directory. Possible values are:
         * 
         * @return builder
         * 
         */
        public Builder features(String... features) {
            return features(List.of(features));
        }

        /**
         * @param labels Contains information about the labels assigned to a specified global account. Labels are represented in a JSON array of
         * key-value pairs; each key has up to 10 corresponding values.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<Map<String,List<String>>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Contains information about the labels assigned to a specified global account. Labels are represented in a JSON array of
         * key-value pairs; each key has up to 10 corresponding values.
         * 
         * @return builder
         * 
         */
        public Builder labels(Map<String,List<String>> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param lastModified The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
         * 
         * @return builder
         * 
         */
        public Builder lastModified(@Nullable Output<String> lastModified) {
            $.lastModified = lastModified;
            return this;
        }

        /**
         * @param lastModified The date and time when the resource was last modified in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) format.
         * 
         * @return builder
         * 
         */
        public Builder lastModified(String lastModified) {
            return lastModified(Output.of(lastModified));
        }

        /**
         * @param name The display name of the directory.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The display name of the directory.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parentId The ID of the directory&#39;s parent entity. Typically this is the global account.
         * 
         * @return builder
         * 
         */
        public Builder parentId(@Nullable Output<String> parentId) {
            $.parentId = parentId;
            return this;
        }

        /**
         * @param parentId The ID of the directory&#39;s parent entity. Typically this is the global account.
         * 
         * @return builder
         * 
         */
        public Builder parentId(String parentId) {
            return parentId(Output.of(parentId));
        }

        /**
         * @param state The current state of the directory. Possible values are: | value | description | | --- | --- | | `OK` | The CRUD
         * operation or series of operations completed successfully. | | `STARTED` | CRUD operation on an entity has started. | |
         * `CREATING` | Creating entity operation is in progress. | | `UPDATING` | Updating entity operation is in progress. | |
         * `MOVING` | Moving entity operation is in progress. | | `PROCESSING` | A series of operations related to the entity is in
         * progress. | | `DELETING` | Deleting entity operation is in progress. | | `PENDING REVIEW` | The processing operation has
         * been stopped for reviewing and can be restarted by the operator. | | `CANCELLED` | The operation or processing was
         * canceled by the operator. | | `CREATION_FAILED` | The creation operation failed, and the entity was not created or was
         * created but cannot be used. | | `UPDATE_FAILED` | The update operation failed, and the entity was not updated. | |
         * `PROCESSING_FAILED` | The processing operations failed. | | `DELETION_FAILED` | The delete operation failed, and the
         * entity was not deleted. | | `MOVE_FAILED` | Entity could not be moved to a different location. | | `MIGRATING` |
         * Migrating entity from Neo to Cloud Foundry. |
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current state of the directory. Possible values are: | value | description | | --- | --- | | `OK` | The CRUD
         * operation or series of operations completed successfully. | | `STARTED` | CRUD operation on an entity has started. | |
         * `CREATING` | Creating entity operation is in progress. | | `UPDATING` | Updating entity operation is in progress. | |
         * `MOVING` | Moving entity operation is in progress. | | `PROCESSING` | A series of operations related to the entity is in
         * progress. | | `DELETING` | Deleting entity operation is in progress. | | `PENDING REVIEW` | The processing operation has
         * been stopped for reviewing and can be restarted by the operator. | | `CANCELLED` | The operation or processing was
         * canceled by the operator. | | `CREATION_FAILED` | The creation operation failed, and the entity was not created or was
         * created but cannot be used. | | `UPDATE_FAILED` | The update operation failed, and the entity was not updated. | |
         * `PROCESSING_FAILED` | The processing operations failed. | | `DELETION_FAILED` | The delete operation failed, and the
         * entity was not deleted. | | `MOVE_FAILED` | Entity could not be moved to a different location. | | `MIGRATING` |
         * Migrating entity from Neo to Cloud Foundry. |
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param subdomain Applies only to directories that have the user authorization management feature enabled. The subdomain becomes part of
         * the path used to access the authorization tenant of the directory. It has to be unique within the defined region.
         * 
         * @return builder
         * 
         */
        public Builder subdomain(@Nullable Output<String> subdomain) {
            $.subdomain = subdomain;
            return this;
        }

        /**
         * @param subdomain Applies only to directories that have the user authorization management feature enabled. The subdomain becomes part of
         * the path used to access the authorization tenant of the directory. It has to be unique within the defined region.
         * 
         * @return builder
         * 
         */
        public Builder subdomain(String subdomain) {
            return subdomain(Output.of(subdomain));
        }

        public DirectoryState build() {
            return $;
        }
    }

}
