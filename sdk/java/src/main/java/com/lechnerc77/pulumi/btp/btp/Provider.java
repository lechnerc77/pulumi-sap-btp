// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.lechnerc77.pulumi.btp.btp;

import com.lechnerc77.pulumi.btp.btp.ProviderArgs;
import com.lechnerc77.pulumi.btp.btp.Utilities;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The provider type for the btp package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 * 
 */
@ResourceType(type="pulumi:providers:btp")
public class Provider extends com.pulumi.resources.ProviderResource {
    /**
     * The URL of the BTP CLI server (e.g. `https://cli.btp.cloud.sap`).
     * 
     */
    @Export(name="cliServerUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cliServerUrl;

    /**
     * @return The URL of the BTP CLI server (e.g. `https://cli.btp.cloud.sap`).
     * 
     */
    public Output<Optional<String>> cliServerUrl() {
        return Codegen.optional(this.cliServerUrl);
    }
    /**
     * The subdomain of the global account in which you want to manage resources. To be found in the cockpit, in the global
     * account view.
     * 
     */
    @Export(name="globalaccount", refs={String.class}, tree="[0]")
    private Output<String> globalaccount;

    /**
     * @return The subdomain of the global account in which you want to manage resources. To be found in the cockpit, in the global
     * account view.
     * 
     */
    public Output<String> globalaccount() {
        return this.globalaccount;
    }
    /**
     * The identity provider to be used for authentication (default: SAP ID service with origin `sap.default`).
     * 
     */
    @Export(name="idp", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> idp;

    /**
     * @return The identity provider to be used for authentication (default: SAP ID service with origin `sap.default`).
     * 
     */
    public Output<Optional<String>> idp() {
        return Codegen.optional(this.idp);
    }
    /**
     * A valid id token. To be provided instead of &#39;username&#39; and &#39;password&#39;. This can also be sourced from the `BTP_IDTOKEN`
     * environment variable. (SAP-internal usage only)
     * 
     */
    @Export(name="idtoken", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> idtoken;

    /**
     * @return A valid id token. To be provided instead of &#39;username&#39; and &#39;password&#39;. This can also be sourced from the `BTP_IDTOKEN`
     * environment variable. (SAP-internal usage only)
     * 
     */
    public Output<Optional<String>> idtoken() {
        return Codegen.optional(this.idtoken);
    }
    /**
     * Your password. Note that two-factor authentication is not supported. This can also be sourced from the `BTP_PASSWORD`
     * environment variable.
     * 
     */
    @Export(name="password", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> password;

    /**
     * @return Your password. Note that two-factor authentication is not supported. This can also be sourced from the `BTP_PASSWORD`
     * environment variable.
     * 
     */
    public Output<Optional<String>> password() {
        return Codegen.optional(this.password);
    }
    /**
     * PEM encoded certificate (only required for x509 auth).
     * 
     */
    @Export(name="tlsClientCertificate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tlsClientCertificate;

    /**
     * @return PEM encoded certificate (only required for x509 auth).
     * 
     */
    public Output<Optional<String>> tlsClientCertificate() {
        return Codegen.optional(this.tlsClientCertificate);
    }
    /**
     * PEM encoded private key (only required for x509 auth).
     * 
     */
    @Export(name="tlsClientKey", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tlsClientKey;

    /**
     * @return PEM encoded private key (only required for x509 auth).
     * 
     */
    public Output<Optional<String>> tlsClientKey() {
        return Codegen.optional(this.tlsClientKey);
    }
    /**
     * The URL of the identity provider to be used for authentication (only required for x509 auth).
     * 
     */
    @Export(name="tlsIdpUrl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tlsIdpUrl;

    /**
     * @return The URL of the identity provider to be used for authentication (only required for x509 auth).
     * 
     */
    public Output<Optional<String>> tlsIdpUrl() {
        return Codegen.optional(this.tlsIdpUrl);
    }
    /**
     * Your user name, usually an e-mail address. This can also be sourced from the `BTP_USERNAME` environment variable.
     * 
     */
    @Export(name="username", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> username;

    /**
     * @return Your user name, usually an e-mail address. This can also be sourced from the `BTP_USERNAME` environment variable.
     * 
     */
    public Output<Optional<String>> username() {
        return Codegen.optional(this.username);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Provider(String name) {
        this(name, ProviderArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Provider(String name, ProviderArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Provider(String name, ProviderArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("btp", name, args == null ? ProviderArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "idtoken",
                "password"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

}
