// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.lechnerc77.pulumi.btp.btp.inputs;

import com.lechnerc77.pulumi.btp.btp.inputs.SubaccountRoleCollectionRoleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubaccountRoleCollectionState extends com.pulumi.resources.ResourceArgs {

    public static final SubaccountRoleCollectionState Empty = new SubaccountRoleCollectionState();

    /**
     * The description of the role collection.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the role collection.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the role collection.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the role collection.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="roles")
    private @Nullable Output<List<SubaccountRoleCollectionRoleArgs>> roles;

    public Optional<Output<List<SubaccountRoleCollectionRoleArgs>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    /**
     * The ID of the subaccount.
     * 
     */
    @Import(name="subaccountId")
    private @Nullable Output<String> subaccountId;

    /**
     * @return The ID of the subaccount.
     * 
     */
    public Optional<Output<String>> subaccountId() {
        return Optional.ofNullable(this.subaccountId);
    }

    private SubaccountRoleCollectionState() {}

    private SubaccountRoleCollectionState(SubaccountRoleCollectionState $) {
        this.description = $.description;
        this.name = $.name;
        this.roles = $.roles;
        this.subaccountId = $.subaccountId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubaccountRoleCollectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubaccountRoleCollectionState $;

        public Builder() {
            $ = new SubaccountRoleCollectionState();
        }

        public Builder(SubaccountRoleCollectionState defaults) {
            $ = new SubaccountRoleCollectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the role collection.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the role collection.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name The name of the role collection.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the role collection.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder roles(@Nullable Output<List<SubaccountRoleCollectionRoleArgs>> roles) {
            $.roles = roles;
            return this;
        }

        public Builder roles(List<SubaccountRoleCollectionRoleArgs> roles) {
            return roles(Output.of(roles));
        }

        public Builder roles(SubaccountRoleCollectionRoleArgs... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param subaccountId The ID of the subaccount.
         * 
         * @return builder
         * 
         */
        public Builder subaccountId(@Nullable Output<String> subaccountId) {
            $.subaccountId = subaccountId;
            return this;
        }

        /**
         * @param subaccountId The ID of the subaccount.
         * 
         * @return builder
         * 
         */
        public Builder subaccountId(String subaccountId) {
            return subaccountId(Output.of(subaccountId));
        }

        public SubaccountRoleCollectionState build() {
            return $;
        }
    }

}
